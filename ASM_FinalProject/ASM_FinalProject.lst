Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/16/24 13:35:42
main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDELIB kernel32.lib

 = 00000001			playerSize = 1
 = 00000001			gravity = 1
 = 00000005			jumpForce = 5

 00000000			.data
 00000000 50			player BYTE 'P'

 00000001  0000000A [		platformBuffer BYTE 10 DUP(?)
	    00
	   ]
 0000000B 0000 0000		platformCoord COORD <0,0>
 0000000F 00000000		charRead DWORD ?

 00000013 00000000		outputHandle DWORD 0
 00000017 00000000		bytesWritten DWORD 0
 0000001B 00000000		count DWORD 0
 0000001F 000A 0005		playerXY COORD <10,5>
 00000023 0000			velocityY SWORD 0

 00000025 0018			platformLevel WORD 24
 00000027 01			onPlatform BYTE 1

 00000028 00			escConfirm byte 0

 00000029 00000000		cellsWritten DWORD ?
 0000002D  00000001 [		playerAttributes WORD playerSize DUP(0bh)
	    000B
	   ]

 0000002F 0032			updateInterval WORD 50 ; 50ms each update

 00000031 00000000		startTime DWORD ?
 00000035 00000000		elapsedTime DWORD ?
 00000039 00000258		timeLimit DWORD 600 ; 600 seconds
 0000003D 0000 0000		TimerXY COORD <0,0>

				;畫面繪製
 00000041 00000000		fileHandle HANDLE ?
 00000045 00000000		bytesRead DWORD ?
 00000049 00000000		screenBytesWritten DWORD ?

				;遊戲畫面資料
 0000004D 67 61 6D 65 66	gamescrfile BYTE 'gamefield.txt',0
	   69 65 6C 64 2E
	   74 78 74 00

				;初始畫面資料
 0000005B  00001388 [		buffer BYTE 5000 DUP(?)
	    00
	   ]
 000013E3 73 74 61 72 74	initialscrfile BYTE 'start.txt',0
	   2E 74 78 74 00
 000013ED 00			initialKeyPos Byte 0
 000013EE 00			initialconfirm Byte 0

 000013EF 0031 0011		initialStartLeftPos COORD <49,17>
 000013F3 0000003E		initialStartLeftSymbol DWORD '>',0
	   00000000
 000013FB 0049 0011		initialStartRightPos COORD <73,17>
 000013FF 0000003C		initialStartRightSymbol DWORD '<',0
	   00000000

 00001407 0031 0017		initialExitLeftPos COORD <49,23>
 0000140B 0000003E		initialExitLeftSymbol DWORD '>',0
	   00000000
 00001413 0049 0017		initialExitRightPos COORD <73,23>
 00001417 0000003C		initialExitRightSymbol DWORD '<',0
	   00000000

				;結算畫面資料
 0000141F 66 69 6E 69 73	endscrfile BYTE 'finish.txt',0
	   68 2E 74 78 74
	   00
 0000142A 00			endKeyPos Byte 0
 0000142B 00			endconfirm Byte 0
 0000142C 00000000		endCoinGot DWORD 0
 00001430 00000000		endTime DWORD 0
 00001434 01			needsRefresh BYTE 1
 00001435 00			isDead BYTE 0
 00001436 00			prevKeyPos BYTE 0

 00001437 001E 0014		endStartLeftPos COORD <30,20>
 0000143B 0000003E		endStartLeftSymbol DWORD '>',0
	   00000000
 00001443 0037 0014		endStartRightPos COORD <55,20>
 00001447 0000003C		endStartRightSymbol DWORD '<',0
	   00000000

 0000144F 0044 0014		endExitLeftPos COORD <68,20>
 00001453 0000003E		endExitLeftSymbol DWORD '>',0
	   00000000
 0000145B 005D 0014		endExitRightPos COORD <93,20>
 0000145F 0000003C		endExitRightSymbol DWORD '<',0
	   00000000
 00001467 002B 0007		endCoinGotCoord COORD <43,7>
 0000146B 002B 0004		endTimeCoord COORD <43,4>

				;金幣生成資料
 0000146F 00000001		coinSeed DWORD 1
 00001473 0000 0000		coinCoord COORD <0,0>
 00001477 00			coinGenerated byte 0
 00001478 24			coinSymbol byte '$'
 00001479 000E			coinAttribute WORD 0Eh
 0000147B 00000000		coinGot DWORD 0
 0000147F 2F 31 35 00		coinOutput db "/15",0
 00001483 0001 0002		coinGotCoord1 COORD <1,2>
 00001487 0003 0002		coinGotCoord2 COORD <3,2>
 0000148B 00			coinGet byte 0

 00000000			.code
					SetConsoleOutputCP PROTO STDCALL :DWORD
					GetAsyncKeyState PROTO STDCALL :DWORD
					ReadConsoleOutputCharacterA PROTO STDCALL :DWORD, :PTR BYTE, :DWORD, :COORD, :PTR DWORD
					drawScreen PROTO screenFileName :PTR BYTE
 00000000			main PROC
					INVOKE SetConsoleOutputCP, 437

					; Get the console ouput handle
					INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000011  A3 00000013 R		mov outputHandle, eax	; save console handle

 00000016			initialLoop:
 00000016  E8 00000000 E		call Clrscr
 0000001B  E8 0000036D			call displayInitialscr
 00000020  E8 00000409			call readInputInitialscr
 00000025  80 3D 000013EE R		cmp Initialconfirm, 1
	   01
 0000002C  74 02			je conti
 0000002E  EB E6			jmp initialLoop

 00000030			conti:
					INVOKE GetTickCount
 00000035  A3 00000031 R		mov startTime, eax
 0000003A  66| C7 05			mov playerXY.X, 10
	   0000001F R
	   000A
 00000043  66| C7 05			mov playerXY.Y, 5
	   00000021 R
	   0005
 0000004C  66| C7 05			mov velocityY, 0
	   00000023 R
	   0000
 00000055  C6 05 00001435 R		mov isDead, 0
	   00
 0000005C  C6 05 00000028 R		mov escConfirm, 0
	   00
 00000063  C6 05 0000142B R		mov endConfirm, 0
	   00
 0000006A  C7 05 0000147B R		mov coinGot, 0
	   00000000
					
 00000074			GameLoop:
 00000074  E8 00000000 E		call Clrscr
 00000079  E8 000000BB			call updatePhysics
					INVOKE drawScreen, ADDR gamescrfile
 00000088  E8 000001F4			call drawPlayer
 0000008D  E8 0000011C			call checkPlatformLevel
 00000092  E8 000002B7			call displayTime
 00000097  E8 000005ED			call displayCoinGot
 0000009C  E8 0000017B			call readPlayerMoveInput
 000000A1  E8 0000068B			call getCoin
 000000A6  E8 000004FC			call generateCoins
 000000AB  E8 000006CB			call endGame
 000000B0  80 3D 00000028 R		cmp  escConfirm, 1
	   01
 000000B7  74 11			je endLoop
					invoke Sleep, updateInterval
 000000C8  EB AA			jmp GameLoop

 000000CA			endLoop:
 000000CA  80 3D 00001434 R		cmp needsRefresh, 1
	   01
 000000D1  74 02			je Refresh
 000000D3  EB 18			jmp CheckInput

 000000D5			Refresh:
 000000D5  E8 00000000 E		call Clrscr
 000000DA  E8 000003BB			call displayEndscr
 000000DF  E8 000005F7			call displayEndData
 000000E4  C6 05 00001434 R		mov needsRefresh, 0
	   00
 000000EB  EB 00			jmp CheckInput

 000000ED			CheckInput:
 000000ED  E8 00000449			call readInputEndscr
 000000F2  80 3D 0000142B R		cmp endconfirm, 1
	   01
 000000F9  0F 84 FFFFFF31		je conti
 000000FF  A0 0000142A R		mov al, endKeyPos
 00000104  8A 25 00001436 R		mov ah, prevKeyPos
 0000010A  3A E0			cmp ah, al
 0000010C  74 13			je SkipRefresh
 0000010E  C6 05 00001434 R		mov needsRefresh, 1
	   01
 00000115  8A 25 0000142A R		mov ah, endKeyPos
 0000011B  88 25 00001436 R		mov prevKeyPos, ah

 00000121			SkipRefresh:
					invoke Sleep, updateInterval
 00000130  EB 98			jmp endLoop

					exit
 00000139			main ENDP

 00000139			updatePhysics PROC uses eax ebx
					; 檢查是否超出螢幕上方
					.IF playerXY.Y >= 60000
 00000146  66| C7 05				mov playerXY.Y, 0
	   00000021 R
	   0000
 0000014F  66| C7 05				mov platformLevel, 0
	   00000025 R
	   0000
					.ENDIF

					; 檢查是否掉出螢幕下方
					.IF playerXY.Y >= 29
 00000162  C6 05 00001435 R			mov isDead, 1
	   01
					.ENDIF
				    ; 更新玩家的 Y 座標
 00000169  66| A1		    mov ax, velocityY
	   00000023 R
 0000016F  66| 01 05		    add playerXY.Y, ax        ; 根據垂直速度更新位置
	   00000021 R

				    ; 應用重力（加速垂直速度）
 00000176  66| 83 05		    add velocityY, gravity    ; 重力影響：速度越來越快
	   00000023 R 01

				    ; 檢查是否低於地面
 0000017E  66| A1		    mov ax, playerXY.Y
	   00000021 R
 00000184  66| 3B 05		    cmp ax, platformLevel
	   00000025 R
 0000018B  7E 1E			jle EndPhysics            ; 如果未超過地面，跳過地面處理

				    ; 如果超出地面，重置到地面
 0000018D  66| A1		    mov ax, platformLevel
	   00000025 R
 00000193  66| A3		    mov playerXY.Y, ax        ; 將玩家重置到地面
	   00000021 R
 00000199  66| C7 05		    mov velocityY, 0          ; 停止垂直運動
	   00000023 R
	   0000
 000001A2  C6 05 00000027 R	    mov onPlatform, 1           ; 標記玩家在地面上
	   01
 000001A9  EB 00		    jmp EndPhysics

 000001AB			EndPhysics:
				    ret
 000001AE			updatePhysics ENDP

				; 檢查平台高度
 000001AE			checkPlatformLevel PROC uses eax ebx ecx edx
 000001B2  66| A1			mov ax, playerXY.X
	   0000001F R
 000001B8  66| 8B 1D			mov bx, playerXY.Y
	   00000021 R
 000001BF  66| 43			inc bx
 000001C1  66| A3			mov platformCoord.X, ax
	   0000000B R
 000001C7  66| 89 1D			mov platformCoord.Y, bx
	   0000000D R

 000001CE  66| B9 001E			mov cx, 30
 000001D2			detectPlatform:
 000001D2  66| 8B D1			mov dx, cx

					INVOKE ReadConsoleOutputCharacterA,
					outputHandle,
					ADDR platformBuffer,
					1,
					platformCoord,
					ADDR charRead

 000001F2  A0 00000001 R		mov al, platformBuffer
					.IF al != 32
 000001FB  66| A1				mov ax, platformCoord.Y
	   0000000D R
 00000201  66| 48				dec ax
 00000203  66| A3				mov platformLevel, ax
	   00000025 R
 00000209  EB 0C				jmp EndCheck
					.ENDIF
 0000020B  66| FF 05			inc platformCoord.Y
	   0000000D R
 00000212  66| 8B CA			mov cx, dx
 00000215  E2 BB			loop detectPlatform

					; 輸出Debug訊息
				;showINFO:
					;mov dl, 0
					;mov dh, 0
					;call gotoxy
					;call WriteDec

 00000217			EndCheck:
					ret
 0000021C			checkPlatformLevel ENDP

 0000021C			readPlayerMoveInput PROC
				    ; 檢查W鍵（向上移動）
				    INVOKE GetAsyncKeyState, 'W'
 00000223  66| A9 8000		    test ax, 8000h
 00000227  74 1B		    jz CheckA
 00000229  80 3D 00000027 R		cmp onPlatform, 1
	   01
 00000230  75 12			jne CheckA
 00000232  66| B8 0005			mov ax, jumpForce
 00000236  66| 29 05			sub velocityY, ax
	   00000023 R
 0000023D  C6 05 00000027 R		mov onPlatform, 0
	   00

 00000244			CheckA:
				    ; 檢查A鍵（向左移動）
				    INVOKE GetAsyncKeyState, 'A'
 0000024B  66| A9 8000		    test ax, 8000h
 0000024F  74 07		    jz CheckD
 00000251  66| FF 0D		    dec playerXY.X           ; 玩家X座標減少，向左移動
	   0000001F R

 00000258			CheckD:
				    ; 檢查D鍵（向右移動）
				    INVOKE GetAsyncKeyState, 'D'
 0000025F  66| A9 8000		    test ax, 8000h
 00000263  74 07		    jz CheckESC
 00000265  66| FF 05		    inc playerXY.X           ; 玩家X座標增加，向右移動
	   0000001F R

 0000026C			CheckESC:
				    ; 檢查ESC鍵（退出遊戲）
				    INVOKE GetAsyncKeyState, VK_ESCAPE
 00000273  66| A9 8000		    test ax, 8000h
 00000277  74 07		    jz EndInput
 00000279  C6 05 00000028 R	    mov escConfirm,1
	   01

 00000280			EndInput:
 00000280  C3				ret
 00000281			readPlayerMoveInput ENDP

 00000281			drawPlayer PROC
					INVOKE WriteConsoleOutputAttribute,
					outputHandle, 
					OFFSET playerAttributes,
					playerSize, 
					playerXY,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle,
					OFFSET player,
					playerSize,
					playerXY,
					OFFSET count
 000002BB  C3				ret
 000002BC			drawPlayer ENDP

 000002BC			drawScreen PROC uses eax ebx ecx edx, screenFileName:PTR BYTE
				    ;打開文字檔案
					INVOKE CreateFile, screenFileName, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL 
 000002DD  A3 00000041 R		mov fileHandle, eax

 000002E2			ReadLoop:
					;使用UTF-8編碼，顯示符號
					INVOKE SetConsoleOutputCP, 65001

					;讀取檔案
					INVOKE ReadFile, fileHandle, ADDR buffer, SIZEOF buffer, ADDR bytesRead, NULL

					;畫面更新及輸出檔案
 00000308  E8 00000000 E		call Clrscr
					INVOKE SetFilePointer, fileHandle, 0, NULL, FILE_BEGIN
					INVOKE WriteConsole, outputHandle, ADDR buffer, bytesRead, ADDR screenBytesWritten, NULL

 0000033B			EndDraw:
					;關閉檔案
				    INVOKE CloseHandle, fileHandle
				    ret
 0000034E			drawScreen ENDP

 0000034E			displayTime PROC uses eax ebx ecx edx
					INVOKE GetTickCount
 00000357  2B 05 00000031 R		sub eax, startTime
 0000035D  99				cdq
 0000035E  BB 000003E8			mov ebx, 1000
 00000363  F7 F3			div ebx
 00000365  A3 00000035 R		mov elapsedTime, eax
 0000036A  A1 00000039 R		mov eax, timeLimit
 0000036F  2B 05 00000035 R		sub eax, elapsedTime
 00000375  A3 00001430 R		mov endTime, eax
 0000037A  B2 01			mov dl, 1
 0000037C  B6 01			mov dh, 1
 0000037E  E8 00000000 E		call gotoxy
 00000383  E8 00000000 E		call WriteDec
					ret
 0000038D			displayTime ENDP

 0000038D			displayInitialscr PROC uses eax ebx ecx edx
				    INVOKE drawScreen, ADDR initialscrfile
 0000039B  80 3D 000013ED R		cmp initialKeyPos, 1
	   01
 000003A2  74 3C			je Pos2 

 000003A4			Pos1:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialStartLeftSymbol,
					1, 
					initialStartLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialStartRightSymbol,
					1, 
					initialStartRightPos,
					OFFSET count
 000003DE  EB 3A			jmp conti

 000003E0			Pos2:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialExitLeftSymbol,
					1, 
					initialExitLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialExitRightSymbol,
					1, 
					initialExitRightPos,
					OFFSET count

 0000041A			conti:
					INVOKE Sleep, updateInterval

 00000429			EndDisplay:
				    ret
 0000042E			displayInitialscr ENDP

 0000042E			readInputInitialscr PROC uses eax ebx ecx edx
					INVOKE GetAsyncKeyState, VK_RETURN
 00000439  A9 00008000			test eax, 8000h                     
 0000043E  74 21		    jz checkW
 00000440  80 3D 000013ED R		cmp initialKeyPos, 0 ;判斷按鍵位置
	   00
 00000447  74 0C			je confirm
 00000449  E8 00000000 E		call Clrscr
					INVOKE ExitProcess, 0

 00000455			confirm:
 00000455  C6 05 000013EE R		mov initialconfirm, 1
	   01
					ret

 00000461			checkW:
					INVOKE GetAsyncKeyState, 'W'
 00000468  A9 00008000			test eax, 8000h                     
 0000046D  74 0C		    jz checkS
 0000046F  C6 05 000013ED R		mov initialKeyPos, 0
	   00
					ret

 0000047B			checkS:
					INVOKE GetAsyncKeyState, 'S'
 00000482  A9 00008000			test eax, 8000h                     
 00000487  74 0C		    jz no_key_pressed
 00000489  C6 05 000013ED R		mov initialKeyPos, 1
	   01
					ret

 00000495			no_key_pressed:
					ret
 0000049A			readInputInitialscr ENDP

 0000049A			displayEndscr PROC uses eax ebx ecx edx
				    INVOKE drawScreen, ADDR endscrfile
 000004A8  80 3D 0000142A R		cmp endKeyPos, 1
	   01
 000004AF  74 3C			je Pos2 

 000004B1			Pos1:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endStartLeftSymbol,
					1, 
					endStartLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endStartRightSymbol,
					1, 
					endStartRightPos,
					OFFSET count
 000004EB  EB 3A			jmp conti

 000004ED			Pos2:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endExitLeftSymbol,
					1, 
					endExitLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endExitRightSymbol,
					1, 
					endExitRightPos,
					OFFSET count

 00000527			conti:
					INVOKE Sleep, updateInterval

 00000536			EndDisplay:
				    ret
 0000053B			displayEndscr ENDP

 0000053B			readInputEndscr PROC uses eax ebx ecx edx
					INVOKE GetAsyncKeyState, VK_RETURN
 00000546  A9 00008000			test eax, 8000h                     
 0000054B  74 21		    jz checkA
 0000054D  80 3D 0000142A R		cmp endKeyPos, 0 ;判斷按鍵位置
	   00
 00000554  74 0C			je confirm
 00000556  E8 00000000 E		call Clrscr
					INVOKE ExitProcess, 0

 00000562			confirm:
 00000562  C6 05 0000142B R		mov endconfirm, 1
	   01
					ret

 0000056E			checkA:
					INVOKE GetAsyncKeyState, 'A'
 00000575  A9 00008000			test eax, 8000h                     
 0000057A  74 0C		    jz checkD
 0000057C  C6 05 0000142A R		mov endKeyPos, 0
	   00
					ret

 00000588			checkD:
					INVOKE GetAsyncKeyState, 'D'
 0000058F  A9 00008000			test eax, 8000h                     
 00000594  74 0C		    jz no_key_pressed
 00000596  C6 05 0000142A R		mov endKeyPos, 1
	   01
					ret

 000005A2			no_key_pressed:
					ret
 000005A7			readInputEndscr ENDP

 000005A7			generateCoins PROC uses eax ebx ecx edx
 000005AB  80 3D 00001477 R		cmp coinGenerated, 1
	   01
 000005B2  0F 84 0000008B		je output
 000005B8  A1 0000146F R		mov eax, coinSeed
 000005BD  B9 00000004			mov ecx, 4
 000005C2  33 D2			xor edx,edx
 000005C4  F7 F1			div ecx
 000005C6  01 05 0000146F R		add coinSeed, eax 
 000005CC  83 3D 0000146F R		cmp coinSeed, 1
	   01
 000005D3  74 14			je Pos1
 000005D5  83 3D 0000146F R		cmp coinSeed, 2
	   02
 000005DC  74 1F			je Pos2
 000005DE  83 3D 0000146F R		cmp coinSeed, 3
	   03
 000005E5  74 2A			je Pos3
 000005E7  EB 3C			jmp Pos4

 000005E9			Pos1:
 000005E9  66| C7 05			mov coinCoord.x, 15
	   00001473 R
	   000F
 000005F2  66| C7 05			mov coinCoord.y, 2
	   00001475 R
	   0002
 000005FB  EB 46			jmp output

 000005FD			Pos2:
 000005FD  66| C7 05			mov coinCoord.x, 90
	   00001473 R
	   005A
 00000606  66| C7 05			mov coinCoord.y, 3
	   00001475 R
	   0003
 0000060F  EB 32			jmp output

 00000611			Pos3:
 00000611  66| C7 05			mov coinCoord.x, 40
	   00001473 R
	   0028
 0000061A  66| C7 05			mov coinCoord.y, 15
	   00001475 R
	   000F
 00000623  EB 1E			jmp output

 00000625			Pos4:
 00000625  66| C7 05			mov coinCoord.x, 98
	   00001473 R
	   0062
 0000062E  66| C7 05			mov coinCoord.y, 17
	   00001475 R
	   0011
 00000637  C7 05 0000146F R		mov coinSeed, 0
	   00000000
 00000641  EB 00			jmp output

 00000643			output:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle,
					OFFSET coinSymbol,
					1,
					coinCoord,
					OFFSET count

					INVOKE WriteConsoleOutputAttribute,
					outputHandle, 
					OFFSET coinAttribute,
					1, 
					coinCoord,
					OFFSET count

 0000067D  C6 05 00001477 R		mov coinGenerated, 1
	   01
					ret
 00000689			generateCoins ENDP

 00000689			displayCoinGot PROC uses eax ebx ecx edx
				    invoke SetConsoleCursorPosition,outputHandle, coinGotCoord1
 0000069E  A1 0000147B R		mov eax, coinGot
 000006A3  E8 00000000 E		call WriteDec
					invoke SetConsoleCursorPosition, outputHandle, coinGotCoord2
 000006B9  B9 00000003			mov ecx, 3
					invoke WriteFile, outputHandle, ADDR coinOutput, ecx, addr bytesWritten, NULL
					ret
 000006DB			displayCoinGot ENDP

 000006DB			displayEndData PROC uses eax ebx ecx edx
 000006DF			coin:
 000006DF  B2 2B			mov dl, 43
 000006E1  B6 07			mov dh, 7
 000006E3  E8 00000000 E		call gotoxy
 000006E8  A1 0000147B R		mov eax, CoinGot
 000006ED  E8 00000000 E		call WriteDec

 000006F2			time:
 000006F2  B2 2B			mov dl, 43
 000006F4  B6 04			mov dh, 4
 000006F6  E8 00000000 E		call gotoxy
 000006FB  A1 00001430 R		mov eax, endTime
 00000700  E8 00000000 E		call WriteDec

 00000705			point:
 00000705  B2 2B			mov dl, 43
 00000707  B6 0A			mov dh, 10
 00000709  E8 00000000 E		call gotoxy
 0000070E  A1 0000147B R		mov eax, CoinGot
 00000713  F7 25 00001430 R		mul endTime
					.IF isDead == 1
 00000722  B8 00000000				mov eax, 0
					.ENDIF
 00000727  E8 00000000 E		call WriteDec

					ret
 00000731			displayEndData ENDP

 00000731			getCoin PROC uses eax ebx ecx edx
 00000735			compareX:
 00000735  66| A1			mov ax, playerXY.x
	   0000001F R
 0000073B  66| 3B 05			cmp ax, coinCoord.x
	   00001473 R
 00000742  75 2B			jne not_equal

 00000744			compareY:
 00000744  66| A1			mov ax, playerXY.y
	   00000021 R
 0000074A  66| 3B 05			cmp ax, coinCoord.y
	   00001475 R
 00000751  75 1C			jne not_equal

 00000753			equal:
 00000753  C6 05 0000148B R		mov coinGet, 1
	   01
 0000075A  FF 05 0000147B R		inc coinGot
 00000760  C6 05 00001477 R		mov coinGenerated, 0
	   00
 00000767  FF 05 0000146F R		inc coinSeed
 0000076D  EB 07			jmp end_program

 0000076F			not_equal:
 0000076F  C6 05 0000148B R		mov coinGet, 0
	   00

 00000776			end_program:
					ret

 0000077B			getCoin ENDP

 0000077B			endGame PROC uses eax ebx ecx edx
 0000077F  A1 0000147B R		mov eax, coinGot
 00000784  83 F8 0F			cmp eax, 15
 00000787  74 15			je equal

 00000789  A1 00001430 R		mov eax, endTime
 0000078E  83 F8 00			cmp eax, 0
 00000791  74 0B			je equal

 00000793  A0 00001435 R		mov al, isDead
 00000798  3C 01			cmp al, 1
 0000079A  74 02			je equal
 0000079C  EB 07			jmp end_program

 0000079E			equal:
 0000079E  C6 05 00000028 R		mov escConfirm, 1
	   01

 000007A5			end_program:
					ret
 000007AA			endGame ENDP

				END main
Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/16/24 13:35:42
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000148C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000007AA Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetAsyncKeyState . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleOutputCharacterA  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleOutputCharacter . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleOutputCP . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkPlatformLevel . . . . . . .	P Near	 000001AE _TEXT	Length= 0000006E Public STDCALL
  detectPlatform . . . . . . . .	L Near	 000001D2 _TEXT	
  EndCheck . . . . . . . . . . .	L Near	 00000217 _TEXT	
displayCoinGot . . . . . . . . .	P Near	 00000689 _TEXT	Length= 00000052 Public STDCALL
displayEndData . . . . . . . . .	P Near	 000006DB _TEXT	Length= 00000056 Public STDCALL
  coin . . . . . . . . . . . . .	L Near	 000006DF _TEXT	
  time . . . . . . . . . . . . .	L Near	 000006F2 _TEXT	
  point  . . . . . . . . . . . .	L Near	 00000705 _TEXT	
displayEndscr  . . . . . . . . .	P Near	 0000049A _TEXT	Length= 000000A1 Public STDCALL
  Pos1 . . . . . . . . . . . . .	L Near	 000004B1 _TEXT	
  Pos2 . . . . . . . . . . . . .	L Near	 000004ED _TEXT	
  conti  . . . . . . . . . . . .	L Near	 00000527 _TEXT	
  EndDisplay . . . . . . . . . .	L Near	 00000536 _TEXT	
displayInitialscr  . . . . . . .	P Near	 0000038D _TEXT	Length= 000000A1 Public STDCALL
  Pos1 . . . . . . . . . . . . .	L Near	 000003A4 _TEXT	
  Pos2 . . . . . . . . . . . . .	L Near	 000003E0 _TEXT	
  conti  . . . . . . . . . . . .	L Near	 0000041A _TEXT	
  EndDisplay . . . . . . . . . .	L Near	 00000429 _TEXT	
displayTime  . . . . . . . . . .	P Near	 0000034E _TEXT	Length= 0000003F Public STDCALL
drawPlayer . . . . . . . . . . .	P Near	 00000281 _TEXT	Length= 0000003B Public STDCALL
drawScreen . . . . . . . . . . .	P Near	 000002BC _TEXT	Length= 00000092 Public STDCALL
  screenFileName . . . . . . . .	DWord	 bp + 00000008
  ReadLoop . . . . . . . . . . .	L Near	 000002E2 _TEXT	
  EndDraw  . . . . . . . . . . .	L Near	 0000033B _TEXT	
endGame  . . . . . . . . . . . .	P Near	 0000077B _TEXT	Length= 0000002F Public STDCALL
  equal  . . . . . . . . . . . .	L Near	 0000079E _TEXT	
  end_program  . . . . . . . . .	L Near	 000007A5 _TEXT	
generateCoins  . . . . . . . . .	P Near	 000005A7 _TEXT	Length= 000000E2 Public STDCALL
  Pos1 . . . . . . . . . . . . .	L Near	 000005E9 _TEXT	
  Pos2 . . . . . . . . . . . . .	L Near	 000005FD _TEXT	
  Pos3 . . . . . . . . . . . . .	L Near	 00000611 _TEXT	
  Pos4 . . . . . . . . . . . . .	L Near	 00000625 _TEXT	
  output . . . . . . . . . . . .	L Near	 00000643 _TEXT	
getCoin  . . . . . . . . . . . .	P Near	 00000731 _TEXT	Length= 0000004A Public STDCALL
  compareX . . . . . . . . . . .	L Near	 00000735 _TEXT	
  compareY . . . . . . . . . . .	L Near	 00000744 _TEXT	
  equal  . . . . . . . . . . . .	L Near	 00000753 _TEXT	
  not_equal  . . . . . . . . . .	L Near	 0000076F _TEXT	
  end_program  . . . . . . . . .	L Near	 00000776 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000139 Public STDCALL
  initialLoop  . . . . . . . . .	L Near	 00000016 _TEXT	
  conti  . . . . . . . . . . . .	L Near	 00000030 _TEXT	
  GameLoop . . . . . . . . . . .	L Near	 00000074 _TEXT	
  endLoop  . . . . . . . . . . .	L Near	 000000CA _TEXT	
  Refresh  . . . . . . . . . . .	L Near	 000000D5 _TEXT	
  CheckInput . . . . . . . . . .	L Near	 000000ED _TEXT	
  SkipRefresh  . . . . . . . . .	L Near	 00000121 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readInputEndscr  . . . . . . . .	P Near	 0000053B _TEXT	Length= 0000006C Public STDCALL
  confirm  . . . . . . . . . . .	L Near	 00000562 _TEXT	
  checkA . . . . . . . . . . . .	L Near	 0000056E _TEXT	
  checkD . . . . . . . . . . . .	L Near	 00000588 _TEXT	
  no_key_pressed . . . . . . . .	L Near	 000005A2 _TEXT	
readInputInitialscr  . . . . . .	P Near	 0000042E _TEXT	Length= 0000006C Public STDCALL
  confirm  . . . . . . . . . . .	L Near	 00000455 _TEXT	
  checkW . . . . . . . . . . . .	L Near	 00000461 _TEXT	
  checkS . . . . . . . . . . . .	L Near	 0000047B _TEXT	
  no_key_pressed . . . . . . . .	L Near	 00000495 _TEXT	
readPlayerMoveInput  . . . . . .	P Near	 0000021C _TEXT	Length= 00000065 Public STDCALL
  CheckA . . . . . . . . . . . .	L Near	 00000244 _TEXT	
  CheckD . . . . . . . . . . . .	L Near	 00000258 _TEXT	
  CheckESC . . . . . . . . . . .	L Near	 0000026C _TEXT	
  EndInput . . . . . . . . . . .	L Near	 00000280 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
updatePhysics  . . . . . . . . .	P Near	 00000139 _TEXT	Length= 00000075 Public STDCALL
  EndPhysics . . . . . . . . . .	L Near	 000001AB _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TimerXY  . . . . . . . . . . . .	COORD	 0000003D _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 0000005B _DATA	
bytesRead  . . . . . . . . . . .	DWord	 00000045 _DATA	
bytesWritten . . . . . . . . . .	DWord	 00000017 _DATA	
cellsWritten . . . . . . . . . .	DWord	 00000029 _DATA	
charRead . . . . . . . . . . . .	DWord	 0000000F _DATA	
coinAttribute  . . . . . . . . .	Word	 00001479 _DATA	
coinCoord  . . . . . . . . . . .	COORD	 00001473 _DATA	
coinGenerated  . . . . . . . . .	Byte	 00001477 _DATA	
coinGet  . . . . . . . . . . . .	Byte	 0000148B _DATA	
coinGotCoord1  . . . . . . . . .	COORD	 00001483 _DATA	
coinGotCoord2  . . . . . . . . .	COORD	 00001487 _DATA	
coinGot  . . . . . . . . . . . .	DWord	 0000147B _DATA	
coinOutput . . . . . . . . . . .	Byte	 0000147F _DATA	
coinSeed . . . . . . . . . . . .	DWord	 0000146F _DATA	
coinSymbol . . . . . . . . . . .	Byte	 00001478 _DATA	
count  . . . . . . . . . . . . .	DWord	 0000001B _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
elapsedTime  . . . . . . . . . .	DWord	 00000035 _DATA	
endCoinGotCoord  . . . . . . . .	COORD	 00001467 _DATA	
endCoinGot . . . . . . . . . . .	DWord	 0000142C _DATA	
endExitLeftPos . . . . . . . . .	COORD	 0000144F _DATA	
endExitLeftSymbol  . . . . . . .	DWord	 00001453 _DATA	
endExitRightPos  . . . . . . . .	COORD	 0000145B _DATA	
endExitRightSymbol . . . . . . .	DWord	 0000145F _DATA	
endKeyPos  . . . . . . . . . . .	Byte	 0000142A _DATA	
endStartLeftPos  . . . . . . . .	COORD	 00001437 _DATA	
endStartLeftSymbol . . . . . . .	DWord	 0000143B _DATA	
endStartRightPos . . . . . . . .	COORD	 00001443 _DATA	
endStartRightSymbol  . . . . . .	DWord	 00001447 _DATA	
endTimeCoord . . . . . . . . . .	COORD	 0000146B _DATA	
endTime  . . . . . . . . . . . .	DWord	 00001430 _DATA	
endconfirm . . . . . . . . . . .	Byte	 0000142B _DATA	
endscrfile . . . . . . . . . . .	Byte	 0000141F _DATA	
escConfirm . . . . . . . . . . .	Byte	 00000028 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00000041 _DATA	
gamescrfile  . . . . . . . . . .	Byte	 0000004D _DATA	
gravity  . . . . . . . . . . . .	Number	 00000001h   
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
initialExitLeftPos . . . . . . .	COORD	 00001407 _DATA	
initialExitLeftSymbol  . . . . .	DWord	 0000140B _DATA	
initialExitRightPos  . . . . . .	COORD	 00001413 _DATA	
initialExitRightSymbol . . . . .	DWord	 00001417 _DATA	
initialKeyPos  . . . . . . . . .	Byte	 000013ED _DATA	
initialStartLeftPos  . . . . . .	COORD	 000013EF _DATA	
initialStartLeftSymbol . . . . .	DWord	 000013F3 _DATA	
initialStartRightPos . . . . . .	COORD	 000013FB _DATA	
initialStartRightSymbol  . . . .	DWord	 000013FF _DATA	
initialconfirm . . . . . . . . .	Byte	 000013EE _DATA	
initialscrfile . . . . . . . . .	Byte	 000013E3 _DATA	
isDead . . . . . . . . . . . . .	Byte	 00001435 _DATA	
jumpForce  . . . . . . . . . . .	Number	 00000005h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
needsRefresh . . . . . . . . . .	Byte	 00001434 _DATA	
onPlatform . . . . . . . . . . .	Byte	 00000027 _DATA	
outputHandle . . . . . . . . . .	DWord	 00000013 _DATA	
platformBuffer . . . . . . . . .	Byte	 00000001 _DATA	
platformCoord  . . . . . . . . .	COORD	 0000000B _DATA	
platformLevel  . . . . . . . . .	Word	 00000025 _DATA	
playerAttributes . . . . . . . .	Word	 0000002D _DATA	
playerSize . . . . . . . . . . .	Number	 00000001h   
playerXY . . . . . . . . . . . .	COORD	 0000001F _DATA	
player . . . . . . . . . . . . .	Byte	 00000000 _DATA	
prevKeyPos . . . . . . . . . . .	Byte	 00001436 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
screenBytesWritten . . . . . . .	DWord	 00000049 _DATA	
startTime  . . . . . . . . . . .	DWord	 00000031 _DATA	
timeLimit  . . . . . . . . . . .	DWord	 00000039 _DATA	
updateInterval . . . . . . . . .	Word	 0000002F _DATA	
velocityY  . . . . . . . . . . .	Word	 00000023 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
