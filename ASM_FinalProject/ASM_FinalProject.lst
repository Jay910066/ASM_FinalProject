Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/20/24 15:42:15
main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDELIB kernel32.lib

 = 00000001			playerSize = 1
 = 00000001			gravity = 1
 = 00000004			jumpForce = 4

 00000000			.data
 00000000 50			player BYTE 'P'

 00000001  0000000A [		platformBuffer BYTE 10 DUP(?)
	    00
	   ]
 0000000B 0000 0000		platformCoord COORD <0,0>
 0000000F 00000000		charRead DWORD ?

 00000013 00000000		outputHandle DWORD 0
 00000017 00000000		bytesWritten DWORD 0
 0000001B 00000000		count DWORD 0
 0000001F 000A 0005		playerXY COORD <10,5>
 00000023 0000			velocityY SWORD 0
 00000025 00			isRunning BYTE 0

 00000026 0018			platformLevel WORD 24
 00000028 01			onPlatform BYTE 1

 00000029 00			escConfirm byte 0

 0000002A 00000000		cellsWritten DWORD ?
 0000002E  00000001 [		playerAttributes WORD playerSize DUP(0bh)
	    000B
	   ]

 00000030 0032			updateInterval WORD 50 ; 50ms each update

 00000032 00000000		startTime DWORD ?
 00000036 00000000		elapsedTime DWORD ?
 0000003A 00000258		timeLimit DWORD 600 ; 600 seconds
 0000003E 0000 0000		TimerXY COORD <0,0>

				;畫面繪製
 00000042 00000000		fileHandle HANDLE ?
 00000046 00000000		bytesRead DWORD ?
 0000004A 00000000		screenBytesWritten DWORD ?

				;遊戲畫面資料
 0000004E 67 61 6D 65 66	gamescrfile BYTE 'gamefield1.txt',0
	   69 65 6C 64 31
	   2E 74 78 74 00

				;初始畫面資料
 0000005D  00001B58 [		buffer BYTE 7000 DUP(?)
	    00
	   ]
 00001BB5 73 74 61 72 74	initialscrfile BYTE 'start.txt',0
	   2E 74 78 74 00
 00001BBF 00			initialKeyPos Byte 0
 00001BC0 00			initialconfirm Byte 0

 00001BC1 0031 0011		initialStartLeftPos COORD <49,17>
 00001BC5 0000003E		initialStartLeftSymbol DWORD '>',0
	   00000000
 00001BCD 0049 0011		initialStartRightPos COORD <73,17>
 00001BD1 0000003C		initialStartRightSymbol DWORD '<',0
	   00000000

 00001BD9 0031 0017		initialExitLeftPos COORD <49,23>
 00001BDD 0000003E		initialExitLeftSymbol DWORD '>',0
	   00000000
 00001BE5 0049 0017		initialExitRightPos COORD <73,23>
 00001BE9 0000003C		initialExitRightSymbol DWORD '<',0
	   00000000

				;結算畫面資料
 00001BF1 66 69 6E 69 73	endscrfile BYTE 'finish.txt',0
	   68 2E 74 78 74
	   00
 00001BFC 00			endKeyPos Byte 0
 00001BFD 00			endconfirm Byte 0
 00001BFE 00000000		endCoinGot DWORD 0
 00001C02 00000000		endTime DWORD 0
 00001C06 01			needsRefresh BYTE 1
 00001C07 00			isDead BYTE 0
 00001C08 00			prevKeyPos BYTE 0

 00001C09 001E 0014		endStartLeftPos COORD <30,20>
 00001C0D 0000003E		endStartLeftSymbol DWORD '>',0
	   00000000
 00001C15 0037 0014		endStartRightPos COORD <55,20>
 00001C19 0000003C		endStartRightSymbol DWORD '<',0
	   00000000

 00001C21 0044 0014		endExitLeftPos COORD <68,20>
 00001C25 0000003E		endExitLeftSymbol DWORD '>',0
	   00000000
 00001C2D 005D 0014		endExitRightPos COORD <93,20>
 00001C31 0000003C		endExitRightSymbol DWORD '<',0
	   00000000
 00001C39 002B 0007		endCoinGotCoord COORD <43,7>
 00001C3D 002B 0004		endTimeCoord COORD <43,4>

				;金幣生成資料
 00001C41 00000001		coinSeed DWORD 1
 00001C45 0000 0000		coinCoord COORD <0,0>
 00001C49 00			coinGenerated byte 0
 00001C4A 24			coinSymbol byte '$'
 00001C4B 000E			coinAttribute WORD 0Eh
 00001C4D 00000000		coinGot DWORD 0
 00001C51 2F 35 00		coinOutput1 db "/5",0
 00001C54 2F 38 00		coinOutput2 db "/8",0
 00001C57 2F 31 32 00		coinOutput3 db "/12",0
 00001C5B 0007 0002		coinGotCoord1 COORD <7,2>
 00001C5F 0009 0002		coinGotCoord2 COORD <9,2>
 00001C63 00			coinGet byte 0
 00001C64 00000000		seed DWORD ?
 00001C68 00000000		preSeed DWORD 0

 00000000			.code
					SetConsoleOutputCP PROTO STDCALL :DWORD
					GetAsyncKeyState PROTO STDCALL :DWORD
					ReadConsoleOutputCharacterA PROTO STDCALL :DWORD, :PTR BYTE, :DWORD, :COORD, :PTR DWORD
					drawScreen PROTO screenFileName :PTR BYTE
 00000000			main PROC
					INVOKE SetConsoleOutputCP, 437

					; Get the console ouput handle
					INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000011  A3 00000013 R		mov outputHandle, eax	; save console handle

 00000016			initialLoop:
 00000016  E8 00000000 E		call Clrscr
 0000001B  E8 000003D4			call displayInitialscr
 00000020  E8 00000470			call readInputInitialscr
 00000025  80 3D 00001BC0 R		cmp Initialconfirm, 1
	   01
 0000002C  74 02			je conti
 0000002E  EB E6			jmp initialLoop

 00000030			conti:
					INVOKE GetTickCount
 00000035  A3 00000032 R		mov startTime, eax
 0000003A  66| C7 05			mov playerXY.X, 10
	   0000001F R
	   000A
 00000043  66| C7 05			mov playerXY.Y, 5
	   00000021 R
	   0005
 0000004C  66| C7 05			mov velocityY, 0
	   00000023 R
	   0000
 00000055  C6 05 00001C07 R		mov isDead, 0
	   00
 0000005C  C6 05 00000029 R		mov escConfirm, 0
	   00
 00000063  C6 05 00001BFD R		mov endConfirm, 0
	   00
 0000006A  C7 05 00001C4D R		mov coinGot, 0
	   00000000
					
 00000074			GameLoop:
 00000074  E8 00000000 E		call Clrscr
 00000079  E8 000000BB			call updatePhysics
					INVOKE drawScreen, ADDR gamescrfile
 00000088  E8 0000025B			call drawPlayer
 0000008D  E8 0000011C			call checkPlatformLevel
 00000092  E8 0000031E			call displayTime
 00000097  E8 00000641			call displayCoinGot
 0000009C  E8 0000017B			call readPlayerMoveInput
 000000A1  E8 000006DF			call getCoin
 000000A6  E8 00000563			call generateCoins
 000000AB  E8 00000719			call endGame
 000000B0  80 3D 00000029 R		cmp  escConfirm, 1
	   01
 000000B7  74 11			je endLoop
					invoke Sleep, updateInterval
 000000C8  EB AA			jmp GameLoop

 000000CA			endLoop:
 000000CA  80 3D 00001C06 R		cmp needsRefresh, 1
	   01
 000000D1  74 02			je Refresh
 000000D3  EB 18			jmp CheckInput

 000000D5			Refresh:
 000000D5  E8 00000000 E		call Clrscr
 000000DA  E8 00000422			call displayEndscr
 000000DF  E8 0000064B			call displayEndData
 000000E4  C6 05 00001C06 R		mov needsRefresh, 0
	   00
 000000EB  EB 00			jmp CheckInput

 000000ED			CheckInput:
 000000ED  E8 000004B0			call readInputEndscr
 000000F2  80 3D 00001BFD R		cmp endconfirm, 1
	   01
 000000F9  0F 84 FFFFFF31		je conti
 000000FF  A0 00001BFC R		mov al, endKeyPos
 00000104  8A 25 00001C08 R		mov ah, prevKeyPos
 0000010A  3A E0			cmp ah, al
 0000010C  74 13			je SkipRefresh
 0000010E  C6 05 00001C06 R		mov needsRefresh, 1
	   01
 00000115  8A 25 00001BFC R		mov ah, endKeyPos
 0000011B  88 25 00001C08 R		mov prevKeyPos, ah

 00000121			SkipRefresh:
					invoke Sleep, updateInterval
 00000130  EB 98			jmp endLoop

					exit
 00000139			main ENDP

 00000139			updatePhysics PROC uses eax ebx
					; 檢查是否超出螢幕上方
					.IF playerXY.Y >= 60000
 00000146  66| C7 05				mov playerXY.Y, 0
	   00000021 R
	   0000
 0000014F  66| C7 05				mov platformLevel, 0
	   00000026 R
	   0000
					.ENDIF

					; 檢查是否掉出螢幕下方
					.IF playerXY.Y >= 26
 00000162  C6 05 00001C07 R			mov isDead, 1
	   01
					.ENDIF
				    ; 更新玩家的 Y 座標
 00000169  66| A1		    mov ax, velocityY
	   00000023 R
 0000016F  66| 01 05		    add playerXY.Y, ax        ; 根據垂直速度更新位置
	   00000021 R

				    ; 應用重力（加速垂直速度）
 00000176  66| 83 05		    add velocityY, gravity    ; 重力影響：速度越來越快
	   00000023 R 01

				    ; 檢查是否低於地面
 0000017E  66| A1		    mov ax, playerXY.Y
	   00000021 R
 00000184  66| 3B 05		    cmp ax, platformLevel
	   00000026 R
 0000018B  7E 1E			jle EndPhysics            ; 如果未超過地面，跳過地面處理

				    ; 如果超出地面，重置到地面
 0000018D  66| A1		    mov ax, platformLevel
	   00000026 R
 00000193  66| A3		    mov playerXY.Y, ax        ; 將玩家重置到地面
	   00000021 R
 00000199  66| C7 05    mov velocityY, 0          ; 停止垂直運動
	   00000023 R
	   0000
 000001A2  C6 05 00000028 R	    mov onPlatform, 1           ; 標記玩家在地面上
	   01
 000001A9  EB 00		    jmp EndPhysics

 000001AB			EndPhysics:
				    ret
 000001AE			updatePhysics ENDP

				; 檢查平台高度
 000001AE			checkPlatformLevel PROC uses eax ebx ecx edx
 000001B2  66| A1			mov ax, playerXY.X
	   0000001F R
 000001B8  66| 8B 1D			mov bx, playerXY.Y
	   00000021 R
 000001BF  66| 43			inc bx
 000001C1  66| A3			mov platformCoord.X, ax
	   0000000B R
 000001C7  66| 89 1D			mov platformCoord.Y, bx
	   0000000D R

 000001CE  66| B9 001E			mov cx, 30
 000001D2			detectPlatform:
 000001D2  66| 8B D1			mov dx, cx

					INVOKE ReadConsoleOutputCharacterA,
					outputHandle,
					ADDR platformBuffer,
					1,
					platformCoord,
					ADDR charRead

 000001F2  A0 00000001 R		mov al, platformBuffer
					.IF al != 32
 000001FB  66| A1				mov ax, platformCoord.Y
	   0000000D R
 00000201  66| 48				dec ax
 00000203  66| A3				mov platformLevel, ax
	   00000026 R
 00000209  EB 0C				jmp EndCheck
					.ENDIF
 0000020B  66| FF 05			inc platformCoord.Y
	   0000000D R
 00000212  66| 8B CA			mov cx, dx
 00000215  E2 BB			loop detectPlatform

					; 輸出Debug訊息
				;showINFO:
					;mov dl, 0
					;mov dh, 0
					;call gotoxy
					;call WriteDec

 00000217			EndCheck:
					ret
 0000021C			checkPlatformLevel ENDP

 0000021C			readPlayerMoveInput PROC
				    ; 檢查W鍵（向上移動）
				    INVOKE GetAsyncKeyState, 'W'
 00000223  66| A9 8000		    test ax, 8000h
 00000227  74 1B		    jz CheckShift
 00000229  80 3D 00000028 R		cmp onPlatform, 1
	   01
 00000230  75 12			jne CheckShift
 00000232  66| B8 0004			mov ax, jumpForce
 00000236  66| 29 05			sub velocityY, ax
	   00000023 R
 0000023D  C6 05 00000028 R		mov onPlatform, 0
	   00
 00000244			CheckShift:
					; 檢查Shift鍵（加速）
 00000244  C6 05 00000025 R		mov isRunning, 0
	   00
					INVOKE GetAsyncKeyState, VK_SHIFT
 00000252  66| A9 8000			test ax, 8000h
 00000256  74 07			jz CheckA
 00000258  C6 05 00000025 R		mov isRunning, 1
	   01
 0000025F			CheckA:
				    ; 檢查A鍵（向左移動）
				    INVOKE GetAsyncKeyState, 'A'
 00000266  66| A9 8000		    test ax, 8000h
 0000026A  74 2D		    jz CheckD
				    .IF isRunning == 1
 00000275  66| 83 2D				sub playerXY.X, 2
	   0000001F R 02
					.ELSE
 0000027F  66| FF 0D				dec playerXY.X
	   0000001F R
					.ENDIF
											
					.IF playerXY.X <= 0
 00000290  66| C7 05				mov playerXY.X, 1
	   0000001F R
	   0001
					.ENDIF

 00000299			CheckD:
				    ; 檢查D鍵（向右移動）
				    INVOKE GetAsyncKeyState, 'D'
 000002A0  66| A9 8000		    test ax, 8000h
 000002A4  74 2D		    jz CheckESC
				    .IF isRunning == 1
 000002AF  66| 83 05				add playerXY.X, 2
	   0000001F R 02
					.ELSE
 000002B9  66| FF 05				inc playerXY.X
	   0000001F R
					.ENDIF
					.IF playerXY.X >= 119
 000002CA  66| C7 05				mov playerXY.X, 118
	   0000001F R
	   0076
					.ENDIF

 000002D3			CheckESC:
				    ; 檢查ESC鍵（退出遊戲）
				    INVOKE GetAsyncKeyState, VK_ESCAPE
 000002DA  66| A9 8000		    test ax, 8000h
 000002DE  74 07		    jz EndInput
 000002E0  C6 05 00000029 R	    mov escConfirm,1
	   01

 000002E7			EndInput:
 000002E7  C3				ret
 000002E8			readPlayerMoveInput ENDP

 000002E8			drawPlayer PROC
					INVOKE WriteConsoleOutputAttribute,
					outputHandle, 
					OFFSET playerAttributes,
					playerSize, 
					playerXY,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle,
					OFFSET player,
					playerSize,
					playerXY,
					OFFSET count
 00000322  C3				ret
 00000323			drawPlayer ENDP

 00000323			drawScreen PROC uses eax ebx ecx edx, screenFileName:PTR BYTE
				    ;打開文字檔案
					INVOKE CreateFile, screenFileName, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL 
 00000344  A3 00000042 R		mov fileHandle, eax

 00000349			ReadLoop:
					;使用UTF-8編碼，顯示符號
					INVOKE SetConsoleOutputCP, 65001

					;讀取檔案
					INVOKE ReadFile, fileHandle, ADDR buffer, SIZEOF buffer, ADDR bytesRead, NULL

					;畫面更新及輸出檔案
 0000036F  E8 00000000 E		call Clrscr
					INVOKE SetFilePointer, fileHandle, 0, NULL, FILE_BEGIN
					INVOKE WriteConsole, outputHandle, ADDR buffer, bytesRead, ADDR screenBytesWritten, NULL

 000003A2			EndDraw:
					;關閉檔案
				    INVOKE CloseHandle, fileHandle
				    ret
 000003B5			drawScreen ENDP

 000003B5			displayTime PROC uses eax ebx ecx edx
					INVOKE GetTickCount
 000003BE  2B 05 00000032 R		sub eax, startTime
 000003C4  99				cdq
 000003C5  BB 000003E8			mov ebx, 1000
 000003CA  F7 F3			div ebx
 000003CC  A3 00000036 R		mov elapsedTime, eax
 000003D1  A1 0000003A R		mov eax, timeLimit
 000003D6  2B 05 00000036 R		sub eax, elapsedTime
 000003DC  A3 00001C02 R		mov endTime, eax
 000003E1  B2 06			mov dl, 6
 000003E3  B6 01			mov dh, 1
 000003E5  E8 00000000 E		call gotoxy
 000003EA  E8 00000000 E		call WriteDec
					ret
 000003F4			displayTime ENDP

 000003F4			displayInitialscr PROC uses eax ebx ecx edx
				    INVOKE drawScreen, ADDR initialscrfile
 00000402  80 3D 00001BBF R		cmp initialKeyPos, 1
	   01
 00000409  74 3C			je Pos2 

 0000040B			Pos1:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialStartLeftSymbol,
					1, 
					initialStartLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialStartRightSymbol,
					1, 
					initialStartRightPos,
					OFFSET count
 00000445  EB 3A			jmp conti

 00000447			Pos2:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialExitLeftSymbol,
					1, 
					initialExitLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialExitRightSymbol,
					1, 
					initialExitRightPos,
					OFFSET count

 00000481			conti:
					INVOKE Sleep, updateInterval

 00000490			EndDisplay:
				    ret
 00000495			displayInitialscr ENDP

 00000495			readInputInitialscr PROC uses eax ebx ecx edx
					INVOKE GetAsyncKeyState, VK_RETURN
 000004A0  A9 00008000			test eax, 8000h                     
 000004A5  74 21		    jz checkW
 000004A7  80 3D 00001BBF R		cmp initialKeyPos, 0 ;判斷按鍵位置
	   00
 000004AE  74 0C			je confirm
 000004B0  E8 00000000 E		call Clrscr
					INVOKE ExitProcess, 0

 000004BC			confirm:
 000004BC  C6 05 00001BC0 R		mov initialconfirm, 1
	   01
					ret

 000004C8			checkW:
					INVOKE GetAsyncKeyState, 'W'
 000004CF  A9 00008000			test eax, 8000h                     
 000004D4  74 0C		    jz checkS
 000004D6  C6 05 00001BBF R		mov initialKeyPos, 0
	   00
					ret

 000004E2			checkS:
					INVOKE GetAsyncKeyState, 'S'
 000004E9  A9 00008000			test eax, 8000h                     
 000004EE  74 0C		    jz no_key_pressed
 000004F0  C6 05 00001BBF R		mov initialKeyPos, 1
	   01
					ret

 000004FC			no_key_pressed:
					ret
 00000501			readInputInitialscr ENDP

 00000501			displayEndscr PROC uses eax ebx ecx edx
				    INVOKE drawScreen, ADDR endscrfile
 0000050F  80 3D 00001BFC R		cmp endKeyPos, 1
	   01
 00000516  74 3C			je Pos2 

 00000518			Pos1:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endStartLeftSymbol,
					1, 
					endStartLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endStartRightSymbol,
					1, 
					endStartRightPos,
					OFFSET count
 00000552  EB 3A			jmp conti

 00000554			Pos2:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endExitLeftSymbol,
					1, 
					endExitLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endExitRightSymbol,
					1, 
					endExitRightPos,
					OFFSET count

 0000058E			conti:
					INVOKE Sleep, updateInterval

 0000059D			EndDisplay:
				    ret
 000005A2			displayEndscr ENDP

 000005A2			readInputEndscr PROC uses eax ebx ecx edx
					INVOKE GetAsyncKeyState, VK_RETURN
 000005AD  A9 00008000			test eax, 8000h                     
 000005B2  74 21		    jz checkA
 000005B4  80 3D 00001BFC R		cmp endKeyPos, 0 ;判斷按鍵位置
	   00
 000005BB  74 0C			je confirm
 000005BD  E8 00000000 E		call Clrscr
					INVOKE ExitProcess, 0

 000005C9			confirm:
 000005C9  C6 05 00001BFD R		mov endconfirm, 1
	   01
					ret

 000005D5			checkA:
					INVOKE GetAsyncKeyState, 'A'
 000005DC  A9 00008000			test eax, 8000h                     
 000005E1  74 0C		    jz checkD
 000005E3  C6 05 00001BFC R		mov endKeyPos, 0
	   00
					ret

 000005EF			checkD:
					INVOKE GetAsyncKeyState, 'D'
 000005F6  A9 00008000			test eax, 8000h                     
 000005FB  74 0C		    jz no_key_pressed
 000005FD  C6 05 00001BFC R		mov endKeyPos, 1
	   01
					ret

 00000609			no_key_pressed:
					ret
 0000060E			readInputEndscr ENDP

 0000060E			generateCoins PROC uses eax ebx ecx edx
 00000612  80 3D 00001C49 R		cmp coinGenerated, 1
	   01
 00000619  74 7C			je output
 0000061B  E8 000001D8			call generateRandomSeed
 00000620  83 3D 00001C41 R		cmp coinSeed, 0
	   00
 00000627  74 14			je Pos1
 00000629  83 3D 00001C41 R		cmp coinSeed, 1
	   01
 00000630  74 1F			je Pos2
 00000632  83 3D 00001C41 R		cmp coinSeed, 2
	   02
 00000639  74 2A			je Pos3
 0000063B  EB 3C			jmp Pos4

 0000063D			Pos1:
 0000063D  66| C7 05			mov coinCoord.x, 15
	   00001C45 R
	   000F
 00000646  66| C7 05			mov coinCoord.y, 3
	   00001C47 R
	   0003
 0000064F  EB 46			jmp output

 00000651			Pos2:
 00000651  66| C7 05			mov coinCoord.x, 90
	   00001C45 R
	   005A
 0000065A  66| C7 05			mov coinCoord.y, 4
	   00001C47 R
	   0004
 00000663  EB 32			jmp output

 00000665			Pos3:
 00000665  66| C7 05			mov coinCoord.x, 40
	   00001C45 R
	   0028
 0000066E  66| C7 05			mov coinCoord.y, 14
	   00001C47 R
	   000E
 00000677  EB 1E			jmp output

 00000679			Pos4:
 00000679  66| C7 05			mov coinCoord.x, 98
	   00001C45 R
	   0062
 00000682  66| C7 05			mov coinCoord.y, 15
	   00001C47 R
	   000F
 0000068B  C7 05 00001C41 R		mov coinSeed, 0
	   00000000
 00000695  EB 00			jmp output

 00000697			output:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle,
					OFFSET coinSymbol,
					1,
					coinCoord,
					OFFSET count

					INVOKE WriteConsoleOutputAttribute,
					outputHandle, 
					OFFSET coinAttribute,
					1, 
					coinCoord,
					OFFSET count

 000006D1  C6 05 00001C49 R		mov coinGenerated, 1
	   01
					ret
 000006DD			generateCoins ENDP

 000006DD			displayCoinGot PROC uses eax ebx ecx edx
				    invoke SetConsoleCursorPosition,outputHandle, coinGotCoord1
 000006F2  A1 00001C4D R		mov eax, coinGot
 000006F7  E8 00000000 E		call WriteDec
					invoke SetConsoleCursorPosition, outputHandle, coinGotCoord2
 0000070D  B9 00000003			mov ecx, 3
					invoke WriteFile, outputHandle, ADDR coinOutput1, ecx, addr bytesWritten, NULL
					ret
 0000072F			displayCoinGot ENDP

 0000072F			displayEndData PROC uses eax ebx ecx edx
 00000733			coin:
 00000733  B2 2B			mov dl, 43
 00000735  B6 07			mov dh, 7
 00000737  E8 00000000 E		call gotoxy
 0000073C  A1 00001C4D R		mov eax, CoinGot
 00000741  E8 00000000 E		call WriteDec

 00000746			time:
 00000746  B2 2B			mov dl, 43
 00000748  B6 04			mov dh, 4
 0000074A  E8 00000000 E		call gotoxy
 0000074F  A1 00001C02 R		mov eax, endTime
 00000754  E8 00000000 E		call WriteDec

 00000759			point:
 00000759  B2 2B			mov dl, 43
 0000075B  B6 0A			mov dh, 10
 0000075D  E8 00000000 E		call gotoxy
 00000762  A1 00001C4D R		mov eax, CoinGot
 00000767  F7 25 00001C02 R		mul endTime
					.IF isDead == 1
 00000776  B8 00000000				mov eax, 0
					.ENDIF
 0000077B  E8 00000000 E		call WriteDec

					ret
 00000785			displayEndData ENDP

 00000785			getCoin PROC uses eax ebx ecx edx
 00000789			compareX:
 00000789  66| A1			mov ax, playerXY.x
	   0000001F R
 0000078F  66| 3B 05			cmp ax, coinCoord.x
	   00001C45 R
 00000796  75 25			jne not_equal

 00000798			compareY:
 00000798  66| A1			mov ax, playerXY.y
	   00000021 R
 0000079E  66| 3B 05			cmp ax, coinCoord.y
	   00001C47 R
 000007A5  75 16			jne not_equal

 000007A7			equal:
 000007A7  C6 05 00001C63 R		mov coinGet, 1
	   01
 000007AE  FF 05 00001C4D R		inc coinGot
 000007B4  C6 05 00001C49 R		mov coinGenerated, 0
	   00
 000007BB  EB 07			jmp end_program

 000007BD			not_equal:
 000007BD  C6 05 00001C63 R		mov coinGet, 0
	   00

 000007C4			end_program:
					ret

 000007C9			getCoin ENDP

 000007C9			endGame PROC uses eax ebx ecx edx
 000007CD  A1 00001C4D R		mov eax, coinGot
 000007D2  83 F8 05			cmp eax, 5
 000007D5  74 15			je equal

 000007D7  A1 00001C02 R		mov eax, endTime
 000007DC  83 F8 00			cmp eax, 0
 000007DF  74 0B			je equal

 000007E1  A0 00001C07 R		mov al, isDead
 000007E6  3C 01			cmp al, 1
 000007E8  74 02			je equal
 000007EA  EB 07			jmp end_program

 000007EC			equal:
 000007EC  C6 05 00000029 R		mov escConfirm, 1
	   01

 000007F3			end_program:
					ret
 000007F8			endGame ENDP

 000007F8			generateRandomSeed PROC uses eax ebx ecx edx
 000007FC			generate:
					invoke GetTickCount
 00000801  A3 00001C64 R	    mov seed, eax

 00000806  A1 00001C64 R		mov eax, seed
 0000080B  69 C0 000343FD	    imul eax, 214013    
 00000811  05 00269EC3		    add eax, 2531011
 00000816  C1 E8 10		    shr eax, 16    
 00000819  25 00007FFF		    and eax, 7FFFh
 0000081E  33 D2		    xor edx, edx
 00000820  BB 00000005			mov ebx, 5
 00000825  F7 F3		    div ebx    
 00000827  89 15 00001C41 R	    mov coinSeed, edx

 0000082D  3B 15 00001C68 R		cmp edx, preSeed
 00000833  74 C7			je generate
 00000835  89 15 00001C68 R		mov preSeed,edx
					
					ret
 00000840			generateRandomSeed ENDP

				END main
Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/20/24 15:42:15
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00001C6C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000840 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetAsyncKeyState . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleOutputCharacterA  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleOutputCharacter . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleOutputCP . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkPlatformLevel . . . . . . .	P Near	 000001AE _TEXT	Length= 0000006E Public STDCALL
  detectPlatform . . . . . . . .	L Near	 000001D2 _TEXT	
  EndCheck . . . . . . . . . . .	L Near	 00000217 _TEXT	
displayCoinGot . . . . . . . . .	P Near	 000006DD _TEXT	Length= 00000052 Public STDCALL
displayEndData . . . . . . . . .	P Near	 0000072F _TEXT	Length= 00000056 Public STDCALL
  coin . . . . . . . . . . . . .	L Near	 00000733 _TEXT	
  time . . . . . . . . . . . . .	L Near	 00000746 _TEXT	
  point  . . . . . . . . . . . .	L Near	 00000759 _TEXT	
displayEndscr  . . . . . . . . .	P Near	 00000501 _TEXT	Length= 000000A1 Public STDCALL
  Pos1 . . . . . . . . . . . . .	L Near	 00000518 _TEXT	
  Pos2 . . . . . . . . . . . . .	L Near	 00000554 _TEXT	
  conti  . . . . . . . . . . . .	L Near	 0000058E _TEXT	
  EndDisplay . . . . . . . . . .	L Near	 0000059D _TEXT	
displayInitialscr  . . . . . . .	P Near	 000003F4 _TEXT	Length= 000000A1 Public STDCALL
  Pos1 . . . . . . . . . . . . .	L Near	 0000040B _TEXT	
  Pos2 . . . . . . . . . . . . .	L Near	 00000447 _TEXT	
  conti  . . . . . . . . . . . .	L Near	 00000481 _TEXT	
  EndDisplay . . . . . . . . . .	L Near	 00000490 _TEXT	
displayTime  . . . . . . . . . .	P Near	 000003B5 _TEXT	Length= 0000003F Public STDCALL
drawPlayer . . . . . . . . . . .	P Near	 000002E8 _TEXT	Length= 0000003B Public STDCALL
drawScreen . . . . . . . . . . .	P Near	 00000323 _TEXT	Length= 00000092 Public STDCALL
  screenFileName . . . . . . . .	DWord	 bp + 00000008
  ReadLoop . . . . . . . . . . .	L Near	 00000349 _TEXT	
  EndDraw  . . . . . . . . . . .	L Near	 000003A2 _TEXT	
endGame  . . . . . . . . . . . .	P Near	 000007C9 _TEXT	Length= 0000002F Public STDCALL
  equal  . . . . . . . . . . . .	L Near	 000007EC _TEXT	
  end_program  . . . . . . . . .	L Near	 000007F3 _TEXT	
generateCoins  . . . . . . . . .	P Near	 0000060E _TEXT	Length= 000000CF Public STDCALL
  Pos1 . . . . . . . . . . . . .	L Near	 0000063D _TEXT	
  Pos2 . . . . . . . . . . . . .	L Near	 00000651 _TEXT	
  Pos3 . . . . . . . . . . . . .	L Near	 00000665 _TEXT	
  Pos4 . . . . . . . . . . . . .	L Near	 00000679 _TEXT	
  output . . . . . . . . . . . .	L Near	 00000697 _TEXT	
generateRandomSeed . . . . . . .	P Near	 000007F8 _TEXT	Length= 00000048 Public STDCALL
  generate . . . . . . . . . . .	L Near	 000007FC _TEXT	
getCoin  . . . . . . . . . . . .	P Near	 00000785 _TEXT	Length= 00000044 Public STDCALL
  compareX . . . . . . . . . . .	L Near	 00000789 _TEXT	
  compareY . . . . . . . . . . .	L Near	 00000798 _TEXT	
  equal  . . . . . . . . . . . .	L Near	 000007A7 _TEXT	
  not_equal  . . . . . . . . . .	L Near	 000007BD _TEXT	
  end_program  . . . . . . . . .	L Near	 000007C4 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000139 Public STDCALL
  initialLoop  . . . . . . . . .	L Near	 00000016 _TEXT	
  conti  . . . . . . . . . . . .	L Near	 00000030 _TEXT	
  GameLoop . . . . . . . . . . .	L Near	 00000074 _TEXT	
  endLoop  . . . . . . . . . . .	L Near	 000000CA _TEXT	
  Refresh  . . . . . . . . . . .	L Near	 000000D5 _TEXT	
  CheckInput . . . . . . . . . .	L Near	 000000ED _TEXT	
  SkipRefresh  . . . . . . . . .	L Near	 00000121 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readInputEndscr  . . . . . . . .	P Near	 000005A2 _TEXT	Length= 0000006C Public STDCALL
  confirm  . . . . . . . . . . .	L Near	 000005C9 _TEXT	
  checkA . . . . . . . . . . . .	L Near	 000005D5 _TEXT	
  checkD . . . . . . . . . . . .	L Near	 000005EF _TEXT	
  no_key_pressed . . . . . . . .	L Near	 00000609 _TEXT	
readInputInitialscr  . . . . . .	P Near	 00000495 _TEXT	Length= 0000006C Public STDCALL
  confirm  . . . . . . . . . . .	L Near	 000004BC _TEXT	
  checkW . . . . . . . . . . . .	L Near	 000004C8 _TEXT	
  checkS . . . . . . . . . . . .	L Near	 000004E2 _TEXT	
  no_key_pressed . . . . . . . .	L Near	 000004FC _TEXT	
readPlayerMoveInput  . . . . . .	P Near	 0000021C _TEXT	Length= 000000CC Public STDCALL
  CheckShift . . . . . . . . . .	L Near	 00000244 _TEXT	
  CheckA . . . . . . . . . . . .	L Near	 0000025F _TEXT	
  CheckD . . . . . . . . . . . .	L Near	 00000299 _TEXT	
  CheckESC . . . . . . . . . . .	L Near	 000002D3 _TEXT	
  EndInput . . . . . . . . . . .	L Near	 000002E7 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
updatePhysics  . . . . . . . . .	P Near	 00000139 _TEXT	Length= 00000075 Public STDCALL
  EndPhysics . . . . . . . . . .	L Near	 000001AB _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TimerXY  . . . . . . . . . . . .	COORD	 0000003E _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 0000005D _DATA	
bytesRead  . . . . . . . . . . .	DWord	 00000046 _DATA	
bytesWritten . . . . . . . . . .	DWord	 00000017 _DATA	
cellsWritten . . . . . . . . . .	DWord	 0000002A _DATA	
charRead . . . . . . . . . . . .	DWord	 0000000F _DATA	
coinAttribute  . . . . . . . . .	Word	 00001C4B _DATA	
coinCoord  . . . . . . . . . . .	COORD	 00001C45 _DATA	
coinGenerated  . . . . . . . . .	Byte	 00001C49 _DATA	
coinGet  . . . . . . . . . . . .	Byte	 00001C63 _DATA	
coinGotCoord1  . . . . . . . . .	COORD	 00001C5B _DATA	
coinGotCoord2  . . . . . . . . .	COORD	 00001C5F _DATA	
coinGot  . . . . . . . . . . . .	DWord	 00001C4D _DATA	
coinOutput1  . . . . . . . . . .	Byte	 00001C51 _DATA	
coinOutput2  . . . . . . . . . .	Byte	 00001C54 _DATA	
coinOutput3  . . . . . . . . . .	Byte	 00001C57 _DATA	
coinSeed . . . . . . . . . . . .	DWord	 00001C41 _DATA	
coinSymbol . . . . . . . . . . .	Byte	 00001C4A _DATA	
count  . . . . . . . . . . . . .	DWord	 0000001B _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
elapsedTime  . . . . . . . . . .	DWord	 00000036 _DATA	
endCoinGotCoord  . . . . . . . .	COORD	 00001C39 _DATA	
endCoinGot . . . . . . . . . . .	DWord	 00001BFE _DATA	
endExitLeftPos . . . . . . . . .	COORD	 00001C21 _DATA	
endExitLeftSymbol  . . . . . . .	DWord	 00001C25 _DATA	
endExitRightPos  . . . . . . . .	COORD	 00001C2D _DATA	
endExitRightSymbol . . . . . . .	DWord	 00001C31 _DATA	
endKeyPos  . . . . . . . . . . .	Byte	 00001BFC _DATA	
endStartLeftPos  . . . . . . . .	COORD	 00001C09 _DATA	
endStartLeftSymbol . . . . . . .	DWord	 00001C0D _DATA	
endStartRightPos . . . . . . . .	COORD	 00001C15 _DATA	
endStartRightSymbol  . . . . . .	DWord	 00001C19 _DATA	
endTimeCoord . . . . . . . . . .	COORD	 00001C3D _DATA	
endTime  . . . . . . . . . . . .	DWord	 00001C02 _DATA	
endconfirm . . . . . . . . . . .	Byte	 00001BFD _DATA	
endscrfile . . . . . . . . . . .	Byte	 00001BF1 _DATA	
escConfirm . . . . . . . . . . .	Byte	 00000029 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00000042 _DATA	
gamescrfile  . . . . . . . . . .	Byte	 0000004E _DATA	
gravity  . . . . . . . . . . . .	Number	 00000001h   
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
initialExitLeftPos . . . . . . .	COORD	 00001BD9 _DATA	
initialExitLeftSymbol  . . . . .	DWord	 00001BDD _DATA	
initialExitRightPos  . . . . . .	COORD	 00001BE5 _DATA	
initialExitRightSymbol . . . . .	DWord	 00001BE9 _DATA	
initialKeyPos  . . . . . . . . .	Byte	 00001BBF _DATA	
initialStartLeftPos  . . . . . .	COORD	 00001BC1 _DATA	
initialStartLeftSymbol . . . . .	DWord	 00001BC5 _DATA	
initialStartRightPos . . . . . .	COORD	 00001BCD _DATA	
initialStartRightSymbol  . . . .	DWord	 00001BD1 _DATA	
initialconfirm . . . . . . . . .	Byte	 00001BC0 _DATA	
initialscrfile . . . . . . . . .	Byte	 00001BB5 _DATA	
isDead . . . . . . . . . . . . .	Byte	 00001C07 _DATA	
isRunning  . . . . . . . . . . .	Byte	 00000025 _DATA	
jumpForce  . . . . . . . . . . .	Number	 00000004h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
needsRefresh . . . . . . . . . .	Byte	 00001C06 _DATA	
onPlatform . . . . . . . . . . .	Byte	 00000028 _DATA	
outputHandle . . . . . . . . . .	DWord	 00000013 _DATA	
platformBuffer . . . . . . . . .	Byte	 00000001 _DATA	
platformCoord  . . . . . . . . .	COORD	 0000000B _DATA	
platformLevel  . . . . . . . . .	Word	 00000026 _DATA	
playerAttributes . . . . . . . .	Word	 0000002E _DATA	
playerSize . . . . . . . . . . .	Number	 00000001h   
playerXY . . . . . . . . . . . .	COORD	 0000001F _DATA	
player . . . . . . . . . . . . .	Byte	 00000000 _DATA	
preSeed  . . . . . . . . . . . .	DWord	 00001C68 _DATA	
prevKeyPos . . . . . . . . . . .	Byte	 00001C08 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
screenBytesWritten . . . . . . .	DWord	 0000004A _DATA	
seed . . . . . . . . . . . . . .	DWord	 00001C64 _DATA	
startTime  . . . . . . . . . . .	DWord	 00000032 _DATA	
timeLimit  . . . . . . . . . . .	DWord	 0000003A _DATA	
updateInterval . . . . . . . . .	Word	 00000030 _DATA	
velocityY  . . . . . . . . . . .	Word	 00000023 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
