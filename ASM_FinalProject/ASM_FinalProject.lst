Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/25/24 21:58:33
main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDELIB kernel32.lib

				; 定義常數
 = 00000001			playerSize = 1
 = 00000001			gravity = 1
 = 00000004			jumpForce = 4

 00000000			.data
				; 玩家資料
 00000000 50			player BYTE 'P'
 00000001  00000001 [		playerAttributes WORD playerSize DUP(0bh)
	    000B
	   ]
 00000003 000A 0005		playerXY COORD <10,5>
 00000007 0000			velocityY SWORD 0
 00000009 00			isRunning BYTE 0

				; 用於讀取畫面上的字符
 0000000A  0000000A [		platformBuffer BYTE 10 DUP(?)
	    00
	   ]
 00000014 0000 0000		platformCoord COORD <0,0>
 00000018 00000000		charRead DWORD ?

				; 用於繪製玩家和金幣的字符
 0000001C 00000000		outputHandle DWORD 0
 00000020 00000000		bytesWritten DWORD 0
 00000024 00000000		count DWORD 0

				; 用於平台相關的判斷
 00000028 0018			platformLevel WORD 24
 0000002A 01			onPlatform BYTE 1

				; 用於判斷是否進入結算畫面
 0000002B 00			escConfirm byte 0

				; 每次更新GameLoop的時間間隔
 0000002C 0032			updateInterval WORD 50 

				; 用於計算和顯示時間
 0000002E 00000000		startTime DWORD ?
 00000032 00000000		elapsedTime DWORD ?
 00000036 00000258		timeLimit DWORD 600 ; 600 seconds
 0000003A 0000 0000		TimerXY COORD <0,0>

				; 關卡相關資料
 0000003E 00000001		currentLevel DWORD 1
 00000042 00			isCheatKeyPressed BYTE 0

				;畫面繪製
 00000043 00000000		fileHandle HANDLE ?
 00000047 00000000		bytesRead DWORD ?
 0000004B 00000000		screenBytesWritten DWORD ?

				;遊戲畫面資料
 0000004F 67 61 6D 65 66	gameScreenFile BYTE 'gamefield1.txt',0
	   69 65 6C 64 31
	   2E 74 78 74 00

				;初始畫面資料
 0000005E  00001B58 [		buffer BYTE 7000 DUP(?)
	    00
	   ]
 00001BB6 73 74 61 72 74	beginScreenFile BYTE 'start.txt',0
	   2E 74 78 74 00
 00001BC0 00			beginKeyPos Byte 0
 00001BC1 00			beginConfirm Byte 0

				;初始畫面開始按鍵箭頭資料
 00001BC2 0031 0011		beginStartLeftPos COORD <49,17>
 00001BC6 0000003E		beginStartLeftSymbol DWORD '>',0
	   00000000
 00001BCE 0049 0011		beginStartRightPos COORD <73,17>
 00001BD2 0000003C		beginStartRightSymbol DWORD '<',0
	   00000000

				;初始畫面離開按鍵箭頭資料
 00001BDA 0031 0017		beginExitLeftPos COORD <49,23>
 00001BDE 0000003E		beginExitLeftSymbol DWORD '>',0
	   00000000
 00001BE6 0049 0017		beginExitRightPos COORD <73,23>
 00001BEA 0000003C		beginExitRightSymbol DWORD '<',0
	   00000000

 00001BF2 00			againConfirm BYTE 0

				;結算畫面資料
 00001BF3 66 69 6E 69 73	endScreenFile BYTE 'finish.txt',0
	   68 2E 74 78 74
	   00
 00001BFE 00			endKeyPos Byte 0
 00001BFF 00000000		endCoinGot DWORD 0
 00001C03 00000000		endTime DWORD 0
 00001C07 01			needsRefresh BYTE 1
 00001C08 00			isDead BYTE 0
 00001C09 00			prevKeyPos BYTE 0

 00001C0A 001E 0014		endStartLeftPos COORD <30,20>
 00001C0E 0000003E		endStartLeftSymbol DWORD '>',0
	   00000000
 00001C16 0037 0014		endStartRightPos COORD <55,20>
 00001C1A 0000003C		endStartRightSymbol DWORD '<',0
	   00000000

 00001C22 0044 0014		endExitLeftPos COORD <68,20>
 00001C26 0000003E		endExitLeftSymbol DWORD '>',0
	   00000000
 00001C2E 005D 0014		endExitRightPos COORD <93,20>
 00001C32 0000003C		endExitRightSymbol DWORD '<',0
	   00000000
 00001C3A 002B 0007		endCoinGotCoord COORD <43,7>
 00001C3E 002B 0004		endTimeCoord COORD <43,4>

				;金幣生成資料
 00001C42 00000001		coinSeed DWORD 1
 00001C46 0000 0000		coinCoord COORD <0,0>
 00001C4A 00			coinGenerated byte 0
 00001C4B 24			coinSymbol byte '$'
 00001C4C 000E			coinAttribute WORD 0Eh
 00001C4E 00000000		coinGot DWORD 0
 00001C52 0007 0002		coinGotCoord COORD <7,2>
 00001C56 00			coinGet byte 0
 00001C57 00000000		seed DWORD ?
 00001C5B 00000000		preSeed DWORD 0

 00000000			.code
					SetConsoleOutputCP PROTO STDCALL :DWORD
					GetAsyncKeyState PROTO STDCALL :DWORD
					ReadConsoleOutputCharacterA PROTO STDCALL :DWORD, :PTR BYTE, :DWORD, :COORD, :PTR DWORD
					drawScreen PROTO screenFileName :PTR BYTE

				; 主程式
 00000000			main PROC
					; Get the console ouput handle
					INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000007  A3 0000001C R		mov outputHandle, eax	; save console handle

				; 開始介面
 0000000C			beginLoop:
 0000000C  E8 00000000 E		call Clrscr
 00000011  E8 00000480			call displayBeginScreen
 00000016  E8 0000051C			call readInputBeginScreen
 0000001B  80 3D 00001BC1 R		cmp beginConfirm, 1
	   01
 00000022  74 02			je initialize
 00000024  EB E6			jmp beginLoop

				; 初始化遊戲
 00000026			initialize:
					INVOKE GetTickCount
 0000002B  A3 0000002E R		mov startTime, eax
 00000030  66| C7 05			mov playerXY.X, 10
	   00000003 R
	   000A
 00000039  66| C7 05			mov playerXY.Y, 5
	   00000005 R
	   0005
 00000042  66| C7 05			mov velocityY, 0
	   00000007 R
	   0000
 0000004B  C7 05 0000003E R		mov currentLevel, 1
	   00000001
 00000055  C6 05 00000058 R		mov gameScreenFile[9], '1'
	   31
 0000005C  C6 05 00001C08 R		mov isDead, 0
	   00
 00000063  C6 05 0000002B R		mov escConfirm, 0
	   00
 0000006A  C6 05 00001BF2 R		mov againConfirm, 0
	   00
 00000071  C7 05 00001C4E R		mov coinGot, 0
	   00000000
 0000007B  C6 05 00001C4A R		mov coinGenerated, 0
	   00
					
				; 遊戲迴圈
 00000082			GameLoop:
 00000082  E8 00000000 E		call Clrscr
 00000087  E8 000000C3			call updatePhysics					;重力系統
					INVOKE drawScreen, ADDR gameScreenFile	
 00000096  E8 00000263			call drawPlayer						
 0000009B  E8 00000124			call checkPlatformLevel				;確認目前平台的Y座標
 000000A0  E8 000003B2			call displayTime	
 000000A5  E8 000007F6			call displayCoinGot					;顯示已獲得金幣
 000000AA  E8 00000183			call readPlayerMoveInput			
 000000AF  E8 0000091B			call getCoin						;判斷是否取得金幣
 000000B4  E8 000005F7			call generateCoins					
 000000B9  E8 00000806			call cheatInput						;按C鍵進入下一關
 000000BE  E8 00000308			call updateLevel					;確認以及進入下一關
 000000C3  E8 0000094B			call endGame						;判斷是否觸發結束遊戲
 000000C8  80 3D 0000002B R		cmp  escConfirm, 1					
	   01
 000000CF  74 1C			je Refresh							
					invoke Sleep, updateInterval
 000000E0  EB A0			jmp GameLoop

				; 結算畫面
 000000E2			endLoop:
 000000E2  80 3D 00001C07 R		cmp needsRefresh, 1					;判斷是否刷新畫面，避免生成的數字持續閃爍
	   01
 000000E9  74 02			je Refresh
 000000EB  EB 16			jmp CheckInput

				; 更新結算畫面
 000000ED			Refresh:
 000000ED  E8 00000000 E		call Clrscr
 000000F2  E8 000004AC			call displayEndScreen
 000000F7  E8 0000082C			call displayEndData
 000000FC  C6 05 00001C07 R		mov needsRefresh, 0
	   00

 00000103			CheckInput:
 00000103  E8 0000053C			call readInputEndScreen
 00000108  80 3D 00001BF2 R		cmp againConfirm, 1					;確認重新遊戲
	   01
 0000010F  0F 84 FFFFFF11		je initialize
 00000115  A0 00001BFE R		mov al, endKeyPos					
 0000011A  8A 25 00001C09 R		mov ah, prevKeyPos
 00000120  3A E0			cmp ah, al							;判斷按鍵位置，用於確認是否需要刷新畫面
 00000122  74 13			je SkipRefresh					
 00000124  C6 05 00001C07 R		mov needsRefresh, 1
	   01
 0000012B  8A 25 00001BFE R		mov ah, endKeyPos
 00000131  88 25 00001C09 R		mov prevKeyPos, ah

 00000137			SkipRefresh:
					invoke Sleep, updateInterval
 00000146  EB 9A			jmp endLoop

					exit
 0000014F			main ENDP

				; 更新重力和玩家位置
 0000014F			updatePhysics PROC uses eax ebx
					; 檢查是否超出螢幕上方
					.IF playerXY.Y >= 60000
 0000015C  66| C7 05				mov playerXY.Y, 0
	   00000005 R
	   0000
 00000165  66| C7 05				mov platformLevel, 0
	   00000028 R
	   0000
					.ENDIF

					; 檢查是否掉出螢幕下方
					.IF playerXY.Y >= 26
 00000178  C6 05 00001C08 R			mov isDead, 1
	   01
					.ENDIF
				    ; 更新玩家的 Y 座標
 0000017F  66| A1		    mov ax, velocityY
	   00000007 R
 00000185  66| 01 05		    add playerXY.Y, ax        ; 根據垂直速度更新位置
	   00000005 R

				    ; 應用重力（加速垂直速度）
 0000018C  66| 83 05		    add velocityY, gravity    ; 重力影響：速度越來越快
	   00000007 R 01

				    ; 檢查是否低於地面
 00000194  66| A1		    mov ax, playerXY.Y
	   00000005 R
 0000019A  66| 3B 05		    cmp ax, platformLevel
	   00000028 R
 000001A1  7E 1E			jle EndPhysics            ; 如果未超過地面，跳過地面處理

				    ; 如果超出地面，重置到地面
 000001A3  66| A1		    mov ax, platformLevel
	   00000028 R
 000001A9  66| A3		    mov playerXY.Y, ax        ; 將玩家重置到地面
	   00000005 R
 000001AF  66| C7 05		    mov velocityY, 0          ; 停止垂直運動
	   00000007 R
	   0000
 000001B8  C6 05 0000002A R	    mov onPlatform, 1           ; 標記玩家在地面上
	   01
 000001BF  EB 00		    jmp EndPhysics

 000001C1			EndPhysics:
				    ret
 000001C4			updatePhysics ENDP

				; 檢查平台高度
 000001C4			checkPlatformLevel PROC uses eax ebx ecx edx
 000001C8  66| A1			mov ax, playerXY.X
	   00000003 R
 000001CE  66| 8B 1D			mov bx, playerXY.Y
	   00000005 R
 000001D5  66| 43			inc bx
 000001D7  66| A3			mov platformCoord.X, ax
	   00000014 R
 000001DD  66| 89 1D			mov platformCoord.Y, bx
	   00000016 R

 000001E4  66| B9 001E			mov cx, 30

				; 從玩家位置向下尋找平台
 000001E8			detectPlatform:
 000001E8  66| 8B D1			mov dx, cx

					; 讀取螢幕上的字符
					INVOKE ReadConsoleOutputCharacterA,
					outputHandle,
					ADDR platformBuffer,
					1,
					platformCoord,
					ADDR charRead

					; 檢查是否為平台(空白之外的字符)
 00000208  A0 0000000A R		mov al, platformBuffer
					.IF al != 32 ; 如果不是空白
 00000211  66| A1				mov ax, platformCoord.Y
	   00000016 R
 00000217  66| 48				dec ax
 00000219  66| A3				mov platformLevel, ax
	   00000028 R
 0000021F  EB 0C				jmp EndCheck
					.ENDIF
 00000221  66| FF 05			inc platformCoord.Y
	   00000016 R
 00000228  66| 8B CA			mov cx, dx
 0000022B  E2 BB			loop detectPlatform

 0000022D			EndCheck:
					ret
 00000232			checkPlatformLevel ENDP

				; 讀取玩家移動輸入
 00000232			readPlayerMoveInput PROC
				    ; 檢查W鍵（向上移動）
				    INVOKE GetAsyncKeyState, 'W'
 00000239  66| A9 8000		    test ax, 8000h
 0000023D  74 1B		    jz CheckShift
 0000023F  80 3D 0000002A R		cmp onPlatform, 1
	   01
 00000246  75 12			jne CheckShift
 00000248  66| B8 0004			mov ax, jumpForce
 0000024C  66| 29 05			sub velocityY, ax
	   00000007 R
 00000253  C6 05 0000002A R		mov onPlatform, 0
	   00
 0000025A			CheckShift:
					; 檢查Shift鍵（加速）
 0000025A  C6 05 00000009 R		mov isRunning, 0
	   00
					INVOKE GetAsyncKeyState, VK_SHIFT
 00000268  66| A9 8000			test ax, 8000h
 0000026C  74 07			jz CheckA
 0000026E  C6 05 00000009 R		mov isRunning, 1
	   01
 00000275			CheckA:
				    ; 檢查A鍵（向左移動）
				    INVOKE GetAsyncKeyState, 'A'
 0000027C  66| A9 8000		    test ax, 8000h
 00000280  74 2D		    jz CheckD
				    .IF isRunning == 1
 0000028B  66| 83 2D				sub playerXY.X, 2
	   00000003 R 02
					.ELSE
 00000295  66| FF 0D				dec playerXY.X
	   00000003 R
					.ENDIF
					
					; 檢查是否超出邊界左側
					.IF playerXY.X <= 0
 000002A6  66| C7 05				mov playerXY.X, 1
	   00000003 R
	   0001
					.ENDIF

 000002AF			CheckD:
				    ; 檢查D鍵（向右移動）
				    INVOKE GetAsyncKeyState, 'D'
 000002B6  66| A9 8000		    test ax, 8000h
 000002BA  74 2D		    jz CheckESC
				    .IF isRunning == 1
 000002C5  66| 83 05				add playerXY.X, 2
	   00000003 R 02
					.ELSE
 000002CF  66| FF 05				inc playerXY.X
	   00000003 R
					.ENDIF

					; 檢查是否超出邊界右側
					.IF playerXY.X >= 119
 000002E0  66| C7 05				mov playerXY.X, 118
	   00000003 R
	   0076
					.ENDIF

 000002E9			CheckESC:
				    ; 檢查ESC鍵（退出遊戲）
				    INVOKE GetAsyncKeyState, VK_ESCAPE
 000002F0  66| A9 8000		    test ax, 8000h
 000002F4  74 07		    jz EndInput
 000002F6  C6 05 0000002B R	    mov escConfirm,1
	   01

 000002FD			EndInput:
 000002FD  C3				ret
 000002FE			readPlayerMoveInput ENDP

				; 繪製玩家
 000002FE			drawPlayer PROC
					INVOKE WriteConsoleOutputAttribute,
					outputHandle, 
					OFFSET playerAttributes,
					playerSize, 
					playerXY,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle,
					OFFSET player,
					playerSize,
					playerXY,
					OFFSET count
 00000338  C3				ret
 00000339			drawPlayer ENDP

				; 繪製畫面
 00000339			drawScreen PROC uses eax ebx ecx edx, screenFileName:PTR BYTE
				    ;打開文字檔案
					INVOKE CreateFile, screenFileName, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL 
 0000035A  A3 00000043 R		mov fileHandle, eax

 0000035F			ReadLoop:
					;使用UTF-8編碼，顯示符號
					INVOKE SetConsoleOutputCP, 65001

					;讀取檔案
					INVOKE ReadFile, fileHandle, ADDR buffer, SIZEOF buffer, ADDR bytesRead, NULL

					;畫面更新及輸出檔案
 00000385  E8 00000000 E		call Clrscr
					INVOKE SetFilePointer, fileHandle, 0, NULL, FILE_BEGIN
					INVOKE WriteConsole, outputHandle, ADDR buffer, bytesRead, ADDR screenBytesWritten, NULL

 000003B8			EndDraw:
					;關閉檔案
				    INVOKE CloseHandle, fileHandle
				    ret
 000003CB			drawScreen ENDP

				; 更新關卡
 000003CB			updateLevel PROC
					.IF coinGot == 5 && currentLevel == 1
 000003DD  C7 05 0000003E R			mov currentLevel, 2
	   00000002
 000003E7  C6 05 00000058 R			mov gameScreenFile[9], '2'
	   32
 000003EE  66| C7 05				mov playerXY.X, 10
	   00000003 R
	   000A
 000003F7  66| C7 05				mov playerXY.Y, 5
	   00000005 R
	   0005
 00000400  66| C7 05				mov velocityY, 0
	   00000007 R
	   0000
 00000409  C6 05 00001C4A R			mov coinGenerated,0
	   00
					.ELSEIF coinGot == 8 && currentLevel == 2
 00000424  C7 05 0000003E R			mov currentLevel, 3
	   00000003
 0000042E  C6 05 00000058 R			mov gameScreenFile[9], '3'
	   33
 00000435  66| C7 05				mov playerXY.X, 10
	   00000003 R
	   000A
 0000043E  66| C7 05				mov playerXY.Y, 5
	   00000005 R
	   0005
 00000447  66| C7 05				mov velocityY, 0
	   00000007 R
	   0000
 00000450  C6 05 00001C4A R			mov coinGenerated,0
	   00
					.ENDIF

 00000457			updateLevel ENDP

				; 顯示剩餘時間
 00000457			displayTime PROC uses eax ebx ecx edx
					INVOKE GetTickCount
 00000460  2B 05 0000002E R		sub eax, startTime
 00000466  99				cdq
 00000467  BB 000003E8			mov ebx, 1000
 0000046C  F7 F3			div ebx
 0000046E  A3 00000032 R		mov elapsedTime, eax
 00000473  A1 00000036 R		mov eax, timeLimit
 00000478  2B 05 00000032 R		sub eax, elapsedTime
 0000047E  A3 00001C03 R		mov endTime, eax
 00000483  B2 06			mov dl, 6
 00000485  B6 01			mov dh, 1
 00000487  E8 00000000 E		call gotoxy
 0000048C  E8 00000000 E		call WriteDec
					ret
 00000496			displayTime ENDP

				; 顯示初始畫面
 00000496			displayBeginScreen PROC uses eax ebx ecx edx
				    INVOKE drawScreen, ADDR beginScreenFile
 000004A4  80 3D 00001BC0 R		cmp beginKeyPos, 1
	   01
 000004AB  74 3C			je Pos2 

 000004AD			Pos1:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET beginStartLeftSymbol,
					1, 
					beginStartLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET beginStartRightSymbol,
					1, 
					beginStartRightPos,
					OFFSET count
 000004E7  EB 3A			jmp conti

 000004E9			Pos2:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET beginExitLeftSymbol,
					1, 
					beginExitLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET beginExitRightSymbol,
					1, 
					beginExitRightPos,
					OFFSET count

 00000523			conti:
					INVOKE Sleep, updateInterval

 00000532			EndDisplay:
				    ret
 00000537			displayBeginScreen ENDP

				; 讀取初始畫面輸入
 00000537			readInputBeginScreen PROC uses eax ebx ecx edx
					INVOKE GetAsyncKeyState, VK_RETURN
 00000542  A9 00008000			test eax, 8000h                     
 00000547  74 21		    jz checkW
 00000549  80 3D 00001BC0 R		cmp beginKeyPos, 0 ;判斷按鍵位置
	   00
 00000550  74 0C			je confirm
 00000552  E8 00000000 E		call Clrscr
					INVOKE ExitProcess, 0

 0000055E			confirm:
 0000055E  C6 05 00001BC1 R		mov beginConfirm, 1
	   01
					ret

 0000056A			checkW:
					INVOKE GetAsyncKeyState, 'W'
 00000571  A9 00008000			test eax, 8000h                     
 00000576  74 0C		    jz checkS
 00000578  C6 05 00001BC0 R		mov beginKeyPos, 0
	   00
					ret

 00000584			checkS:
					INVOKE GetAsyncKeyState, 'S'
 0000058B  A9 00008000			test eax, 8000h                     
 00000590  74 0C		    jz no_key_pressed
 00000592  C6 05 00001BC0 R		mov beginKeyPos, 1
	   01
					ret

 0000059E			no_key_pressed:
					ret
 000005A3			readInputBeginScreen ENDP

				; 顯示結算畫面
 000005A3			displayEndScreen PROC uses eax ebx ecx edx
				    INVOKE drawScreen, ADDR endScreenFile
 000005B1  80 3D 00001BFE R		cmp endKeyPos, 1
	   01
 000005B8  74 3C			je Pos2 

 000005BA			Pos1:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endStartLeftSymbol,
					1, 
					endStartLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endStartRightSymbol,
					1, 
					endStartRightPos,
					OFFSET count
 000005F4  EB 3A			jmp conti

 000005F6			Pos2:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endExitLeftSymbol,
					1, 
					endExitLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endExitRightSymbol,
					1, 
					endExitRightPos,
					OFFSET count

 00000630			conti:
					INVOKE Sleep, updateInterval

 0000063F			EndDisplay:
				    ret
 00000644			displayEndScreen ENDP

				; 讀取結算畫面輸入
 00000644			readInputEndScreen PROC uses eax ebx ecx edx
					INVOKE GetAsyncKeyState, VK_RETURN
 0000064F  A9 00008000			test eax, 8000h                     
 00000654  74 21		    jz checkA
 00000656  80 3D 00001BFE R		cmp endKeyPos, 0 ;判斷按鍵位置
	   00
 0000065D  74 0C			je confirm
 0000065F  E8 00000000 E		call Clrscr
					INVOKE ExitProcess, 0

 0000066B			confirm:
 0000066B  C6 05 00001BF2 R		mov againConfirm, 1
	   01
					ret

 00000677			checkA:
					INVOKE GetAsyncKeyState, 'A'
 0000067E  A9 00008000			test eax, 8000h                     
 00000683  74 0C		    jz checkD
 00000685  C6 05 00001BFE R		mov endKeyPos, 0
	   00
					ret

 00000691			checkD:
					INVOKE GetAsyncKeyState, 'D'
 00000698  A9 00008000			test eax, 8000h                     
 0000069D  74 0C		    jz no_key_pressed
 0000069F  C6 05 00001BFE R		mov endKeyPos, 1
	   01
					ret

 000006AB			no_key_pressed:
					ret
 000006B0			readInputEndScreen ENDP

				; 生成金幣
 000006B0			generateCoins PROC uses eax ebx ecx edx
 000006B4  80 3D 00001C4A R		cmp coinGenerated, 1
	   01
 000006BB  0F 84 00000199		je output
 000006C1  83 3D 0000003E R		cmp currentLevel, 2
	   02
 000006C8  0F 84 00000095		je Level2
 000006CE  83 3D 0000003E R		cmp currentLevel, 3
	   03
 000006D5  0F 84 0000010D		je Level3

				;第一關
 000006DB			Level1:
 000006DB  E8 00000362			call generateRandomSeed
 000006E0  83 3D 00001C42 R		cmp coinSeed, 0
	   00
 000006E7  74 14			je Pos1_1
 000006E9  83 3D 00001C42 R		cmp coinSeed, 1
	   01
 000006F0  74 22			je Pos1_2
 000006F2  83 3D 00001C42 R		cmp coinSeed, 2
	   02
 000006F9  74 30			je Pos1_3
 000006FB  EB 45			jmp Pos1_4

 000006FD			Pos1_1:
 000006FD  66| C7 05			mov coinCoord.x, 15
	   00001C46 R
	   000F
 00000706  66| C7 05			mov coinCoord.y, 3
	   00001C48 R
	   0003
 0000070F  E9 00000146			jmp output

 00000714			Pos1_2:
 00000714  66| C7 05			mov coinCoord.x, 90
	   00001C46 R
	   005A
 0000071D  66| C7 05			mov coinCoord.y, 4
	   00001C48 R
	   0004
 00000726  E9 0000012F			jmp output

 0000072B			Pos1_3:
 0000072B  66| C7 05			mov coinCoord.x, 40
	   00001C46 R
	   0028
 00000734  66| C7 05			mov coinCoord.y, 14
	   00001C48 R
	   000E
 0000073D  E9 00000118			jmp output

 00000742			Pos1_4:
 00000742  66| C7 05			mov coinCoord.x, 98
	   00001C46 R
	   0062
 0000074B  66| C7 05			mov coinCoord.y, 15
	   00001C48 R
	   000F
 00000754  C7 05 00001C42 R		mov coinSeed, 0
	   00000000
 0000075E  E9 000000F7			jmp output

				;第二關
 00000763			Level2:
 00000763  E8 000002DA			call generateRandomSeed
 00000768  83 3D 00001C42 R		cmp coinSeed, 0
	   00
 0000076F  74 14			je Pos2_1
 00000771  83 3D 00001C42 R		cmp coinSeed, 1
	   01
 00000778  74 22			je Pos2_2
 0000077A  83 3D 00001C42 R		cmp coinSeed, 2
	   02
 00000781  74 30			je Pos2_3
 00000783  EB 45			jmp Pos2_4
					
 00000785			Pos2_1:
 00000785  66| C7 05			mov coinCoord.x, 29
	   00001C46 R
	   001D
 0000078E  66| C7 05			mov coinCoord.y, 3
	   00001C48 R
	   0003
 00000797  E9 000000BE			jmp output

 0000079C			Pos2_2:
 0000079C  66| C7 05			mov coinCoord.x, 55
	   00001C46 R
	   0037
 000007A5  66| C7 05			mov coinCoord.y, 15
	   00001C48 R
	   000F
 000007AE  E9 000000A7			jmp output

 000007B3			Pos2_3:
 000007B3  66| C7 05			mov coinCoord.x, 114
	   00001C46 R
	   0072
 000007BC  66| C7 05			mov coinCoord.y, 4
	   00001C48 R
	   0004
 000007C5  E9 00000090			jmp output

 000007CA			Pos2_4:
 000007CA  66| C7 05			mov coinCoord.x, 78
	   00001C46 R
	   004E
 000007D3  66| C7 05			mov coinCoord.y, 11
	   00001C48 R
	   000B
 000007DC  C7 05 00001C42 R		mov coinSeed, 0
	   00000000
 000007E6  EB 72			jmp output

				;第三關
 000007E8			Level3:
 000007E8  E8 00000255			call generateRandomSeed
 000007ED  83 3D 00001C42 R		cmp coinSeed, 0
	   00
 000007F4  74 14			je Pos3_1
 000007F6  83 3D 00001C42 R		cmp coinSeed, 1
	   01
 000007FD  74 1F			je Pos3_2
 000007FF  83 3D 00001C42 R		cmp coinSeed, 2
	   02
 00000806  74 2A			je Pos3_3
 00000808  EB 3C			jmp Pos3_4

 0000080A			Pos3_1:
 0000080A  66| C7 05			mov coinCoord.x, 71
	   00001C46 R
	   0047
 00000813  66| C7 05			mov coinCoord.y, 1
	   00001C48 R
	   0001
 0000081C  EB 3C			jmp output

 0000081E			Pos3_2:
 0000081E  66| C7 05			mov coinCoord.x, 8
	   00001C46 R
	   0008
 00000827  66| C7 05			mov coinCoord.y, 9
	   00001C48 R
	   0009
 00000830  EB 28			jmp output

 00000832			Pos3_3:
 00000832  66| C7 05			mov coinCoord.x, 103
	   00001C46 R
	   0067
 0000083B  66| C7 05			mov coinCoord.y, 8
	   00001C48 R
	   0008
 00000844  EB 14			jmp output

 00000846			Pos3_4:
 00000846  66| C7 05			mov coinCoord.x, 52
	   00001C46 R
	   0034
 0000084F  66| C7 05			mov coinCoord.y, 14
	   00001C48 R
	   000E
 00000858  EB 00			jmp output

				;顯示金幣
 0000085A			output:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle,
					OFFSET coinSymbol,
					1,
					coinCoord,
					OFFSET count

					INVOKE WriteConsoleOutputAttribute,
					outputHandle, 
					OFFSET coinAttribute,
					1, 
					coinCoord,
					OFFSET count

 00000894  C6 05 00001C4A R		mov coinGenerated, 1
	   01
					ret
 000008A0			generateCoins ENDP

				; 顯示金幣數量
 000008A0			displayCoinGot PROC uses eax ebx ecx edx
				    invoke SetConsoleCursorPosition,outputHandle, coinGotCoord
 000008B5  A1 00001C4E R		mov eax, coinGot
 000008BA  E8 00000000 E		call WriteDec
					ret
 000008C4			displayCoinGot ENDP

				; 快速通關鈕
 000008C4			cheatInput PROC
					INVOKE GetAsyncKeyState, 'C'
 000008CB  A9 00008000			test eax, 8000h
 000008D0  74 4E			jz notPressed
					.IF isCheatKeyPressed == 0
						.IF currentLevel == 1
 000008E4  C7 05 00001C4E R				mov coinGot, 5
	   00000005
						.ELSEIF currentLevel == 2
 000008F9  C7 05 00001C4E R				mov coinGot, 8
	   00000008
						.ELSEIF currentLevel == 3
 0000090E  C7 05 00001C4E R				mov coinGot, 12
	   0000000C
						.ENDIF
 00000918  C6 05 00000042 R			mov isCheatKeyPressed, 1
	   01
					.ENDIF
 0000091F  C3				ret
					
 00000920			notPressed:
 00000920  C6 05 00000042 R		mov isCheatKeyPressed, 0
	   00
 00000927  C3				ret
 00000928			cheatInput ENDP

				; 顯示結算資訊
 00000928			displayEndData PROC uses eax ebx ecx edx
 0000092C			coin:
 0000092C  B2 2B			mov dl, 43
 0000092E  B6 07			mov dh, 7
 00000930  E8 00000000 E		call gotoxy
 00000935  A1 00001C4E R		mov eax, CoinGot
 0000093A  E8 00000000 E		call WriteDec

 0000093F			time:
 0000093F  B2 2B			mov dl, 43
 00000941  B6 04			mov dh, 4
 00000943  E8 00000000 E		call gotoxy
 00000948  A1 00001C03 R		mov eax, endTime
 0000094D  E8 00000000 E		call WriteDec

 00000952			point:
 00000952  B2 2B			mov dl, 43
 00000954  B6 0A			mov dh, 10
 00000956  E8 00000000 E		call gotoxy
					.IF isDead == 1
						.IF currentLevel == 1
 0000096D  B8 00000000					mov eax, 0
						.ELSEIF currentLevel == 2
 0000097D  B8 00000005					mov eax, 5
						.ELSEIF currentLevel == 3
 0000098D  B8 00000008					mov eax, 8
						.ENDIF
					.ELSE
 00000994  A1 00001C4E R			mov eax, coinGot
					.ENDIF
 00000999  F7 25 00001C03 R		mul endTime
 0000099F  E8 00000000 E		call WriteDec

 000009A4			level:
 000009A4  B2 2B			mov dl, 43
 000009A6  B6 0D			mov dh, 13
 000009A8  E8 00000000 E		call gotoxy
 000009AD  A1 0000003E R		mov eax, currentLevel
					.IF isDead == 1
 000009BB  48					dec eax
					.ENDIF
 000009BC  E8 00000000 E		call WriteDec
					
 000009C1  B2 00			mov dl, 0
 000009C3  B6 00			mov dh, 0
 000009C5  E8 00000000 E		call gotoxy
					ret
 000009CF			displayEndData ENDP

				; 判斷是否取得金幣
 000009CF			getCoin PROC uses eax ebx ecx edx
				;判斷X座標
 000009D3			compareX:
 000009D3  66| A1			mov ax, playerXY.x
	   00000003 R
 000009D9  66| 3B 05			cmp ax, coinCoord.x
	   00001C46 R
 000009E0  75 25			jne not_equal

				;判斷Y座標
 000009E2			compareY:
 000009E2  66| A1			mov ax, playerXY.y
	   00000005 R
 000009E8  66| 3B 05			cmp ax, coinCoord.y
	   00001C48 R
 000009EF  75 16			jne not_equal

				;兩者皆相同的情況
 000009F1			equal:
 000009F1  C6 05 00001C56 R		mov coinGet, 1
	   01
 000009F8  FF 05 00001C4E R		inc coinGot
 000009FE  C6 05 00001C4A R		mov coinGenerated, 0
	   00
 00000A05  EB 07			jmp end_program

 00000A07			not_equal:
 00000A07  C6 05 00001C56 R		mov coinGet, 0
	   00

 00000A0E			end_program:
					ret

 00000A13			getCoin ENDP

				; 判斷遊戲是否結束
 00000A13			endGame PROC uses eax ebx ecx edx
					;獲得12枚金幣
 00000A17  A1 00001C4E R		mov eax, coinGot
 00000A1C  83 F8 0C			cmp eax, 12
 00000A1F  74 15			je equal

					;時間結束
 00000A21  A1 00001C03 R		mov eax, endTime
 00000A26  83 F8 00			cmp eax, 0
 00000A29  74 0B			je equal

					;掉入洞裡死亡
 00000A2B  A0 00001C08 R		mov al, isDead
 00000A30  3C 01			cmp al, 1
 00000A32  74 02			je equal
 00000A34  EB 07			jmp end_program

 00000A36			equal:
 00000A36  C6 05 0000002B R		mov escConfirm, 1
	   01

 00000A3D			end_program:
					ret
 00000A42			endGame ENDP

				; 計算用於生成金幣的隨機種子
 00000A42			generateRandomSeed PROC uses eax ebx ecx edx
 00000A46			generate:
					;取得總計執行時間，作為隨機數使用
					invoke GetTickCount

					;處理所得時間，最後得到0~3的隨機整數
 00000A4B  69 C0 000343FD	    imul eax, 214013    
 00000A51  05 00269EC3		    add eax, 2531011
 00000A56  C1 E8 10		    shr eax, 16    
 00000A59  25 00007FFF		    and eax, 7FFFh
 00000A5E  33 D2		    xor edx, edx
 00000A60  BB 00000005			mov ebx, 5
 00000A65  F7 F3		    div ebx    
 00000A67  89 15 00001C42 R	    mov coinSeed, edx

					;判斷與前一次生成位置是否相同，避免重複位置生成
 00000A6D  3B 15 00001C5B R		cmp edx, preSeed
 00000A73  74 D1			je generate
 00000A75  89 15 00001C5B R		mov preSeed,edx
					
					ret
 00000A80			generateRandomSeed ENDP

				END main
Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/25/24 21:58:33
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00001C5F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000A80 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetAsyncKeyState . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleOutputCharacterA  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleOutputCP . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
cheatInput . . . . . . . . . . .	P Near	 000008C4 _TEXT	Length= 00000064 Public STDCALL
  notPressed . . . . . . . . . .	L Near	 00000920 _TEXT	
checkPlatformLevel . . . . . . .	P Near	 000001C4 _TEXT	Length= 0000006E Public STDCALL
  detectPlatform . . . . . . . .	L Near	 000001E8 _TEXT	
  EndCheck . . . . . . . . . . .	L Near	 0000022D _TEXT	
displayBeginScreen . . . . . . .	P Near	 00000496 _TEXT	Length= 000000A1 Public STDCALL
  Pos1 . . . . . . . . . . . . .	L Near	 000004AD _TEXT	
  Pos2 . . . . . . . . . . . . .	L Near	 000004E9 _TEXT	
  conti  . . . . . . . . . . . .	L Near	 00000523 _TEXT	
  EndDisplay . . . . . . . . . .	L Near	 00000532 _TEXT	
displayCoinGot . . . . . . . . .	P Near	 000008A0 _TEXT	Length= 00000024 Public STDCALL
displayEndData . . . . . . . . .	P Near	 00000928 _TEXT	Length= 000000A7 Public STDCALL
  coin . . . . . . . . . . . . .	L Near	 0000092C _TEXT	
  time . . . . . . . . . . . . .	L Near	 0000093F _TEXT	
  point  . . . . . . . . . . . .	L Near	 00000952 _TEXT	
  level  . . . . . . . . . . . .	L Near	 000009A4 _TEXT	
displayEndScreen . . . . . . . .	P Near	 000005A3 _TEXT	Length= 000000A1 Public STDCALL
  Pos1 . . . . . . . . . . . . .	L Near	 000005BA _TEXT	
  Pos2 . . . . . . . . . . . . .	L Near	 000005F6 _TEXT	
  conti  . . . . . . . . . . . .	L Near	 00000630 _TEXT	
  EndDisplay . . . . . . . . . .	L Near	 0000063F _TEXT	
displayTime  . . . . . . . . . .	P Near	 00000457 _TEXT	Length= 0000003F Public STDCALL
drawPlayer . . . . . . . . . . .	P Near	 000002FE _TEXT	Length= 0000003B Public STDCALL
drawScreen . . . . . . . . . . .	P Near	 00000339 _TEXT	Length= 00000092 Public STDCALL
  screenFileName . . . . . . . .	DWord	 bp + 00000008
  ReadLoop . . . . . . . . . . .	L Near	 0000035F _TEXT	
  EndDraw  . . . . . . . . . . .	L Near	 000003B8 _TEXT	
endGame  . . . . . . . . . . . .	P Near	 00000A13 _TEXT	Length= 0000002F Public STDCALL
  equal  . . . . . . . . . . . .	L Near	 00000A36 _TEXT	
  end_program  . . . . . . . . .	L Near	 00000A3D _TEXT	
generateCoins  . . . . . . . . .	P Near	 000006B0 _TEXT	Length= 000001F0 Public STDCALL
  Level1 . . . . . . . . . . . .	L Near	 000006DB _TEXT	
  Pos1_1 . . . . . . . . . . . .	L Near	 000006FD _TEXT	
  Pos1_2 . . . . . . . . . . . .	L Near	 00000714 _TEXT	
  Pos1_3 . . . . . . . . . . . .	L Near	 0000072B _TEXT	
  Pos1_4 . . . . . . . . . . . .	L Near	 00000742 _TEXT	
  Level2 . . . . . . . . . . . .	L Near	 00000763 _TEXT	
  Pos2_1 . . . . . . . . . . . .	L Near	 00000785 _TEXT	
  Pos2_2 . . . . . . . . . . . .	L Near	 0000079C _TEXT	
  Pos2_3 . . . . . . . . . . . .	L Near	 000007B3 _TEXT	
  Pos2_4 . . . . . . . . . . . .	L Near	 000007CA _TEXT	
  Level3 . . . . . . . . . . . .	L Near	 000007E8 _TEXT	
  Pos3_1 . . . . . . . . . . . .	L Near	 0000080A _TEXT	
  Pos3_2 . . . . . . . . . . . .	L Near	 0000081E _TEXT	
  Pos3_3 . . . . . . . . . . . .	L Near	 00000832 _TEXT	
  Pos3_4 . . . . . . . . . . . .	L Near	 00000846 _TEXT	
  output . . . . . . . . . . . .	L Near	 0000085A _TEXT	
generateRandomSeed . . . . . . .	P Near	 00000A42 _TEXT	Length= 0000003E Public STDCALL
  generate . . . . . . . . . . .	L Near	 00000A46 _TEXT	
getCoin  . . . . . . . . . . . .	P Near	 000009CF _TEXT	Length= 00000044 Public STDCALL
  compareX . . . . . . . . . . .	L Near	 000009D3 _TEXT	
  compareY . . . . . . . . . . .	L Near	 000009E2 _TEXT	
  equal  . . . . . . . . . . . .	L Near	 000009F1 _TEXT	
  not_equal  . . . . . . . . . .	L Near	 00000A07 _TEXT	
  end_program  . . . . . . . . .	L Near	 00000A0E _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000014F Public STDCALL
  beginLoop  . . . . . . . . . .	L Near	 0000000C _TEXT	
  initialize . . . . . . . . . .	L Near	 00000026 _TEXT	
  GameLoop . . . . . . . . . . .	L Near	 00000082 _TEXT	
  endLoop  . . . . . . . . . . .	L Near	 000000E2 _TEXT	
  Refresh  . . . . . . . . . . .	L Near	 000000ED _TEXT	
  CheckInput . . . . . . . . . .	L Near	 00000103 _TEXT	
  SkipRefresh  . . . . . . . . .	L Near	 00000137 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readInputBeginScreen . . . . . .	P Near	 00000537 _TEXT	Length= 0000006C Public STDCALL
  confirm  . . . . . . . . . . .	L Near	 0000055E _TEXT	
  checkW . . . . . . . . . . . .	L Near	 0000056A _TEXT	
  checkS . . . . . . . . . . . .	L Near	 00000584 _TEXT	
  no_key_pressed . . . . . . . .	L Near	 0000059E _TEXT	
readInputEndScreen . . . . . . .	P Near	 00000644 _TEXT	Length= 0000006C Public STDCALL
  confirm  . . . . . . . . . . .	L Near	 0000066B _TEXT	
  checkA . . . . . . . . . . . .	L Near	 00000677 _TEXT	
  checkD . . . . . . . . . . . .	L Near	 00000691 _TEXT	
  no_key_pressed . . . . . . . .	L Near	 000006AB _TEXT	
readPlayerMoveInput  . . . . . .	P Near	 00000232 _TEXT	Length= 000000CC Public STDCALL
  CheckShift . . . . . . . . . .	L Near	 0000025A _TEXT	
  CheckA . . . . . . . . . . . .	L Near	 00000275 _TEXT	
  CheckD . . . . . . . . . . . .	L Near	 000002AF _TEXT	
  CheckESC . . . . . . . . . . .	L Near	 000002E9 _TEXT	
  EndInput . . . . . . . . . . .	L Near	 000002FD _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
updateLevel  . . . . . . . . . .	P Near	 000003CB _TEXT	Length= 0000008C Public STDCALL
updatePhysics  . . . . . . . . .	P Near	 0000014F _TEXT	Length= 00000075 Public STDCALL
  EndPhysics . . . . . . . . . .	L Near	 000001C1 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TimerXY  . . . . . . . . . . . .	COORD	 0000003A _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
againConfirm . . . . . . . . . .	Byte	 00001BF2 _DATA	
beginConfirm . . . . . . . . . .	Byte	 00001BC1 _DATA	
beginExitLeftPos . . . . . . . .	COORD	 00001BDA _DATA	
beginExitLeftSymbol  . . . . . .	DWord	 00001BDE _DATA	
beginExitRightPos  . . . . . . .	COORD	 00001BE6 _DATA	
beginExitRightSymbol . . . . . .	DWord	 00001BEA _DATA	
beginKeyPos  . . . . . . . . . .	Byte	 00001BC0 _DATA	
beginScreenFile  . . . . . . . .	Byte	 00001BB6 _DATA	
beginStartLeftPos  . . . . . . .	COORD	 00001BC2 _DATA	
beginStartLeftSymbol . . . . . .	DWord	 00001BC6 _DATA	
beginStartRightPos . . . . . . .	COORD	 00001BCE _DATA	
beginStartRightSymbol  . . . . .	DWord	 00001BD2 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 0000005E _DATA	
bytesRead  . . . . . . . . . . .	DWord	 00000047 _DATA	
bytesWritten . . . . . . . . . .	DWord	 00000020 _DATA	
charRead . . . . . . . . . . . .	DWord	 00000018 _DATA	
coinAttribute  . . . . . . . . .	Word	 00001C4C _DATA	
coinCoord  . . . . . . . . . . .	COORD	 00001C46 _DATA	
coinGenerated  . . . . . . . . .	Byte	 00001C4A _DATA	
coinGet  . . . . . . . . . . . .	Byte	 00001C56 _DATA	
coinGotCoord . . . . . . . . . .	COORD	 00001C52 _DATA	
coinGot  . . . . . . . . . . . .	DWord	 00001C4E _DATA	
coinSeed . . . . . . . . . . . .	DWord	 00001C42 _DATA	
coinSymbol . . . . . . . . . . .	Byte	 00001C4B _DATA	
count  . . . . . . . . . . . . .	DWord	 00000024 _DATA	
currentLevel . . . . . . . . . .	DWord	 0000003E _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
elapsedTime  . . . . . . . . . .	DWord	 00000032 _DATA	
endCoinGotCoord  . . . . . . . .	COORD	 00001C3A _DATA	
endCoinGot . . . . . . . . . . .	DWord	 00001BFF _DATA	
endExitLeftPos . . . . . . . . .	COORD	 00001C22 _DATA	
endExitLeftSymbol  . . . . . . .	DWord	 00001C26 _DATA	
endExitRightPos  . . . . . . . .	COORD	 00001C2E _DATA	
endExitRightSymbol . . . . . . .	DWord	 00001C32 _DATA	
endKeyPos  . . . . . . . . . . .	Byte	 00001BFE _DATA	
endScreenFile  . . . . . . . . .	Byte	 00001BF3 _DATA	
endStartLeftPos  . . . . . . . .	COORD	 00001C0A _DATA	
endStartLeftSymbol . . . . . . .	DWord	 00001C0E _DATA	
endStartRightPos . . . . . . . .	COORD	 00001C16 _DATA	
endStartRightSymbol  . . . . . .	DWord	 00001C1A _DATA	
endTimeCoord . . . . . . . . . .	COORD	 00001C3E _DATA	
endTime  . . . . . . . . . . . .	DWord	 00001C03 _DATA	
escConfirm . . . . . . . . . . .	Byte	 0000002B _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00000043 _DATA	
gameScreenFile . . . . . . . . .	Byte	 0000004F _DATA	
gravity  . . . . . . . . . . . .	Number	 00000001h   
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
isCheatKeyPressed  . . . . . . .	Byte	 00000042 _DATA	
isDead . . . . . . . . . . . . .	Byte	 00001C08 _DATA	
isRunning  . . . . . . . . . . .	Byte	 00000009 _DATA	
jumpForce  . . . . . . . . . . .	Number	 00000004h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
needsRefresh . . . . . . . . . .	Byte	 00001C07 _DATA	
onPlatform . . . . . . . . . . .	Byte	 0000002A _DATA	
outputHandle . . . . . . . . . .	DWord	 0000001C _DATA	
platformBuffer . . . . . . . . .	Byte	 0000000A _DATA	
platformCoord  . . . . . . . . .	COORD	 00000014 _DATA	
platformLevel  . . . . . . . . .	Word	 00000028 _DATA	
playerAttributes . . . . . . . .	Word	 00000001 _DATA	
playerSize . . . . . . . . . . .	Number	 00000001h   
playerXY . . . . . . . . . . . .	COORD	 00000003 _DATA	
player . . . . . . . . . . . . .	Byte	 00000000 _DATA	
preSeed  . . . . . . . . . . . .	DWord	 00001C5B _DATA	
prevKeyPos . . . . . . . . . . .	Byte	 00001C09 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
screenBytesWritten . . . . . . .	DWord	 0000004B _DATA	
seed . . . . . . . . . . . . . .	DWord	 00001C57 _DATA	
startTime  . . . . . . . . . . .	DWord	 0000002E _DATA	
timeLimit  . . . . . . . . . . .	DWord	 00000036 _DATA	
updateInterval . . . . . . . . .	Word	 0000002C _DATA	
velocityY  . . . . . . . . . . .	Word	 00000007 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
