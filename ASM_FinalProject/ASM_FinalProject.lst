Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/21/24 20:33:29
main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDELIB kernel32.lib

 = 00000001			playerSize = 1
 = 00000001			gravity = 1
 = 00000004			jumpForce = 4

 00000000			.data
 00000000 50			player BYTE 'P'

 00000001  0000000A [		platformBuffer BYTE 10 DUP(?)
	    00
	   ]
 0000000B 0000 0000		platformCoord COORD <0,0>
 0000000F 00000000		charRead DWORD ?

 00000013 00000000		outputHandle DWORD 0
 00000017 00000000		bytesWritten DWORD 0
 0000001B 00000000		count DWORD 0
 0000001F 000A 0005		playerXY COORD <10,5>
 00000023 0000			velocityY SWORD 0
 00000025 00			isRunning BYTE 0

 00000026 0018			platformLevel WORD 24
 00000028 01			onPlatform BYTE 1

 00000029 00			escConfirm byte 0

 0000002A 00000000		cellsWritten DWORD ?
 0000002E  00000001 [		playerAttributes WORD playerSize DUP(0bh)
	    000B
	   ]

 00000030 0032			updateInterval WORD 50 ; 50ms each update

 00000032 00000000		startTime DWORD ?
 00000036 00000000		elapsedTime DWORD ?
 0000003A 00000258		timeLimit DWORD 600 ; 600 seconds
 0000003E 0000 0000		TimerXY COORD <0,0>

 00000042 00000001		currentLevel DWORD 1

				;畫面繪製
 00000046 00000000		fileHandle HANDLE ?
 0000004A 00000000		bytesRead DWORD ?
 0000004E 00000000		screenBytesWritten DWORD ?

				;遊戲畫面資料
 00000052 67 61 6D 65 66	gamescrfile BYTE 'gamefield1.txt',0
	   69 65 6C 64 31
	   2E 74 78 74 00

				;初始畫面資料
 00000061  00001B58 [		buffer BYTE 7000 DUP(?)
	    00
	   ]
 00001BB9 73 74 61 72 74	initialscrfile BYTE 'start.txt',0
	   2E 74 78 74 00
 00001BC3 00			initialKeyPos Byte 0
 00001BC4 00			initialconfirm Byte 0

 00001BC5 0031 0011		initialStartLeftPos COORD <49,17>
 00001BC9 0000003E		initialStartLeftSymbol DWORD '>',0
	   00000000
 00001BD1 0049 0011		initialStartRightPos COORD <73,17>
 00001BD5 0000003C		initialStartRightSymbol DWORD '<',0
	   00000000

 00001BDD 0031 0017		initialExitLeftPos COORD <49,23>
 00001BE1 0000003E		initialExitLeftSymbol DWORD '>',0
	   00000000
 00001BE9 0049 0017		initialExitRightPos COORD <73,23>
 00001BED 0000003C		initialExitRightSymbol DWORD '<',0
	   00000000

				;結算畫面資料
 00001BF5 66 69 6E 69 73	endscrfile BYTE 'finish.txt',0
	   68 2E 74 78 74
	   00
 00001C00 00			endKeyPos Byte 0
 00001C01 00			endconfirm Byte 0
 00001C02 00000000		endCoinGot DWORD 0
 00001C06 00000000		endTime DWORD 0
 00001C0A 01			needsRefresh BYTE 1
 00001C0B 00			isDead BYTE 0
 00001C0C 00			prevKeyPos BYTE 0

 00001C0D 001E 0014		endStartLeftPos COORD <30,20>
 00001C11 0000003E		endStartLeftSymbol DWORD '>',0
	   00000000
 00001C19 0037 0014		endStartRightPos COORD <55,20>
 00001C1D 0000003C		endStartRightSymbol DWORD '<',0
	   00000000

 00001C25 0044 0014		endExitLeftPos COORD <68,20>
 00001C29 0000003E		endExitLeftSymbol DWORD '>',0
	   00000000
 00001C31 005D 0014		endExitRightPos COORD <93,20>
 00001C35 0000003C		endExitRightSymbol DWORD '<',0
	   00000000
 00001C3D 002B 0007		endCoinGotCoord COORD <43,7>
 00001C41 002B 0004		endTimeCoord COORD <43,4>

				;金幣生成資料
 00001C45 00000001		coinSeed DWORD 1
 00001C49 0000 0000		coinCoord COORD <0,0>
 00001C4D 00			coinGenerated byte 0
 00001C4E 24			coinSymbol byte '$'
 00001C4F 000E			coinAttribute WORD 0Eh
 00001C51 00000000		coinGot DWORD 0
 00001C55 0007 0002		coinGotCoord1 COORD <7,2>
 00001C59 00			coinGet byte 0
 00001C5A 00000000		seed DWORD ?
 00001C5E 00000000		preSeed DWORD 0

 00000000			.code
					SetConsoleOutputCP PROTO STDCALL :DWORD
					GetAsyncKeyState PROTO STDCALL :DWORD
					ReadConsoleOutputCharacterA PROTO STDCALL :DWORD, :PTR BYTE, :DWORD, :COORD, :PTR DWORD
					drawScreen PROTO screenFileName :PTR BYTE
 00000000			main PROC
					INVOKE SetConsoleOutputCP, 437

					; Get the console ouput handle
					INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000011  A3 00000013 R		mov outputHandle, eax	; save console handle

 00000016			initialLoop:
 00000016  E8 00000000 E		call Clrscr
 0000001B  E8 0000046D			call displayInitialscr
 00000020  E8 00000509			call readInputInitialscr
 00000025  80 3D 00001BC4 R		cmp Initialconfirm, 1
	   01
 0000002C  74 02			je conti
 0000002E  EB E6			jmp initialLoop

 00000030			conti:
					INVOKE GetTickCount
 00000035  A3 00000032 R		mov startTime, eax
 0000003A  66| C7 05			mov playerXY.X, 10
	   0000001F R
	   000A
 00000043  66| C7 05			mov playerXY.Y, 5
	   00000021 R
	   0005
 0000004C  66| C7 05			mov velocityY, 0
	   00000023 R
	   0000
 00000055  C7 05 00000042 R		mov currentLevel, 1
	   00000001
 0000005F  C6 05 0000005B R		mov gamescrfile[9], '1'
	   31
 00000066  C6 05 00001C0B R		mov isDead, 0
	   00
 0000006D  C6 05 00000029 R		mov escConfirm, 0
	   00
 00000074  C6 05 00001C01 R		mov endConfirm, 0
	   00
 0000007B  C7 05 00001C51 R		mov coinGot, 0
	   00000000
					
 00000085			GameLoop:
 00000085  E8 00000000 E		call Clrscr
 0000008A  E8 000000C5			call updatePhysics
					INVOKE drawScreen, ADDR gamescrfile
 00000099  E8 00000265			call drawPlayer
 0000009E  E8 00000126			call checkPlatformLevel
 000000A3  E8 000003A6			call displayTime
 000000A8  E8 000006C9			call displayCoinGot
 000000AD  E8 00000185			call readPlayerMoveInput
 000000B2  E8 000007D6			call getCoin
 000000B7  E8 000005EB			call generateCoins
 000000BC  E8 000006D9			call cheatInput			; 按C鍵進入下一關
 000000C1  E8 0000030A			call updateLevel
 000000C6  E8 00000806			call endGame
 000000CB  80 3D 00000029 R		cmp  escConfirm, 1
	   01
 000000D2  74 11			je endLoop
					invoke Sleep, updateInterval
 000000E3  EB A0			jmp GameLoop

 000000E5			endLoop:
 000000E5  80 3D 00001C0A R		cmp needsRefresh, 1
	   01
 000000EC  74 02			je Refresh
 000000EE  EB 18			jmp CheckInput

 000000F0			Refresh:
 000000F0  E8 00000000 E		call Clrscr
 000000F5  E8 000004A0			call displayEndscr
 000000FA  E8 000006E7			call displayEndData
 000000FF  C6 05 00001C0A R		mov needsRefresh, 0
	   00
 00000106  EB 00			jmp CheckInput

 00000108			CheckInput:
 00000108  E8 0000052E			call readInputEndscr
 0000010D  80 3D 00001C01 R		cmp endconfirm, 1
	   01
 00000114  0F 84 FFFFFF16		je conti
 0000011A  A0 00001C00 R		mov al, endKeyPos
 0000011F  8A 25 00001C0C R		mov ah, prevKeyPos
 00000125  3A E0			cmp ah, al
 00000127  74 13			je SkipRefresh
 00000129  C6 05 00001C0A R		mov needsRefresh, 1
	   01
 00000130  8A 25 00001C00 R		mov ah, endKeyPos
 00000136  88 25 00001C0C R		mov prevKeyPos, ah

 0000013C			SkipRefresh:
					invoke Sleep, updateInterval
 0000014B  EB 98			jmp endLoop

					exit
 00000154			main ENDP

 00000154			updatePhysics PROC uses eax ebx
					; 檢查是否超出螢幕上方
					.IF playerXY.Y >= 60000
 00000161  66| C7 05				mov playerXY.Y, 0
	   00000021 R
	   0000
 0000016A  66| C7 05				mov platformLevel, 0
	   00000026 R
	   0000
					.ENDIF

					; 檢查是否掉出螢幕下方
					.IF playerXY.Y >= 26
 0000017D  C6 05 00001C0B R			mov isDead, 1
	   01
					.ENDIF
				    ; 更新玩家的 Y 座標
 00000184  66| A1		    mov ax, velocityY
	   00000023 R
 0000018A  66| 01 05		    add playerXY.Y, ax        ; 根據垂直速度更新位置
	   00000021 R

				    ; 應用重力（加速垂直速度）
 00000191  66| 83 05		    add velocityY, gravity    ; 重力影響：速度越來越快
	   00000023 R 01

				    ; 檢查是否低於地面
 00000199  66| A1		    mov ax, playerXY.Y
	   00000021 R
 0000019F  66| 3B 05		    cmp ax, platformLevel
	   00000026 R
 000001A6  7E 1E			jle EndPhysics            ; 如果未超過地面，跳過地面處理

				    ; 如果超出地面，重置到地面
 000001A8  66| A1		    mov ax, platformLevel
	   00000026 R
 000001AE  66| A3		    mov playerXY.Y, ax        ; 將玩家重置到地面
	   00000021 R
 000001B4  66| C7 05		    mov velocityY, 0          ; 停止垂直運動
	   00000023 R
	   0000
 000001BD  C6 05 00000028 R	    mov onPlatform, 1           ; 標記玩家在地面上
	   01
 000001C4  EB 00		    jmp EndPhysics

 000001C6			EndPhysics:
				    ret
 000001C9			updatePhysics ENDP

				; 檢查平台高度
 000001C9			checkPlatformLevel PROC uses eax ebx ecx edx
 000001CD  66| A1			mov ax, playerXY.X
	   0000001F R
 000001D3  66| 8B 1D			mov bx, playerXY.Y
	   00000021 R
 000001DA  66| 43			inc bx
 000001DC  66| A3			mov platformCoord.X, ax
	   0000000B R
 000001E2  66| 89 1D			mov platformCoord.Y, bx
	   0000000D R

 000001E9  66| B9 001E			mov cx, 30
 000001ED			detectPlatform:
 000001ED  66| 8B D1			mov dx, cx

					INVOKE ReadConsoleOutputCharacterA,
					outputHandle,
					ADDR platformBuffer,
					1,
					platformCoord,
					ADDR charRead

 0000020D  A0 00000001 R		mov al, platformBuffer
					.IF al != 32
 00000216  66| A1				mov ax, platformCoord.Y
	   0000000D R
 0000021C  66| 48				dec ax
 0000021E  66| A3				mov platformLevel, ax
	   00000026 R
 00000224  EB 0C				jmp EndCheck
					.ENDIF
 00000226  66| FF 05			inc platformCoord.Y
	   0000000D R
 0000022D  66| 8B CA			mov cx, dx
 00000230  E2 BB			loop detectPlatform

					; 輸出Debug訊息
				;showINFO:
					;mov dl, 0
					;mov dh, 0
					;call gotoxy
					;call WriteDec

 00000232			EndCheck:
					ret
 00000237			checkPlatformLevel ENDP

 00000237			readPlayerMoveInput PROC
				    ; 檢查W鍵（向上移動）
				    INVOKE GetAsyncKeyState, 'W'
 0000023E  66| A9 8000		    test ax, 8000h
 00000242  74 1B		    jz CheckShift
 00000244  80 3D 00000028 R		cmp onPlatform, 1
	   01
 0000024B  75 12			jne CheckShift
 0000024D  66| B8 0004			mov ax, jumpForce
 00000251  66| 29 05			sub velocityY, ax
	   00000023 R
 00000258  C6 05 00000028 R		mov onPlatform, 0
	   00
 0000025F			CheckShift:
					; 檢查Shift鍵（加速）
 0000025F  C6 05 00000025 R		mov isRunning, 0
	   00
					INVOKE GetAsyncKeyState, VK_SHIFT
 0000026D  66| A9 8000			test ax, 8000h
 00000271  74 07			jz CheckA
 00000273  C6 05 00000025 R		mov isRunning, 1
	   01
 0000027A			CheckA:
				    ; 檢查A鍵（向左移動）
				    INVOKE GetAsyncKeyState, 'A'
 00000281  66| A9 8000		    test ax, 8000h
 00000285  74 2D		    jz CheckD
				    .IF isRunning == 1
 00000290  66| 83 2D				sub playerXY.X, 2
	   0000001F R 02
					.ELSE
 0000029A  66| FF 0D				dec playerXY.X
	   0000001F R
					.ENDIF
											
					.IF playerXY.X <= 0
 000002AB  66| C7 05				mov playerXY.X, 1
	   0000001F R
	   0001
					.ENDIF

 000002B4			CheckD:
				    ; 檢查D鍵（向右移動）
				    INVOKE GetAsyncKeyState, 'D'
 000002BB  66| A9 8000		    test ax, 8000h
 000002BF  74 2D		    jz CheckESC
				    .IF isRunning == 1
 000002CA  66| 83 05				add playerXY.X, 2
	   0000001F R 02
					.ELSE
 000002D4  66| FF 05				inc playerXY.X
	   0000001F R
					.ENDIF
					.IF playerXY.X >= 119
 000002E5  66| C7 05				mov playerXY.X, 118
	   0000001F R
	   0076
					.ENDIF

 000002EE			CheckESC:
				    ; 檢查ESC鍵（退出遊戲）
				    INVOKE GetAsyncKeyState, VK_ESCAPE
 000002F5  66| A9 8000		    test ax, 8000h
 000002F9  74 07		    jz EndInput
 000002FB  C6 05 00000029 R	    mov escConfirm,1
	   01

 00000302			EndInput:
 00000302  C3				ret
 00000303			readPlayerMoveInput ENDP

 00000303			drawPlayer PROC
					INVOKE WriteConsoleOutputAttribute,
					outputHandle, 
					OFFSET playerAttributes,
					playerSize, 
					playerXY,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle,
					OFFSET player,
					playerSize,
					playerXY,
					OFFSET count
 0000033D  C3				ret
 0000033E			drawPlayer ENDP

 0000033E			drawScreen PROC uses eax ebx ecx edx, screenFileName:PTR BYTE
				    ;打開文字檔案
					INVOKE CreateFile, screenFileName, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL 
 0000035F  A3 00000046 R		mov fileHandle, eax

 00000364			ReadLoop:
					;使用UTF-8編碼，顯示符號
					INVOKE SetConsoleOutputCP, 65001

					;讀取檔案
					INVOKE ReadFile, fileHandle, ADDR buffer, SIZEOF buffer, ADDR bytesRead, NULL

					;畫面更新及輸出檔案
 0000038A  E8 00000000 E		call Clrscr
					INVOKE SetFilePointer, fileHandle, 0, NULL, FILE_BEGIN
					INVOKE WriteConsole, outputHandle, ADDR buffer, bytesRead, ADDR screenBytesWritten, NULL

 000003BD			EndDraw:
					;關閉檔案
				    INVOKE CloseHandle, fileHandle
				    ret
 000003D0			drawScreen ENDP

 000003D0			updateLevel PROC
					.IF coinGot == 5 && currentLevel == 1
 000003E2  C7 05 00000042 R			mov currentLevel, 2
	   00000002
 000003EC  C6 05 0000005B R			mov gamescrfile[9], '2'
	   32
 000003F3  66| C7 05				mov playerXY.X, 10
	   0000001F R
	   000A
 000003FC  66| C7 05				mov playerXY.Y, 5
	   00000021 R
	   0005
 00000405  66| C7 05				mov velocityY, 0
	   00000023 R
	   0000
					.ELSEIF coinGot == 8 && currentLevel == 2
 00000422  C7 05 00000042 R			mov currentLevel, 3
	   00000003
 0000042C  C6 05 0000005B R			mov gamescrfile[9], '3'
	   33
 00000433  66| C7 05				mov playerXY.X, 10
	   0000001F R
	   000A
 0000043C  66| C7 05				mov playerXY.Y, 5
	   00000021 R
	   0005
 00000445  66| C7 05				mov velocityY, 0
	   00000023 R
	   0000
					.ENDIF

 0000044E			updateLevel ENDP

 0000044E			displayTime PROC uses eax ebx ecx edx
					INVOKE GetTickCount
 00000457  2B 05 00000032 R		sub eax, startTime
 0000045D  99				cdq
 0000045E  BB 000003E8			mov ebx, 1000
 00000463  F7 F3			div ebx
 00000465  A3 00000036 R		mov elapsedTime, eax
 0000046A  A1 0000003A R		mov eax, timeLimit
 0000046F  2B 05 00000036 R		sub eax, elapsedTime
 00000475  A3 00001C06 R		mov endTime, eax
 0000047A  B2 06			mov dl, 6
 0000047C  B6 01			mov dh, 1
 0000047E  E8 00000000 E		call gotoxy
 00000483  E8 00000000 E		call WriteDec
					ret
 0000048D			displayTime ENDP

 0000048D			displayInitialscr PROC uses eax ebx ecx edx
				    INVOKE drawScreen, ADDR initialscrfile
 0000049B  80 3D 00001BC3 R		cmp initialKeyPos, 1
	   01
 000004A2  74 3C			je Pos2 

 000004A4			Pos1:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialStartLeftSymbol,
					1, 
					initialStartLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialStartRightSymbol,
					1, 
					initialStartRightPos,
					OFFSET count
 000004DE  EB 3A			jmp conti

 000004E0			Pos2:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialExitLeftSymbol,
					1, 
					initialExitLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialExitRightSymbol,
					1, 
					initialExitRightPos,
					OFFSET count

 0000051A			conti:
					INVOKE Sleep, updateInterval

 00000529			EndDisplay:
				    ret
 0000052E			displayInitialscr ENDP

 0000052E			readInputInitialscr PROC uses eax ebx ecx edx
					INVOKE GetAsyncKeyState, VK_RETURN
 00000539  A9 00008000			test eax, 8000h                     
 0000053E  74 21		    jz checkW
 00000540  80 3D 00001BC3 R		cmp initialKeyPos, 0 ;判斷按鍵位置
	   00
 00000547  74 0C			je confirm
 00000549  E8 00000000 E		call Clrscr
					INVOKE ExitProcess, 0

 00000555			confirm:
 00000555  C6 05 00001BC4 R		mov initialconfirm, 1
	   01
					ret

 00000561			checkW:
					INVOKE GetAsyncKeyState, 'W'
 00000568  A9 00008000			test eax, 8000h                     
 0000056D  74 0C		    jz checkS
 0000056F  C6 05 00001BC3 R		mov initialKeyPos, 0
	   00
					ret

 0000057B			checkS:
					INVOKE GetAsyncKeyState, 'S'
 00000582  A9 00008000			test eax, 8000h                     
 00000587  74 0C		    jz no_key_pressed
 00000589  C6 05 00001BC3 R		mov initialKeyPos, 1
	   01
					ret

 00000595			no_key_pressed:
					ret
 0000059A			readInputInitialscr ENDP

 0000059A			displayEndscr PROC uses eax ebx ecx edx
				    INVOKE drawScreen, ADDR endscrfile
 000005A8  80 3D 00001C00 R		cmp endKeyPos, 1
	   01
 000005AF  74 3C			je Pos2 

 000005B1			Pos1:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endStartLeftSymbol,
					1, 
					endStartLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endStartRightSymbol,
					1, 
					endStartRightPos,
					OFFSET count
 000005EB  EB 3A			jmp conti

 000005ED			Pos2:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endExitLeftSymbol,
					1, 
					endExitLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endExitRightSymbol,
					1, 
					endExitRightPos,
					OFFSET count

 00000627			conti:
					INVOKE Sleep, updateInterval

 00000636			EndDisplay:
				    ret
 0000063B			displayEndscr ENDP

 0000063B			readInputEndscr PROC uses eax ebx ecx edx
					INVOKE GetAsyncKeyState, VK_RETURN
 00000646  A9 00008000			test eax, 8000h                     
 0000064B  74 21		    jz checkA
 0000064D  80 3D 00001C00 R		cmp endKeyPos, 0 ;判斷按鍵位置
	   00
 00000654  74 0C			je confirm
 00000656  E8 00000000 E		call Clrscr
					INVOKE ExitProcess, 0

 00000662			confirm:
 00000662  C6 05 00001C01 R		mov endconfirm, 1
	   01
					ret

 0000066E			checkA:
					INVOKE GetAsyncKeyState, 'A'
 00000675  A9 00008000			test eax, 8000h                     
 0000067A  74 0C		    jz checkD
 0000067C  C6 05 00001C00 R		mov endKeyPos, 0
	   00
					ret

 00000688			checkD:
					INVOKE GetAsyncKeyState, 'D'
 0000068F  A9 00008000			test eax, 8000h                     
 00000694  74 0C		    jz no_key_pressed
 00000696  C6 05 00001C00 R		mov endKeyPos, 1
	   01
					ret

 000006A2			no_key_pressed:
					ret
 000006A7			readInputEndscr ENDP

 000006A7			generateCoins PROC uses eax ebx ecx edx
 000006AB  80 3D 00001C4D R		cmp coinGenerated, 1
	   01
 000006B2  74 7C			je output
 000006B4  E8 00000247			call generateRandomSeed
 000006B9  83 3D 00001C45 R		cmp coinSeed, 0
	   00
 000006C0  74 14			je Pos1
 000006C2  83 3D 00001C45 R		cmp coinSeed, 1
	   01
 000006C9  74 1F			je Pos2
 000006CB  83 3D 00001C45 R		cmp coinSeed, 2
	   02
 000006D2  74 2A			je Pos3
 000006D4  EB 3C			jmp Pos4

 000006D6			Pos1:
 000006D6  66| C7 05			mov coinCoord.x, 15
	   00001C49 R
	   000F
 000006DF  66| C7 05			mov coinCoord.y, 3
	   00001C4B R
	   0003
 000006E8  EB 46			jmp output

 000006EA			Pos2:
 000006EA  66| C7 05			mov coinCoord.x, 90
	   00001C49 R
	   005A
 000006F3  66| C7 05			mov coinCoord.y, 4
	   00001C4B R
	   0004
 000006FC  EB 32			jmp output

 000006FE			Pos3:
 000006FE  66| C7 05			mov coinCoord.x, 40
	   00001C49 R
	   0028
 00000707  66| C7 05			mov coinCoord.y, 14
	   00001C4B R
	   000E
 00000710  EB 1E			jmp output

 00000712			Pos4:
 00000712  66| C7 05			mov coinCoord.x, 98
	   00001C49 R
	   0062
 0000071B  66| C7 05			mov coinCoord.y, 15
	   00001C4B R
	   000F
 00000724  C7 05 00001C45 R		mov coinSeed, 0
	   00000000
 0000072E  EB 00			jmp output

 00000730			output:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle,
					OFFSET coinSymbol,
					1,
					coinCoord,
					OFFSET count

					INVOKE WriteConsoleOutputAttribute,
					outputHandle, 
					OFFSET coinAttribute,
					1, 
					coinCoord,
					OFFSET count

 0000076A  C6 05 00001C4D R		mov coinGenerated, 1
	   01
					ret
 00000776			generateCoins ENDP

 00000776			displayCoinGot PROC uses eax ebx ecx edx
				    invoke SetConsoleCursorPosition,outputHandle, coinGotCoord1
 0000078B  A1 00001C51 R		mov eax, coinGot
 00000790  E8 00000000 E		call WriteDec
					ret
 0000079A			displayCoinGot ENDP

 0000079A			cheatInput PROC
					INVOKE GetAsyncKeyState, 'C'
 000007A1  A9 00008000			test eax, 8000h
 000007A6  74 3D			jz endInput
					.IF currentLevel == 1
 000007B1  C7 05 00001C51 R			mov coinGot, 5
	   00000005
					.ELSEIF currentLevel == 2
 000007C6  C7 05 00001C51 R			mov coinGot, 8
	   00000008
					.ELSEIF currentLevel == 3
 000007DB  C7 05 00001C51 R			mov coinGot, 12
	   0000000C
					.ENDIF
 000007E5			endInput:
 000007E5  C3				ret
 000007E6			cheatInput ENDP

 000007E6			displayEndData PROC uses eax ebx ecx edx
 000007EA			coin:
 000007EA  B2 2B			mov dl, 43
 000007EC  B6 07			mov dh, 7
 000007EE  E8 00000000 E		call gotoxy
 000007F3  A1 00001C51 R		mov eax, CoinGot
 000007F8  E8 00000000 E		call WriteDec

 000007FD			time:
 000007FD  B2 2B			mov dl, 43
 000007FF  B6 04			mov dh, 4
 00000801  E8 00000000 E		call gotoxy
 00000806  A1 00001C06 R		mov eax, endTime
 0000080B  E8 00000000 E		call WriteDec

 00000810			point:
 00000810  B2 2B			mov dl, 43
 00000812  B6 0A			mov dh, 10
 00000814  E8 00000000 E		call gotoxy
					.IF isDead == 1
						.IF currentLevel == 1
 0000082B  B8 00000000					mov eax, 0
						.ELSEIF currentLevel == 2
 0000083B  B8 00000005					mov eax, 5
						.ELSEIF currentLevel == 3
 0000084B  B8 00000008					mov eax, 8
						.ENDIF
					.ELSE
 00000852  A1 00001C51 R			mov eax, coinGot
					.ENDIF
 00000857  F7 25 00001C06 R		mul endTime
 0000085D  E8 00000000 E		call WriteDec

 00000862			level:
 00000862  B2 2B			mov dl, 43
 00000864  B6 0D			mov dh, 13
 00000866  E8 00000000 E		call gotoxy
 0000086B  A1 00000042 R		mov eax, currentLevel
					.IF isDead == 1
 00000879  48					dec eax
					.ENDIF
 0000087A  E8 00000000 E		call WriteDec
					
 0000087F  B2 00			mov dl, 0
 00000881  B6 00			mov dh, 0
 00000883  E8 00000000 E		call gotoxy
					ret
 0000088D			displayEndData ENDP

 0000088D			getCoin PROC uses eax ebx ecx edx
 00000891			compareX:
 00000891  66| A1			mov ax, playerXY.x
	   0000001F R
 00000897  66| 3B 05			cmp ax, coinCoord.x
	   00001C49 R
 0000089E  75 25			jne not_equal

 000008A0			compareY:
 000008A0  66| A1			mov ax, playerXY.y
	   00000021 R
 000008A6  66| 3B 05			cmp ax, coinCoord.y
	   00001C4B R
 000008AD  75 16			jne not_equal

 000008AF			equal:
 000008AF  C6 05 00001C59 R		mov coinGet, 1
	   01
 000008B6  FF 05 00001C51 R		inc coinGot
 000008BC  C6 05 00001C4D R		mov coinGenerated, 0
	   00
 000008C3  EB 07			jmp end_program

 000008C5			not_equal:
 000008C5  C6 05 00001C59 R		mov coinGet, 0
	   00

 000008CC			end_program:
					ret

 000008D1			getCoin ENDP

 000008D1			endGame PROC uses eax ebx ecx edx
 000008D5  A1 00001C51 R		mov eax, coinGot
 000008DA  83 F8 0C			cmp eax, 12
 000008DD  74 15			je equal

 000008DF  A1 00001C06 R		mov eax, endTime
 000008E4  83 F8 00			cmp eax, 0
 000008E7  74 0B			je equal

 000008E9  A0 00001C0B R		mov al, isDead
 000008EE  3C 01			cmp al, 1
 000008F0  74 02			je equal
 000008F2  EB 07			jmp end_program

 000008F4			equal:
 000008F4  C6 05 00000029 R		mov escConfirm, 1
	   01

 000008FB			end_program:
					ret
 00000900			endGame ENDP

 00000900			generateRandomSeed PROC uses eax ebx ecx edx
 00000904			generate:
					invoke GetTickCount
 00000909  A3 00001C5A R	    mov seed, eax

 0000090E  A1 00001C5A R		mov eax, seed
 00000913  69 C0 000343FD	    imul eax, 214013    
 00000919  05 00269EC3		    add eax, 2531011
 0000091E  C1 E8 10		    shr eax, 16    
 00000921  25 00007FFF		    and eax, 7FFFh
 00000926  33 D2		    xor edx, edx
 00000928  BB 00000005			mov ebx, 5
 0000092D  F7 F3		    div ebx    
 0000092F  89 15 00001C45 R	    mov coinSeed, edx

 00000935  3B 15 00001C5E R		cmp edx, preSeed
 0000093B  74 C7			je generate
 0000093D  89 15 00001C5E R		mov preSeed,edx
					
					ret
 00000948			generateRandomSeed ENDP

				END main
Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/21/24 20:33:29
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00001C62 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000948 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetAsyncKeyState . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleOutputCharacterA  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleOutputCharacter . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleOutputCP . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
cheatInput . . . . . . . . . . .	P Near	 0000079A _TEXT	Length= 0000004C Public STDCALL
  endInput . . . . . . . . . . .	L Near	 000007E5 _TEXT	
checkPlatformLevel . . . . . . .	P Near	 000001C9 _TEXT	Length= 0000006E Public STDCALL
  detectPlatform . . . . . . . .	L Near	 000001ED _TEXT	
  EndCheck . . . . . . . . . . .	L Near	 00000232 _TEXT	
displayCoinGot . . . . . . . . .	P Near	 00000776 _TEXT	Length= 00000024 Public STDCALL
displayEndData . . . . . . . . .	P Near	 000007E6 _TEXT	Length= 000000A7 Public STDCALL
  coin . . . . . . . . . . . . .	L Near	 000007EA _TEXT	
  time . . . . . . . . . . . . .	L Near	 000007FD _TEXT	
  point  . . . . . . . . . . . .	L Near	 00000810 _TEXT	
  level  . . . . . . . . . . . .	L Near	 00000862 _TEXT	
displayEndscr  . . . . . . . . .	P Near	 0000059A _TEXT	Length= 000000A1 Public STDCALL
  Pos1 . . . . . . . . . . . . .	L Near	 000005B1 _TEXT	
  Pos2 . . . . . . . . . . . . .	L Near	 000005ED _TEXT	
  conti  . . . . . . . . . . . .	L Near	 00000627 _TEXT	
  EndDisplay . . . . . . . . . .	L Near	 00000636 _TEXT	
displayInitialscr  . . . . . . .	P Near	 0000048D _TEXT	Length= 000000A1 Public STDCALL
  Pos1 . . . . . . . . . . . . .	L Near	 000004A4 _TEXT	
  Pos2 . . . . . . . . . . . . .	L Near	 000004E0 _TEXT	
  conti  . . . . . . . . . . . .	L Near	 0000051A _TEXT	
  EndDisplay . . . . . . . . . .	L Near	 00000529 _TEXT	
displayTime  . . . . . . . . . .	P Near	 0000044E _TEXT	Length= 0000003F Public STDCALL
drawPlayer . . . . . . . . . . .	P Near	 00000303 _TEXT	Length= 0000003B Public STDCALL
drawScreen . . . . . . . . . . .	P Near	 0000033E _TEXT	Length= 00000092 Public STDCALL
  screenFileName . . . . . . . .	DWord	 bp + 00000008
  ReadLoop . . . . . . . . . . .	L Near	 00000364 _TEXT	
  EndDraw  . . . . . . . . . . .	L Near	 000003BD _TEXT	
endGame  . . . . . . . . . . . .	P Near	 000008D1 _TEXT	Length= 0000002F Public STDCALL
  equal  . . . . . . . . . . . .	L Near	 000008F4 _TEXT	
  end_program  . . . . . . . . .	L Near	 000008FB _TEXT	
generateCoins  . . . . . . . . .	P Near	 000006A7 _TEXT	Length= 000000CF Public STDCALL
  Pos1 . . . . . . . . . . . . .	L Near	 000006D6 _TEXT	
  Pos2 . . . . . . . . . . . . .	L Near	 000006EA _TEXT	
  Pos3 . . . . . . . . . . . . .	L Near	 000006FE _TEXT	
  Pos4 . . . . . . . . . . . . .	L Near	 00000712 _TEXT	
  output . . . . . . . . . . . .	L Near	 00000730 _TEXT	
generateRandomSeed . . . . . . .	P Near	 00000900 _TEXT	Length= 00000048 Public STDCALL
  generate . . . . . . . . . . .	L Near	 00000904 _TEXT	
getCoin  . . . . . . . . . . . .	P Near	 0000088D _TEXT	Length= 00000044 Public STDCALL
  compareX . . . . . . . . . . .	L Near	 00000891 _TEXT	
  compareY . . . . . . . . . . .	L Near	 000008A0 _TEXT	
  equal  . . . . . . . . . . . .	L Near	 000008AF _TEXT	
  not_equal  . . . . . . . . . .	L Near	 000008C5 _TEXT	
  end_program  . . . . . . . . .	L Near	 000008CC _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000154 Public STDCALL
  initialLoop  . . . . . . . . .	L Near	 00000016 _TEXT	
  conti  . . . . . . . . . . . .	L Near	 00000030 _TEXT	
  GameLoop . . . . . . . . . . .	L Near	 00000085 _TEXT	
  endLoop  . . . . . . . . . . .	L Near	 000000E5 _TEXT	
  Refresh  . . . . . . . . . . .	L Near	 000000F0 _TEXT	
  CheckInput . . . . . . . . . .	L Near	 00000108 _TEXT	
  SkipRefresh  . . . . . . . . .	L Near	 0000013C _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readInputEndscr  . . . . . . . .	P Near	 0000063B _TEXT	Length= 0000006C Public STDCALL
  confirm  . . . . . . . . . . .	L Near	 00000662 _TEXT	
  checkA . . . . . . . . . . . .	L Near	 0000066E _TEXT	
  checkD . . . . . . . . . . . .	L Near	 00000688 _TEXT	
  no_key_pressed . . . . . . . .	L Near	 000006A2 _TEXT	
readInputInitialscr  . . . . . .	P Near	 0000052E _TEXT	Length= 0000006C Public STDCALL
  confirm  . . . . . . . . . . .	L Near	 00000555 _TEXT	
  checkW . . . . . . . . . . . .	L Near	 00000561 _TEXT	
  checkS . . . . . . . . . . . .	L Near	 0000057B _TEXT	
  no_key_pressed . . . . . . . .	L Near	 00000595 _TEXT	
readPlayerMoveInput  . . . . . .	P Near	 00000237 _TEXT	Length= 000000CC Public STDCALL
  CheckShift . . . . . . . . . .	L Near	 0000025F _TEXT	
  CheckA . . . . . . . . . . . .	L Near	 0000027A _TEXT	
  CheckD . . . . . . . . . . . .	L Near	 000002B4 _TEXT	
  CheckESC . . . . . . . . . . .	L Near	 000002EE _TEXT	
  EndInput . . . . . . . . . . .	L Near	 00000302 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
updateLevel  . . . . . . . . . .	P Near	 000003D0 _TEXT	Length= 0000007E Public STDCALL
updatePhysics  . . . . . . . . .	P Near	 00000154 _TEXT	Length= 00000075 Public STDCALL
  EndPhysics . . . . . . . . . .	L Near	 000001C6 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TimerXY  . . . . . . . . . . . .	COORD	 0000003E _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000061 _DATA	
bytesRead  . . . . . . . . . . .	DWord	 0000004A _DATA	
bytesWritten . . . . . . . . . .	DWord	 00000017 _DATA	
cellsWritten . . . . . . . . . .	DWord	 0000002A _DATA	
charRead . . . . . . . . . . . .	DWord	 0000000F _DATA	
coinAttribute  . . . . . . . . .	Word	 00001C4F _DATA	
coinCoord  . . . . . . . . . . .	COORD	 00001C49 _DATA	
coinGenerated  . . . . . . . . .	Byte	 00001C4D _DATA	
coinGet  . . . . . . . . . . . .	Byte	 00001C59 _DATA	
coinGotCoord1  . . . . . . . . .	COORD	 00001C55 _DATA	
coinGot  . . . . . . . . . . . .	DWord	 00001C51 _DATA	
coinSeed . . . . . . . . . . . .	DWord	 00001C45 _DATA	
coinSymbol . . . . . . . . . . .	Byte	 00001C4E _DATA	
count  . . . . . . . . . . . . .	DWord	 0000001B _DATA	
currentLevel . . . . . . . . . .	DWord	 00000042 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
elapsedTime  . . . . . . . . . .	DWord	 00000036 _DATA	
endCoinGotCoord  . . . . . . . .	COORD	 00001C3D _DATA	
endCoinGot . . . . . . . . . . .	DWord	 00001C02 _DATA	
endExitLeftPos . . . . . . . . .	COORD	 00001C25 _DATA	
endExitLeftSymbol  . . . . . . .	DWord	 00001C29 _DATA	
endExitRightPos  . . . . . . . .	COORD	 00001C31 _DATA	
endExitRightSymbol . . . . . . .	DWord	 00001C35 _DATA	
endKeyPos  . . . . . . . . . . .	Byte	 00001C00 _DATA	
endStartLeftPos  . . . . . . . .	COORD	 00001C0D _DATA	
endStartLeftSymbol . . . . . . .	DWord	 00001C11 _DATA	
endStartRightPos . . . . . . . .	COORD	 00001C19 _DATA	
endStartRightSymbol  . . . . . .	DWord	 00001C1D _DATA	
endTimeCoord . . . . . . . . . .	COORD	 00001C41 _DATA	
endTime  . . . . . . . . . . . .	DWord	 00001C06 _DATA	
endconfirm . . . . . . . . . . .	Byte	 00001C01 _DATA	
endscrfile . . . . . . . . . . .	Byte	 00001BF5 _DATA	
escConfirm . . . . . . . . . . .	Byte	 00000029 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00000046 _DATA	
gamescrfile  . . . . . . . . . .	Byte	 00000052 _DATA	
gravity  . . . . . . . . . . . .	Number	 00000001h   
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
initialExitLeftPos . . . . . . .	COORD	 00001BDD _DATA	
initialExitLeftSymbol  . . . . .	DWord	 00001BE1 _DATA	
initialExitRightPos  . . . . . .	COORD	 00001BE9 _DATA	
initialExitRightSymbol . . . . .	DWord	 00001BED _DATA	
initialKeyPos  . . . . . . . . .	Byte	 00001BC3 _DATA	
initialStartLeftPos  . . . . . .	COORD	 00001BC5 _DATA	
initialStartLeftSymbol . . . . .	DWord	 00001BC9 _DATA	
initialStartRightPos . . . . . .	COORD	 00001BD1 _DATA	
initialStartRightSymbol  . . . .	DWord	 00001BD5 _DATA	
initialconfirm . . . . . . . . .	Byte	 00001BC4 _DATA	
initialscrfile . . . . . . . . .	Byte	 00001BB9 _DATA	
isDead . . . . . . . . . . . . .	Byte	 00001C0B _DATA	
isRunning  . . . . . . . . . . .	Byte	 00000025 _DATA	
jumpForce  . . . . . . . . . . .	Number	 00000004h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
needsRefresh . . . . . . . . . .	Byte	 00001C0A _DATA	
onPlatform . . . . . . . . . . .	Byte	 00000028 _DATA	
outputHandle . . . . . . . . . .	DWord	 00000013 _DATA	
platformBuffer . . . . . . . . .	Byte	 00000001 _DATA	
platformCoord  . . . . . . . . .	COORD	 0000000B _DATA	
platformLevel  . . . . . . . . .	Word	 00000026 _DATA	
playerAttributes . . . . . . . .	Word	 0000002E _DATA	
playerSize . . . . . . . . . . .	Number	 00000001h   
playerXY . . . . . . . . . . . .	COORD	 0000001F _DATA	
player . . . . . . . . . . . . .	Byte	 00000000 _DATA	
preSeed  . . . . . . . . . . . .	DWord	 00001C5E _DATA	
prevKeyPos . . . . . . . . . . .	Byte	 00001C0C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
screenBytesWritten . . . . . . .	DWord	 0000004E _DATA	
seed . . . . . . . . . . . . . .	DWord	 00001C5A _DATA	
startTime  . . . . . . . . . . .	DWord	 00000032 _DATA	
timeLimit  . . . . . . . . . . .	DWord	 0000003A _DATA	
updateInterval . . . . . . . . .	Word	 00000030 _DATA	
velocityY  . . . . . . . . . . .	Word	 00000023 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
