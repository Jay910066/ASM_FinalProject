Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/23/24 15:48:48
main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDELIB kernel32.lib

				; 定義常數
 = 00000001			playerSize = 1
 = 00000001			gravity = 1
 = 00000004			jumpForce = 4

 00000000			.data
				; 玩家資料
 00000000 50			player BYTE 'P'
 00000001  00000001 [		playerAttributes WORD playerSize DUP(0bh)
	    000B
	   ]
 00000003 000A 0005		playerXY COORD <10,5>
 00000007 0000			velocityY SWORD 0
 00000009 00			isRunning BYTE 0

				; 用於讀取畫面上的字符
 0000000A  0000000A [		platformBuffer BYTE 10 DUP(?)
	    00
	   ]
 00000014 0000 0000		platformCoord COORD <0,0>
 00000018 00000000		charRead DWORD ?

				; 用於繪製玩家和金幣的字符
 0000001C 00000000		outputHandle DWORD 0
 00000020 00000000		bytesWritten DWORD 0
 00000024 00000000		count DWORD 0

				; 用於平台相關的判斷
 00000028 0018			platformLevel WORD 24
 0000002A 01			onPlatform BYTE 1

				; 用於判斷是否進入結算畫面
 0000002B 00			escConfirm byte 0


				;cellsWritten DWORD ?

 0000002C 0032			updateInterval WORD 50 ; 50ms each update

 0000002E 00000000		startTime DWORD ?
 00000032 00000000		elapsedTime DWORD ?
 00000036 00000258		timeLimit DWORD 600 ; 600 seconds
 0000003A 0000 0000		TimerXY COORD <0,0>

 0000003E 00000001		currentLevel DWORD 1
 00000042 00			isCheatKeyPressed BYTE 0

				;畫面繪製
 00000043 00000000		fileHandle HANDLE ?
 00000047 00000000		bytesRead DWORD ?
 0000004B 00000000		screenBytesWritten DWORD ?

				;遊戲畫面資料
 0000004F 67 61 6D 65 66	gamescrfile BYTE 'gamefield2.txt',0
	   69 65 6C 64 32
	   2E 74 78 74 00

				;初始畫面資料
 0000005E  00001B58 [		buffer BYTE 7000 DUP(?)
	    00
	   ]
 00001BB6 73 74 61 72 74	initialscrfile BYTE 'start.txt',0
	   2E 74 78 74 00
 00001BC0 00			initialKeyPos Byte 0
 00001BC1 00			initialconfirm Byte 0

 00001BC2 0031 0011		initialStartLeftPos COORD <49,17>
 00001BC6 0000003E		initialStartLeftSymbol DWORD '>',0
	   00000000
 00001BCE 0049 0011		initialStartRightPos COORD <73,17>
 00001BD2 0000003C		initialStartRightSymbol DWORD '<',0
	   00000000

 00001BDA 0031 0017		initialExitLeftPos COORD <49,23>
 00001BDE 0000003E		initialExitLeftSymbol DWORD '>',0
	   00000000
 00001BE6 0049 0017		initialExitRightPos COORD <73,23>
 00001BEA 0000003C		initialExitRightSymbol DWORD '<',0
	   00000000

				;結算畫面資料
 00001BF2 66 69 6E 69 73	endscrfile BYTE 'finish.txt',0
	   68 2E 74 78 74
	   00
 00001BFD 00			endKeyPos Byte 0
 00001BFE 00			endconfirm Byte 0
 00001BFF 00000000		endCoinGot DWORD 0
 00001C03 00000000		endTime DWORD 0
 00001C07 01			needsRefresh BYTE 1
 00001C08 00			isDead BYTE 0
 00001C09 00			prevKeyPos BYTE 0

 00001C0A 001E 0014		endStartLeftPos COORD <30,20>
 00001C0E 0000003E		endStartLeftSymbol DWORD '>',0
	   00000000
 00001C16 0037 0014		endStartRightPos COORD <55,20>
 00001C1A 0000003C		endStartRightSymbol DWORD '<',0
	   00000000

 00001C22 0044 0014		endExitLeftPos COORD <68,20>
 00001C26 0000003E		endExitLeftSymbol DWORD '>',0
	   00000000
 00001C2E 005D 0014		endExitRightPos COORD <93,20>
 00001C32 0000003C		endExitRightSymbol DWORD '<',0
	   00000000
 00001C3A 002B 0007		endCoinGotCoord COORD <43,7>
 00001C3E 002B 0004		endTimeCoord COORD <43,4>

				;金幣生成資料
 00001C42 00000001		coinSeed DWORD 1
 00001C46 0000 0000		coinCoord COORD <0,0>
 00001C4A 00			coinGenerated byte 0
 00001C4B 24			coinSymbol byte '$'
 00001C4C 000E			coinAttribute WORD 0Eh
 00001C4E 00000000		coinGot DWORD 0
 00001C52 0007 0002		coinGotCoord1 COORD <7,2>
 00001C56 00			coinGet byte 0
 00001C57 00000000		seed DWORD ?
 00001C5B 00000000		preSeed DWORD 0

 00000000			.code
					SetConsoleOutputCP PROTO STDCALL :DWORD
					GetAsyncKeyState PROTO STDCALL :DWORD
					ReadConsoleOutputCharacterA PROTO STDCALL :DWORD, :PTR BYTE, :DWORD, :COORD, :PTR DWORD
					drawScreen PROTO screenFileName :PTR BYTE

				; 主程式
 00000000			main PROC
					; Get the console ouput handle
					INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000007  A3 0000001C R		mov outputHandle, eax	; save console handle

 0000000C			initialLoop:
 0000000C  E8 00000000 E		call Clrscr
 00000011  E8 00000482			call displayInitialscr
 00000016  E8 0000051E			call readInputInitialscr
 0000001B  80 3D 00001BC1 R		cmp Initialconfirm, 1
	   01
 00000022  74 02			je conti
 00000024  EB E6			jmp initialLoop

 00000026			conti:
					INVOKE GetTickCount
 0000002B  A3 0000002E R		mov startTime, eax
 00000030  66| C7 05			mov playerXY.X, 10
	   00000003 R
	   000A
 00000039  66| C7 05			mov playerXY.Y, 5
	   00000005 R
	   0005
 00000042  66| C7 05			mov velocityY, 0
	   00000007 R
	   0000
 0000004B  C7 05 0000003E R		mov currentLevel, 1
	   00000001
 00000055  C6 05 00000058 R		mov gamescrfile[9], '1'
	   31
 0000005C  C6 05 00001C08 R		mov isDead, 0
	   00
 00000063  C6 05 0000002B R		mov escConfirm, 0
	   00
 0000006A  C6 05 00001BFE R		mov endConfirm, 0
	   00
 00000071  C7 05 00001C4E R		mov coinGot, 0
	   00000000
 0000007B  C6 05 00001C4A R		mov coinGenerated, 0
	   00
					
 00000082			GameLoop:
 00000082  E8 00000000 E		call Clrscr
 00000087  E8 000000C5			call updatePhysics
					INVOKE drawScreen, ADDR gamescrfile
 00000096  E8 00000265			call drawPlayer
 0000009B  E8 00000126			call checkPlatformLevel
 000000A0  E8 000003B4			call displayTime
 000000A5  E8 000007F8			call displayCoinGot
 000000AA  E8 00000185			call readPlayerMoveInput
 000000AF  E8 0000091D			call getCoin
 000000B4  E8 000005F9			call generateCoins
 000000B9  E8 00000808			call cheatInput			; 按C鍵進入下一關
 000000BE  E8 0000030A			call updateLevel
 000000C3  E8 0000094D			call endGame
 000000C8  80 3D 0000002B R		cmp  escConfirm, 1
	   01
 000000CF  74 1C			je Refresh
					invoke Sleep, updateInterval
 000000E0  EB A0			jmp GameLoop

 000000E2			endLoop:
 000000E2  80 3D 00001C07 R		cmp needsRefresh, 1
	   01
 000000E9  74 02			je Refresh
 000000EB  EB 18			jmp CheckInput

 000000ED			Refresh:
 000000ED  E8 00000000 E		call Clrscr
 000000F2  E8 000004AE			call displayEndscr
 000000F7  E8 0000082E			call displayEndData
 000000FC  C6 05 00001C07 R		mov needsRefresh, 0
	   00
 00000103  EB 00			jmp CheckInput

 00000105			CheckInput:
 00000105  E8 0000053C			call readInputEndscr
 0000010A  80 3D 00001BFE R		cmp endconfirm, 1
	   01
 00000111  0F 84 FFFFFF0F		je conti
 00000117  A0 00001BFD R		mov al, endKeyPos
 0000011C  8A 25 00001C09 R		mov ah, prevKeyPos
 00000122  3A E0			cmp ah, al
 00000124  74 13			je SkipRefresh
 00000126  C6 05 00001C07 R		mov needsRefresh, 1
	   01
 0000012D  8A 25 00001BFD R		mov ah, endKeyPos
 00000133  88 25 00001C09 R		mov prevKeyPos, ah

 00000139			SkipRefresh:
					invoke Sleep, updateInterval
 00000148  EB 98			jmp endLoop

					exit
 00000151			main ENDP

				; 更新重力和玩家位置
 00000151			updatePhysics PROC uses eax ebx
					; 檢查是否超出螢幕上方
					.IF playerXY.Y >= 60000
 0000015E  66| C7 05				mov playerXY.Y, 0
	   00000005 R
	   0000
 00000167  66| C7 05				mov platformLevel, 0
	   00000028 R
	   0000
					.ENDIF

					; 檢查是否掉出螢幕下方
					.IF playerXY.Y >= 26
 0000017A  C6 05 00001C08 R			mov isDead, 1
	   01
					.ENDIF
				    ; 更新玩家的 Y 座標
 00000181  66| A1		    mov ax, velocityY
	   00000007 R
 00000187  66| 01 05		    add playerXY.Y, ax        ; 根據垂直速度更新位置
	   00000005 R

				    ; 應用重力（加速垂直速度）
 0000018E  66| 83 05		    add velocityY, gravity    ; 重力影響：速度越來越快
	   00000007 R 01

				    ; 檢查是否低於地面
 00000196  66| A1		    mov ax, playerXY.Y
	   00000005 R
 0000019C  66| 3B 05		    cmp ax, platformLevel
	   00000028 R
 000001A3  7E 1E			jle EndPhysics            ; 如果未超過地面，跳過地面處理

				    ; 如果超出地面，重置到地面
 000001A5  66| A1		    mov ax, platformLevel
	   00000028 R
 000001AB  66| A3		    mov playerXY.Y, ax        ; 將玩家重置到地面
	   00000005 R
 000001B1  66| C7 05		    mov velocityY, 0          ; 停止垂直運動
	   00000007 R
	   0000
 000001BA  C6 05 0000002A R	    mov onPlatform, 1           ; 標記玩家在地面上
	   01
 000001C1  EB 00		    jmp EndPhysics

 000001C3			EndPhysics:
				    ret
 000001C6			updatePhysics ENDP

				; 檢查平台高度
 000001C6			checkPlatformLevel PROC uses eax ebx ecx edx
 000001CA  66| A1			mov ax, playerXY.X
	   00000003 R
 000001D0  66| 8B 1D			mov bx, playerXY.Y
	   00000005 R
 000001D7  66| 43			inc bx
 000001D9  66| A3			mov platformCoord.X, ax
	   00000014 R
 000001DF  66| 89 1D			mov platformCoord.Y, bx
	   00000016 R

 000001E6  66| B9 001E			mov cx, 30
 000001EA			detectPlatform:
 000001EA  66| 8B D1			mov dx, cx

					INVOKE ReadConsoleOutputCharacterA,
					outputHandle,
					ADDR platformBuffer,
					1,
					platformCoord,
					ADDR charRead

 0000020A  A0 0000000A R		mov al, platformBuffer
					.IF al != 32
 00000213  66| A1				mov ax, platformCoord.Y
	   00000016 R
 00000219  66| 48				dec ax
 0000021B  66| A3				mov platformLevel, ax
	   00000028 R
 00000221  EB 0C				jmp EndCheck
					.ENDIF
 00000223  66| FF 05			inc platformCoord.Y
	   00000016 R
 0000022A  66| 8B CA			mov cx, dx
 0000022D  E2 BB			loop detectPlatform

					; 輸出Debug訊息
				;showINFO:
					;mov dl, 0
					;mov dh, 0
					;call gotoxy
					;call WriteDec

 0000022F			EndCheck:
					ret
 00000234			checkPlatformLevel ENDP

				; 讀取玩家移動輸入
 00000234			readPlayerMoveInput PROC
				    ; 檢查W鍵（向上移動）
				    INVOKE GetAsyncKeyState, 'W'
 0000023B  66| A9 8000		    test ax, 8000h
 0000023F  74 1B		    jz CheckShift
 00000241  80 3D 0000002A R		cmp onPlatform, 1
	   01
 00000248  75 12			jne CheckShift
 0000024A  66| B8 0004			mov ax, jumpForce
 0000024E  66| 29 05			sub velocityY, ax
	   00000007 R
 00000255  C6 05 0000002A R		mov onPlatform, 0
	   00
 0000025C			CheckShift:
					; 檢查Shift鍵（加速）
 0000025C  C6 05 00000009 R		mov isRunning, 0
	   00
					INVOKE GetAsyncKeyState, VK_SHIFT
 0000026A  66| A9 8000			test ax, 8000h
 0000026E  74 07			jz CheckA
 00000270  C6 05 00000009 R		mov isRunning, 1
	   01
 00000277			CheckA:
				    ; 檢查A鍵（向左移動）
				    INVOKE GetAsyncKeyState, 'A'
 0000027E  66| A9 8000		    test ax, 8000h
 00000282  74 2D		    jz CheckD
				    .IF isRunning == 1
 0000028D  66| 83 2D				sub playerXY.X, 2
	   00000003 R 02
					.ELSE
 00000297  66| FF 0D				dec playerXY.X
	   00000003 R
					.ENDIF
											
					.IF playerXY.X <= 0
 000002A8  66| C7 05				mov playerXY.X, 1
	   00000003 R
	   0001
					.ENDIF

 000002B1			CheckD:
				    ; 檢查D鍵（向右移動）
				    INVOKE GetAsyncKeyState, 'D'
 000002B8  66| A9 8000		    test ax, 8000h
 000002BC  74 2D		    jz CheckESC
				    .IF isRunning == 1
 000002C7  66| 83 05				add playerXY.X, 2
	   00000003 R 02
					.ELSE
 000002D1  66| FF 05				inc playerXY.X
	   00000003 R
					.ENDIF
					.IF playerXY.X >= 119
 000002E2  66| C7 05				mov playerXY.X, 118
	   00000003 R
	   0076
					.ENDIF

 000002EB			CheckESC:
				    ; 檢查ESC鍵（退出遊戲）
				    INVOKE GetAsyncKeyState, VK_ESCAPE
 000002F2  66| A9 8000		    test ax, 8000h
 000002F6  74 07		    jz EndInput
 000002F8  C6 05 0000002B R	    mov escConfirm,1
	   01

 000002FF			EndInput:
 000002FF  C3				ret
 00000300			readPlayerMoveInput ENDP

				; 繪製玩家
 00000300			drawPlayer PROC
					INVOKE WriteConsoleOutputAttribute,
					outputHandle, 
					OFFSET playerAttributes,
					playerSize, 
					playerXY,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle,
					OFFSET player,
					playerSize,
					playerXY,
					OFFSET count
 0000033A  C3				ret
 0000033B			drawPlayer ENDP

				; 繪製畫面
 0000033B			drawScreen PROC uses eax ebx ecx edx, screenFileName:PTR BYTE
				    ;打開文字檔案
					INVOKE CreateFile, screenFileName, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL 
 0000035C  A3 00000043 R		mov fileHandle, eax

 00000361			ReadLoop:
					;使用UTF-8編碼，顯示符號
					INVOKE SetConsoleOutputCP, 65001

					;讀取檔案
					INVOKE ReadFile, fileHandle, ADDR buffer, SIZEOF buffer, ADDR bytesRead, NULL

					;畫面更新及輸出檔案
 00000387  E8 00000000 E		call Clrscr
					INVOKE SetFilePointer, fileHandle, 0, NULL, FILE_BEGIN
					INVOKE WriteConsole, outputHandle, ADDR buffer, bytesRead, ADDR screenBytesWritten, NULL

 000003BA			EndDraw:
					;關閉檔案
				    INVOKE CloseHandle, fileHandle
				    ret
 000003CD			drawScreen ENDP

				; 更新關卡
 000003CD			updateLevel PROC
					.IF coinGot == 5 && currentLevel == 1
 000003DF  C7 05 0000003E R			mov currentLevel, 2
	   00000002
 000003E9  C6 05 00000058 R			mov gamescrfile[9], '2'
	   32
 000003F0  66| C7 05				mov playerXY.X, 10
	   00000003 R
	   000A
 000003F9  66| C7 05				mov playerXY.Y, 5
	   00000005 R
	   0005
 00000402  66| C7 05				mov velocityY, 0
	   00000007 R
	   0000
 0000040B  C6 05 00001C4A R			mov coinGenerated,0
	   00
					.ELSEIF coinGot == 8 && currentLevel == 2
 00000426  C7 05 0000003E R			mov currentLevel, 3
	   00000003
 00000430  C6 05 00000058 R			mov gamescrfile[9], '3'
	   33
 00000437  66| C7 05				mov playerXY.X, 10
	   00000003 R
	   000A
 00000440  66| C7 05				mov playerXY.Y, 5
	   00000005 R
	   0005
 00000449  66| C7 05				mov velocityY, 0
	   00000007 R
	   0000
 00000452  C6 05 00001C4A R			mov coinGenerated,0
	   00
					.ENDIF

 00000459			updateLevel ENDP

				; 顯示剩餘時間
 00000459			displayTime PROC uses eax ebx ecx edx
					INVOKE GetTickCount
 00000462  2B 05 0000002E R		sub eax, startTime
 00000468  99				cdq
 00000469  BB 000003E8			mov ebx, 1000
 0000046E  F7 F3			div ebx
 00000470  A3 00000032 R		mov elapsedTime, eax
 00000475  A1 00000036 R		mov eax, timeLimit
 0000047A  2B 05 00000032 R		sub eax, elapsedTime
 00000480  A3 00001C03 R		mov endTime, eax
 00000485  B2 06			mov dl, 6
 00000487  B6 01			mov dh, 1
 00000489  E8 00000000 E		call gotoxy
 0000048E  E8 00000000 E		call WriteDec
					ret
 00000498			displayTime ENDP

				; 顯示初始畫面
 00000498			displayInitialscr PROC uses eax ebx ecx edx
				    INVOKE drawScreen, ADDR initialscrfile
 000004A6  80 3D 00001BC0 R		cmp initialKeyPos, 1
	   01
 000004AD  74 3C			je Pos2 

 000004AF			Pos1:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialStartLeftSymbol,
					1, 
					initialStartLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialStartRightSymbol,
					1, 
					initialStartRightPos,
					OFFSET count
 000004E9  EB 3A			jmp conti

 000004EB			Pos2:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialExitLeftSymbol,
					1, 
					initialExitLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialExitRightSymbol,
					1, 
					initialExitRightPos,
					OFFSET count

 00000525			conti:
					INVOKE Sleep, updateInterval

 00000534			EndDisplay:
				    ret
 00000539			displayInitialscr ENDP

				; 讀取初始畫面輸入
 00000539			readInputInitialscr PROC uses eax ebx ecx edx
					INVOKE GetAsyncKeyState, VK_RETURN
 00000544  A9 00008000			test eax, 8000h                     
 00000549  74 21		    jz checkW
 0000054B  80 3D 00001BC0 R		cmp initialKeyPos, 0 ;判斷按鍵位置
	   00
 00000552  74 0C			je confirm
 00000554  E8 00000000 E		call Clrscr
					INVOKE ExitProcess, 0

 00000560			confirm:
 00000560  C6 05 00001BC1 R		mov initialconfirm, 1
	   01
					ret

 0000056C			checkW:
					INVOKE GetAsyncKeyState, 'W'
 00000573  A9 00008000			test eax, 8000h                     
 00000578  74 0C		    jz checkS
 0000057A  C6 05 00001BC0 R		mov initialKeyPos, 0
	   00
					ret

 00000586			checkS:
					INVOKE GetAsyncKeyState, 'S'
 0000058D  A9 00008000			test eax, 8000h                     
 00000592  74 0C		    jz no_key_pressed
 00000594  C6 05 00001BC0 R		mov initialKeyPos, 1
	   01
					ret

 000005A0			no_key_pressed:
					ret
 000005A5			readInputInitialscr ENDP

				; 顯示結算畫面
 000005A5			displayEndscr PROC uses eax ebx ecx edx
				    INVOKE drawScreen, ADDR endscrfile
 000005B3  80 3D 00001BFD R		cmp endKeyPos, 1
	   01
 000005BA  74 3C			je Pos2 

 000005BC			Pos1:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endStartLeftSymbol,
					1, 
					endStartLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endStartRightSymbol,
					1, 
					endStartRightPos,
					OFFSET count
 000005F6  EB 3A			jmp conti

 000005F8			Pos2:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endExitLeftSymbol,
					1, 
					endExitLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endExitRightSymbol,
					1, 
					endExitRightPos,
					OFFSET count

 00000632			conti:
					INVOKE Sleep, updateInterval

 00000641			EndDisplay:
				    ret
 00000646			displayEndscr ENDP

				; 讀取結算畫面輸入
 00000646			readInputEndscr PROC uses eax ebx ecx edx
					INVOKE GetAsyncKeyState, VK_RETURN
 00000651  A9 00008000			test eax, 8000h                     
 00000656  74 21		    jz checkA
 00000658  80 3D 00001BFD R		cmp endKeyPos, 0 ;判斷按鍵位置
	   00
 0000065F  74 0C			je confirm
 00000661  E8 00000000 E		call Clrscr
					INVOKE ExitProcess, 0

 0000066D			confirm:
 0000066D  C6 05 00001BFE R		mov endconfirm, 1
	   01
					ret

 00000679			checkA:
					INVOKE GetAsyncKeyState, 'A'
 00000680  A9 00008000			test eax, 8000h                     
 00000685  74 0C		    jz checkD
 00000687  C6 05 00001BFD R		mov endKeyPos, 0
	   00
					ret

 00000693			checkD:
					INVOKE GetAsyncKeyState, 'D'
 0000069A  A9 00008000			test eax, 8000h                     
 0000069F  74 0C		    jz no_key_pressed
 000006A1  C6 05 00001BFD R		mov endKeyPos, 1
	   01
					ret

 000006AD			no_key_pressed:
					ret
 000006B2			readInputEndscr ENDP

				; 生成金幣
 000006B2			generateCoins PROC uses eax ebx ecx edx
 000006B6  80 3D 00001C4A R		cmp coinGenerated, 1
	   01
 000006BD  0F 84 00000199		je output
 000006C3  83 3D 0000003E R		cmp currentLevel, 2
	   02
 000006CA  0F 84 00000095		je Level2
 000006D0  83 3D 0000003E R		cmp currentLevel, 3
	   03
 000006D7  0F 84 0000010D		je Level3
 000006DD			Level1:
 000006DD  E8 00000362			call generateRandomSeed
 000006E2  83 3D 00001C42 R		cmp coinSeed, 0
	   00
 000006E9  74 14			je Pos1_1
 000006EB  83 3D 00001C42 R		cmp coinSeed, 1
	   01
 000006F2  74 22			je Pos1_2
 000006F4  83 3D 00001C42 R		cmp coinSeed, 2
	   02
 000006FB  74 30			je Pos1_3
 000006FD  EB 45			jmp Pos1_4

 000006FF			Pos1_1:
 000006FF  66| C7 05			mov coinCoord.x, 15
	   00001C46 R
	   000F
 00000708  66| C7 05			mov coinCoord.y, 3
	   00001C48 R
	   0003
 00000711  E9 00000146			jmp output

 00000716			Pos1_2:
 00000716  66| C7 05			mov coinCoord.x, 90
	   00001C46 R
	   005A
 0000071F  66| C7 05			mov coinCoord.y, 4
	   00001C48 R
	   0004
 00000728  E9 0000012F			jmp output

 0000072D			Pos1_3:
 0000072D  66| C7 05			mov coinCoord.x, 40
	   00001C46 R
	   0028
 00000736  66| C7 05			mov coinCoord.y, 14
	   00001C48 R
	   000E
 0000073F  E9 00000118			jmp output

 00000744			Pos1_4:
 00000744  66| C7 05			mov coinCoord.x, 98
	   00001C46 R
	   0062
 0000074D  66| C7 05			mov coinCoord.y, 15
	   00001C48 R
	   000F
 00000756  C7 05 00001C42 R		mov coinSeed, 0
	   00000000
 00000760  E9 000000F7			jmp output

 00000765			Level2:
 00000765  E8 000002DA			call generateRandomSeed
 0000076A  83 3D 00001C42 R		cmp coinSeed, 0
	   00
 00000771  74 14			je Pos2_1
 00000773  83 3D 00001C42 R		cmp coinSeed, 1
	   01
 0000077A  74 22			je Pos2_2
 0000077C  83 3D 00001C42 R		cmp coinSeed, 2
	   02
 00000783  74 30			je Pos2_3
 00000785  EB 45			jmp Pos2_4
					

 00000787			Pos2_1:
 00000787  66| C7 05			mov coinCoord.x, 29
	   00001C46 R
	   001D
 00000790  66| C7 05			mov coinCoord.y, 3
	   00001C48 R
	   0003
 00000799  E9 000000BE			jmp output

 0000079E			Pos2_2:
 0000079E  66| C7 05			mov coinCoord.x, 55
	   00001C46 R
	   0037
 000007A7  66| C7 05			mov coinCoord.y, 15
	   00001C48 R
	   000F
 000007B0  E9 000000A7			jmp output

 000007B5			Pos2_3:
 000007B5  66| C7 05			mov coinCoord.x, 114
	   00001C46 R
	   0072
 000007BE  66| C7 05			mov coinCoord.y, 4
	   00001C48 R
	   0004
 000007C7  E9 00000090			jmp output

 000007CC			Pos2_4:
 000007CC  66| C7 05			mov coinCoord.x, 78
	   00001C46 R
	   004E
 000007D5  66| C7 05			mov coinCoord.y, 11
	   00001C48 R
	   000B
 000007DE  C7 05 00001C42 R		mov coinSeed, 0
	   00000000
 000007E8  EB 72			jmp output

 000007EA			Level3:
 000007EA  E8 00000255			call generateRandomSeed
 000007EF  83 3D 00001C42 R		cmp coinSeed, 0
	   00
 000007F6  74 14			je Pos3_1
 000007F8  83 3D 00001C42 R		cmp coinSeed, 1
	   01
 000007FF  74 1F			je Pos3_2
 00000801  83 3D 00001C42 R		cmp coinSeed, 2
	   02
 00000808  74 2A			je Pos3_3
 0000080A  EB 3C			jmp Pos3_4

 0000080C			Pos3_1:
 0000080C  66| C7 05			mov coinCoord.x, 71
	   00001C46 R
	   0047
 00000815  66| C7 05			mov coinCoord.y, 1
	   00001C48 R
	   0001
 0000081E  EB 3C			jmp output

 00000820			Pos3_2:
 00000820  66| C7 05			mov coinCoord.x, 8
	   00001C46 R
	   0008
 00000829  66| C7 05			mov coinCoord.y, 9
	   00001C48 R
	   0009
 00000832  EB 28			jmp output

 00000834			Pos3_3:
 00000834  66| C7 05			mov coinCoord.x, 103
	   00001C46 R
	   0067
 0000083D  66| C7 05			mov coinCoord.y, 8
	   00001C48 R
	   0008
 00000846  EB 14			jmp output

 00000848			Pos3_4:
 00000848  66| C7 05			mov coinCoord.x, 52
	   00001C46 R
	   0034
 00000851  66| C7 05			mov coinCoord.y, 14
	   00001C48 R
	   000E
 0000085A  EB 00			jmp output

 0000085C			output:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle,
					OFFSET coinSymbol,
					1,
					coinCoord,
					OFFSET count

					INVOKE WriteConsoleOutputAttribute,
					outputHandle, 
					OFFSET coinAttribute,
					1, 
					coinCoord,
					OFFSET count

 00000896  C6 05 00001C4A R		mov coinGenerated, 1
	   01
					ret
 000008A2			generateCoins ENDP

				; 顯示金幣數量
 000008A2			displayCoinGot PROC uses eax ebx ecx edx
				    invoke SetConsoleCursorPosition,outputHandle, coinGotCoord1
 000008B7  A1 00001C4E R		mov eax, coinGot
 000008BC  E8 00000000 E		call WriteDec
					ret
 000008C6			displayCoinGot ENDP

				; 快速通關鈕
 000008C6			cheatInput PROC
					INVOKE GetAsyncKeyState, 'C'
 000008CD  A9 00008000			test eax, 8000h
 000008D2  74 4E			jz notPressed
					.IF isCheatKeyPressed == 0
						.IF currentLevel == 1
 000008E6  C7 05 00001C4E R				mov coinGot, 5
	   00000005
						.ELSEIF currentLevel == 2
 000008FB  C7 05 00001C4E R				mov coinGot, 8
	   00000008
						.ELSEIF currentLevel == 3
 00000910  C7 05 00001C4E R				mov coinGot, 12
	   0000000C
						.ENDIF
 0000091A  C6 05 00000042 R			mov isCheatKeyPressed, 1
	   01
					.ENDIF
 00000921  C3				ret
					
 00000922			notPressed:
 00000922  C6 05 00000042 R		mov isCheatKeyPressed, 0
	   00
 00000929  C3				ret
 0000092A			cheatInput ENDP

				; 顯示結算資訊
 0000092A			displayEndData PROC uses eax ebx ecx edx
 0000092E			coin:
 0000092E  B2 2B			mov dl, 43
 00000930  B6 07			mov dh, 7
 00000932  E8 00000000 E		call gotoxy
 00000937  A1 00001C4E R		mov eax, CoinGot
 0000093C  E8 00000000 E		call WriteDec

 00000941			time:
 00000941  B2 2B			mov dl, 43
 00000943  B6 04			mov dh, 4
 00000945  E8 00000000 E		call gotoxy
 0000094A  A1 00001C03 R		mov eax, endTime
 0000094F  E8 00000000 E		call WriteDec

 00000954			point:
 00000954  B2 2B			mov dl, 43
 00000956  B6 0A			mov dh, 10
 00000958  E8 00000000 E		call gotoxy
					.IF isDead == 1
						.IF currentLevel == 1
 0000096F  B8 00000000					mov eax, 0
						.ELSEIF currentLevel == 2
 0000097F  B8 00000005					mov eax, 5
						.ELSEIF currentLevel == 3
 0000098F  B8 00000008					mov eax, 8
						.ENDIF
					.ELSE
 00000996  A1 00001C4E R			mov eax, coinGot
					.ENDIF
 0000099B  F7 25 00001C03 R		mul endTime
 000009A1  E8 00000000 E		call WriteDec

 000009A6			level:
 000009A6  B2 2B			mov dl, 43
 000009A8  B6 0D			mov dh, 13
 000009AA  E8 00000000 E		call gotoxy
 000009AF  A1 0000003E R		mov eax, currentLevel
					.IF isDead == 1
 000009BD  48					dec eax
					.ENDIF
 000009BE  E8 00000000 E		call WriteDec
					
 000009C3  B2 00			mov dl, 0
 000009C5  B6 00			mov dh, 0
 000009C7  E8 00000000 E		call gotoxy
					ret
 000009D1			displayEndData ENDP

				; 判斷是否取得金幣
 000009D1			getCoin PROC uses eax ebx ecx edx
 000009D5			compareX:
 000009D5  66| A1			mov ax, playerXY.x
	   00000003 R
 000009DB  66| 3B 05			cmp ax, coinCoord.x
	   00001C46 R
 000009E2  75 25			jne not_equal

 000009E4			compareY:
 000009E4  66| A1			mov ax, playerXY.y
	   00000005 R
 000009EA  66| 3B 05			cmp ax, coinCoord.y
	   00001C48 R
 000009F1  75 16			jne not_equal

 000009F3			equal:
 000009F3  C6 05 00001C56 R		mov coinGet, 1
	   01
 000009FA  FF 05 00001C4E R		inc coinGot
 00000A00  C6 05 00001C4A R		mov coinGenerated, 0
	   00
 00000A07  EB 07			jmp end_program

 00000A09			not_equal:
 00000A09  C6 05 00001C56 R		mov coinGet, 0
	   00

 00000A10			end_program:
					ret

 00000A15			getCoin ENDP

				; 判斷遊戲是否結束
 00000A15			endGame PROC uses eax ebx ecx edx
 00000A19  A1 00001C4E R		mov eax, coinGot
 00000A1E  83 F8 0C			cmp eax, 12
 00000A21  74 15			je equal

 00000A23  A1 00001C03 R		mov eax, endTime
 00000A28  83 F8 00			cmp eax, 0
 00000A2B  74 0B			je equal

 00000A2D  A0 00001C08 R		mov al, isDead
 00000A32  3C 01			cmp al, 1
 00000A34  74 02			je equal
 00000A36  EB 07			jmp end_program

 00000A38			equal:
 00000A38  C6 05 0000002B R		mov escConfirm, 1
	   01

 00000A3F			end_program:
					ret
 00000A44			endGame ENDP

				; 計算用於生成金幣的隨機種子
 00000A44			generateRandomSeed PROC uses eax ebx ecx edx
 00000A48			generate:
					invoke GetTickCount
 00000A4D  A3 00001C57 R	    mov seed, eax

 00000A52  A1 00001C57 R		mov eax, seed
 00000A57  69 C0 000343FD	    imul eax, 214013    
 00000A5D  05 00269EC3		    add eax, 2531011
 00000A62  C1 E8 10		    shr eax, 16    
 00000A65  25 00007FFF		    and eax, 7FFFh
 00000A6A  33 D2		    xor edx, edx
 00000A6C  BB 00000005			mov ebx, 5
 00000A71  F7 F3		    div ebx    
 00000A73  89 15 00001C42 R	    mov coinSeed, edx

 00000A79  3B 15 00001C5B R		cmp edx, preSeed
 00000A7F  74 C7			je generate
 00000A81  89 15 00001C5B R		mov preSeed,edx
					
					ret
 00000A8C			generateRandomSeed ENDP

				END main
Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/23/24 15:48:48
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00001C5F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000A8C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetAsyncKeyState . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleOutputCharacterA  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleOutputCharacter . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleOutputCP . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
cheatInput . . . . . . . . . . .	P Near	 000008C6 _TEXT	Length= 00000064 Public STDCALL
  notPressed . . . . . . . . . .	L Near	 00000922 _TEXT	
checkPlatformLevel . . . . . . .	P Near	 000001C6 _TEXT	Length= 0000006E Public STDCALL
  detectPlatform . . . . . . . .	L Near	 000001EA _TEXT	
  EndCheck . . . . . . . . . . .	L Near	 0000022F _TEXT	
displayCoinGot . . . . . . . . .	P Near	 000008A2 _TEXT	Length= 00000024 Public STDCALL
displayEndData . . . . . . . . .	P Near	 0000092A _TEXT	Length= 000000A7 Public STDCALL
  coin . . . . . . . . . . . . .	L Near	 0000092E _TEXT	
  time . . . . . . . . . . . . .	L Near	 00000941 _TEXT	
  point  . . . . . . . . . . . .	L Near	 00000954 _TEXT	
  level  . . . . . . . . . . . .	L Near	 000009A6 _TEXT	
displayEndscr  . . . . . . . . .	P Near	 000005A5 _TEXT	Length= 000000A1 Public STDCALL
  Pos1 . . . . . . . . . . . . .	L Near	 000005BC _TEXT	
  Pos2 . . . . . . . . . . . . .	L Near	 000005F8 _TEXT	
  conti  . . . . . . . . . . . .	L Near	 00000632 _TEXT	
  EndDisplay . . . . . . . . . .	L Near	 00000641 _TEXT	
displayInitialscr  . . . . . . .	P Near	 00000498 _TEXT	Length= 000000A1 Public STDCALL
  Pos1 . . . . . . . . . . . . .	L Near	 000004AF _TEXT	
  Pos2 . . . . . . . . . . . . .	L Near	 000004EB _TEXT	
  conti  . . . . . . . . . . . .	L Near	 00000525 _TEXT	
  EndDisplay . . . . . . . . . .	L Near	 00000534 _TEXT	
displayTime  . . . . . . . . . .	P Near	 00000459 _TEXT	Length= 0000003F Public STDCALL
drawPlayer . . . . . . . . . . .	P Near	 00000300 _TEXT	Length= 0000003B Public STDCALL
drawScreen . . . . . . . . . . .	P Near	 0000033B _TEXT	Length= 00000092 Public STDCALL
  screenFileName . . . . . . . .	DWord	 bp + 00000008
  ReadLoop . . . . . . . . . . .	L Near	 00000361 _TEXT	
  EndDraw  . . . . . . . . . . .	L Near	 000003BA _TEXT	
endGame  . . . . . . . . . . . .	P Near	 00000A15 _TEXT	Length= 0000002F Public STDCALL
  equal  . . . . . . . . . . . .	L Near	 00000A38 _TEXT	
  end_program  . . . . . . . . .	L Near	 00000A3F _TEXT	
generateCoins  . . . . . . . . .	P Near	 000006B2 _TEXT	Length= 000001F0 Public STDCALL
  Level1 . . . . . . . . . . . .	L Near	 000006DD _TEXT	
  Pos1_1 . . . . . . . . . . . .	L Near	 000006FF _TEXT	
  Pos1_2 . . . . . . . . . . . .	L Near	 00000716 _TEXT	
  Pos1_3 . . . . . . . . . . . .	L Near	 0000072D _TEXT	
  Pos1_4 . . . . . . . . . . . .	L Near	 00000744 _TEXT	
  Level2 . . . . . . . . . . . .	L Near	 00000765 _TEXT	
  Pos2_1 . . . . . . . . . . . .	L Near	 00000787 _TEXT	
  Pos2_2 . . . . . . . . . . . .	L Near	 0000079E _TEXT	
  Pos2_3 . . . . . . . . . . . .	L Near	 000007B5 _TEXT	
  Pos2_4 . . . . . . . . . . . .	L Near	 000007CC _TEXT	
  Level3 . . . . . . . . . . . .	L Near	 000007EA _TEXT	
  Pos3_1 . . . . . . . . . . . .	L Near	 0000080C _TEXT	
  Pos3_2 . . . . . . . . . . . .	L Near	 00000820 _TEXT	
  Pos3_3 . . . . . . . . . . . .	L Near	 00000834 _TEXT	
  Pos3_4 . . . . . . . . . . . .	L Near	 00000848 _TEXT	
  output . . . . . . . . . . . .	L Near	 0000085C _TEXT	
generateRandomSeed . . . . . . .	P Near	 00000A44 _TEXT	Length= 00000048 Public STDCALL
  generate . . . . . . . . . . .	L Near	 00000A48 _TEXT	
getCoin  . . . . . . . . . . . .	P Near	 000009D1 _TEXT	Length= 00000044 Public STDCALL
  compareX . . . . . . . . . . .	L Near	 000009D5 _TEXT	
  compareY . . . . . . . . . . .	L Near	 000009E4 _TEXT	
  equal  . . . . . . . . . . . .	L Near	 000009F3 _TEXT	
  not_equal  . . . . . . . . . .	L Near	 00000A09 _TEXT	
  end_program  . . . . . . . . .	L Near	 00000A10 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000151 Public STDCALL
  initialLoop  . . . . . . . . .	L Near	 0000000C _TEXT	
  conti  . . . . . . . . . . . .	L Near	 00000026 _TEXT	
  GameLoop . . . . . . . . . . .	L Near	 00000082 _TEXT	
  endLoop  . . . . . . . . . . .	L Near	 000000E2 _TEXT	
  Refresh  . . . . . . . . . . .	L Near	 000000ED _TEXT	
  CheckInput . . . . . . . . . .	L Near	 00000105 _TEXT	
  SkipRefresh  . . . . . . . . .	L Near	 00000139 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readInputEndscr  . . . . . . . .	P Near	 00000646 _TEXT	Length= 0000006C Public STDCALL
  confirm  . . . . . . . . . . .	L Near	 0000066D _TEXT	
  checkA . . . . . . . . . . . .	L Near	 00000679 _TEXT	
  checkD . . . . . . . . . . . .	L Near	 00000693 _TEXT	
  no_key_pressed . . . . . . . .	L Near	 000006AD _TEXT	
readInputInitialscr  . . . . . .	P Near	 00000539 _TEXT	Length= 0000006C Public STDCALL
  confirm  . . . . . . . . . . .	L Near	 00000560 _TEXT	
  checkW . . . . . . . . . . . .	L Near	 0000056C _TEXT	
  checkS . . . . . . . . . . . .	L Near	 00000586 _TEXT	
  no_key_pressed . . . . . . . .	L Near	 000005A0 _TEXT	
readPlayerMoveInput  . . . . . .	P Near	 00000234 _TEXT	Length= 000000CC Public STDCALL
  CheckShift . . . . . . . . . .	L Near	 0000025C _TEXT	
  CheckA . . . . . . . . . . . .	L Near	 00000277 _TEXT	
  CheckD . . . . . . . . . . . .	L Near	 000002B1 _TEXT	
  CheckESC . . . . . . . . . . .	L Near	 000002EB _TEXT	
  EndInput . . . . . . . . . . .	L Near	 000002FF _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
updateLevel  . . . . . . . . . .	P Near	 000003CD _TEXT	Length= 0000008C Public STDCALL
updatePhysics  . . . . . . . . .	P Near	 00000151 _TEXT	Length= 00000075 Public STDCALL
  EndPhysics . . . . . . . . . .	L Near	 000001C3 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TimerXY  . . . . . . . . . . . .	COORD	 0000003A _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 0000005E _DATA	
bytesRead  . . . . . . . . . . .	DWord	 00000047 _DATA	
bytesWritten . . . . . . . . . .	DWord	 00000020 _DATA	
charRead . . . . . . . . . . . .	DWord	 00000018 _DATA	
coinAttribute  . . . . . . . . .	Word	 00001C4C _DATA	
coinCoord  . . . . . . . . . . .	COORD	 00001C46 _DATA	
coinGenerated  . . . . . . . . .	Byte	 00001C4A _DATA	
coinGet  . . . . . . . . . . . .	Byte	 00001C56 _DATA	
coinGotCoord1  . . . . . . . . .	COORD	 00001C52 _DATA	
coinGot  . . . . . . . . . . . .	DWord	 00001C4E _DATA	
coinSeed . . . . . . . . . . . .	DWord	 00001C42 _DATA	
coinSymbol . . . . . . . . . . .	Byte	 00001C4B _DATA	
count  . . . . . . . . . . . . .	DWord	 00000024 _DATA	
currentLevel . . . . . . . . . .	DWord	 0000003E _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
elapsedTime  . . . . . . . . . .	DWord	 00000032 _DATA	
endCoinGotCoord  . . . . . . . .	COORD	 00001C3A _DATA	
endCoinGot . . . . . . . . . . .	DWord	 00001BFF _DATA	
endExitLeftPos . . . . . . . . .	COORD	 00001C22 _DATA	
endExitLeftSymbol  . . . . . . .	DWord	 00001C26 _DATA	
endExitRightPos  . . . . . . . .	COORD	 00001C2E _DATA	
endExitRightSymbol . . . . . . .	DWord	 00001C32 _DATA	
endKeyPos  . . . . . . . . . . .	Byte	 00001BFD _DATA	
endStartLeftPos  . . . . . . . .	COORD	 00001C0A _DATA	
endStartLeftSymbol . . . . . . .	DWord	 00001C0E _DATA	
endStartRightPos . . . . . . . .	COORD	 00001C16 _DATA	
endStartRightSymbol  . . . . . .	DWord	 00001C1A _DATA	
endTimeCoord . . . . . . . . . .	COORD	 00001C3E _DATA	
endTime  . . . . . . . . . . . .	DWord	 00001C03 _DATA	
endconfirm . . . . . . . . . . .	Byte	 00001BFE _DATA	
endscrfile . . . . . . . . . . .	Byte	 00001BF2 _DATA	
escConfirm . . . . . . . . . . .	Byte	 0000002B _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00000043 _DATA	
gamescrfile  . . . . . . . . . .	Byte	 0000004F _DATA	
gravity  . . . . . . . . . . . .	Number	 00000001h   
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
initialExitLeftPos . . . . . . .	COORD	 00001BDA _DATA	
initialExitLeftSymbol  . . . . .	DWord	 00001BDE _DATA	
initialExitRightPos  . . . . . .	COORD	 00001BE6 _DATA	
initialExitRightSymbol . . . . .	DWord	 00001BEA _DATA	
initialKeyPos  . . . . . . . . .	Byte	 00001BC0 _DATA	
initialStartLeftPos  . . . . . .	COORD	 00001BC2 _DATA	
initialStartLeftSymbol . . . . .	DWord	 00001BC6 _DATA	
initialStartRightPos . . . . . .	COORD	 00001BCE _DATA	
initialStartRightSymbol  . . . .	DWord	 00001BD2 _DATA	
initialconfirm . . . . . . . . .	Byte	 00001BC1 _DATA	
initialscrfile . . . . . . . . .	Byte	 00001BB6 _DATA	
isCheatKeyPressed  . . . . . . .	Byte	 00000042 _DATA	
isDead . . . . . . . . . . . . .	Byte	 00001C08 _DATA	
isRunning  . . . . . . . . . . .	Byte	 00000009 _DATA	
jumpForce  . . . . . . . . . . .	Number	 00000004h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
needsRefresh . . . . . . . . . .	Byte	 00001C07 _DATA	
onPlatform . . . . . . . . . . .	Byte	 0000002A _DATA	
outputHandle . . . . . . . . . .	DWord	 0000001C _DATA	
platformBuffer . . . . . . . . .	Byte	 0000000A _DATA	
platformCoord  . . . . . . . . .	COORD	 00000014 _DATA	
platformLevel  . . . . . . . . .	Word	 00000028 _DATA	
playerAttributes . . . . . . . .	Word	 00000001 _DATA	
playerSize . . . . . . . . . . .	Number	 00000001h   
playerXY . . . . . . . . . . . .	COORD	 00000003 _DATA	
player . . . . . . . . . . . . .	Byte	 00000000 _DATA	
preSeed  . . . . . . . . . . . .	DWord	 00001C5B _DATA	
prevKeyPos . . . . . . . . . . .	Byte	 00001C09 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
screenBytesWritten . . . . . . .	DWord	 0000004B _DATA	
seed . . . . . . . . . . . . . .	DWord	 00001C57 _DATA	
startTime  . . . . . . . . . . .	DWord	 0000002E _DATA	
timeLimit  . . . . . . . . . . .	DWord	 00000036 _DATA	
updateInterval . . . . . . . . .	Word	 0000002C _DATA	
velocityY  . . . . . . . . . . .	Word	 00000007 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
