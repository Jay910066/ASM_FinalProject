Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/15/24 20:09:43
main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDELIB kernel32.lib

 = 00000001			playerSize = 1
 = 00000001			gravity = 1
 = 00000005			jumpForce = 5

 00000000			.data
 00000000 50			player BYTE 'P'

 00000001  0000000A [		platformBuffer BYTE 10 DUP(?)
	    00
	   ]
 0000000B 0000 0000		platformCoord COORD <0,0>
 0000000F 00000000		charRead DWORD ?

 00000013 00000000		outputHandle DWORD 0
 00000017 00000000		bytesWritten DWORD 0
 0000001B 00000000		count DWORD 0
 0000001F 000A 0005		playerXY COORD <10,5>
 00000023 0000			velocityY SWORD 0

 00000025 0018			platformLevel WORD 24
 00000027 01			onPlatform BYTE 1

 00000028 00			escConfirm byte 0

 00000029 00000000		cellsWritten DWORD ?
 0000002D  00000001 [		playerAttributes WORD playerSize DUP(0bh)
	    000B
	   ]

 0000002F 0032			updateInterval WORD 50 ; 50ms each update

 00000031 00000000		startTime DWORD ?
 00000035 00000000		elapsedTime DWORD ?
 00000039 00000258		timeLimit DWORD 600 ; 600 seconds
 0000003D 0000 0000		TimerXY COORD <0,0>

				;遊戲畫面資料
 00000041 67 61 6D 65 66	gamescrfile BYTE 'gamefield.txt',0
	   69 65 6C 64 2E
	   74 78 74 00
 0000004F 00000000		gamefilehandle HANDLE ?
 00000053 00000000		gamebytesRead DWORD ?
 00000057 00000000		gamescrBytesWritten DWORD ?

				;初始畫面資料
 0000005B  00001388 [		buffer BYTE 5000 DUP(?)
	    00
	   ]
 000013E3 73 74 61 72 74	initialscrfile BYTE 'start.txt',0
	   2E 74 78 74 00
 000013ED 00000000		initialfilehandle HANDLE ?
 000013F1 00000000		initialbytesRead DWORD ?
 000013F5 00000000		initialscrBytesWritten DWORD ?
 000013F9 00			initialKeyPos Byte 0
 000013FA 00			initialconfirm Byte 0

 000013FB 0031 0011		initialStartLeftPos COORD <49,17>
 000013FF 0000003E		initialStartLeftSymbol DWORD '>',0
	   00000000
 00001407 0049 0011		initialStartRightPos COORD <73,17>
 0000140B 0000003C		initialStartRightSymbol DWORD '<',0
	   00000000

 00001413 0031 0017		initialExitLeftPos COORD <49,23>
 00001417 0000003E		initialExitLeftSymbol DWORD '>',0
	   00000000
 0000141F 0049 0017		initialExitRightPos COORD <73,23>
 00001423 0000003C		initialExitRightSymbol DWORD '<',0
	   00000000

				;結算畫面資料
 0000142B 66 69 6E 69 73	endscrfile BYTE 'finish.txt',0
	   68 2E 74 78 74
	   00
 00001436 00000000		endfilehandle HANDLE ?
 0000143A 00000000		endbytesRead DWORD ?
 0000143E 00000000		endscrBytesWritten DWORD ?
 00001442 00			endKeyPos Byte 0
 00001443 00			endconfirm Byte 0
 00001444 00000000		endCoinGot DWORD 0
 00001448 00000000		endTime DWORD 0
 0000144C 01			needsRefresh BYTE 1
 0000144D 00			isDead BYTE 0
 0000144E 00			prevKeyPos BYTE 0

 0000144F 001E 0014		endStartLeftPos COORD <30,20>
 00001453 0000003E		endStartLeftSymbol DWORD '>',0
	   00000000
 0000145B 0037 0014		endStartRightPos COORD <55,20>
 0000145F 0000003C		endStartRightSymbol DWORD '<',0
	   00000000

 00001467 0044 0014		endExitLeftPos COORD <68,20>
 0000146B 0000003E		endExitLeftSymbol DWORD '>',0
	   00000000
 00001473 005D 0014		endExitRightPos COORD <93,20>
 00001477 0000003C		endExitRightSymbol DWORD '<',0
	   00000000
 0000147F 002B 0007		endCoinGotCoord COORD <43,7>
 00001483 002B 0004		endTimeCoord COORD <43,4>

				;金幣生成資料
 00001487 00000001		coinSeed DWORD 1
 0000148B 0000 0000		coinCoord COORD <0,0>
 0000148F 00			coinGenerated byte 0
 00001490 24			coinSymbol byte '$'
 00001491 000E			coinAttribute WORD 0Eh
 00001493 00000000		coinGot DWORD 0
 00001497 2F 31 35 00		coinOutput db "/15",0
 0000149B 0001 0002		coinGotCoord1 COORD <1,2>
 0000149F 0003 0002		coinGotCoord2 COORD <3,2>
 000014A3 00			coinGet byte 0

 00000000			.code
					SetConsoleOutputCP PROTO STDCALL :DWORD
					GetAsyncKeyState PROTO STDCALL :DWORD
					ReadConsoleOutputCharacterA PROTO STDCALL :DWORD, :PTR BYTE, :DWORD, :COORD, :PTR DWORD
 00000000			main PROC
					INVOKE SetConsoleOutputCP, 437

					; Get the console ouput handle
					INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000011  A3 00000013 R		mov outputHandle, eax	; save console handle

 00000016			initialLoop:
 00000016  E8 00000000 E		call Clrscr
 0000001B  E8 00000364			call displayInitialscr
 00000020  E8 0000047B			call readInputInitialscr
 00000025  80 3D 000013FA R		cmp Initialconfirm, 1
	   01
 0000002C  74 02			je conti
 0000002E  EB E6			jmp initialLoop

 00000030			conti:
					INVOKE GetTickCount
 00000035  A3 00000031 R		mov startTime, eax
 0000003A  66| C7 05			mov playerXY.X, 10
	   0000001F R
	   000A
 00000043  66| C7 05			mov playerXY.Y, 5
	   00000021 R
	   0005
 0000004C  66| C7 05			mov velocityY, 0
	   00000023 R
	   0000
 00000055  C6 05 0000144D R		mov isDead, 0
	   00
 0000005C  C6 05 00000028 R		mov escConfirm, 0
	   00
 00000063  C6 05 00001443 R		mov endConfirm, 0
	   00
 0000006A  C7 05 00001493 R		mov coinGot, 0
	   00000000
					
 00000074			GameLoop:
 00000074  E8 00000000 E		call Clrscr
 00000079  E8 000000B6			call updatePhysics
 0000007E  E8 00000234			call displayGamescr
 00000083  E8 000001F4			call drawPlayer
 00000088  E8 0000011C			call checkPlatformLevel
 0000008D  E8 000002B3			call displayTime
 00000092  E8 000006DF			call displayCoinGot
 00000097  E8 0000017B			call readInput
 0000009C  E8 0000077D			call getCoin
 000000A1  E8 000005EE			call generateCoins
 000000A6  E8 000007BD			call endGame
 000000AB  80 3D 00000028 R		cmp  escConfirm, 1
	   01
 000000B2  74 11			je endLoop
					invoke Sleep, updateInterval
 000000C3  EB AF			jmp GameLoop

 000000C5			endLoop:
 000000C5  80 3D 0000144C R		cmp needsRefresh, 1
	   01
 000000CC  74 02			je Refresh
 000000CE  EB 18			jmp CheckInput

 000000D0			Refresh:
 000000D0  E8 00000000 E		call Clrscr
 000000D5  E8 00000432			call displayEndscr
 000000DA  E8 000006E9			call displayEndData
 000000DF  C6 05 0000144C R		mov needsRefresh, 0
	   00
 000000E6  EB 00			jmp CheckInput

 000000E8			CheckInput:
 000000E8  E8 0000053B			call readInputEndscr
 000000ED  80 3D 00001443 R		cmp endconfirm, 1
	   01
 000000F4  0F 84 FFFFFF36		je conti
 000000FA  A0 00001442 R		mov al, endKeyPos
 000000FF  8A 25 0000144E R		mov ah, prevKeyPos
 00000105  3A E0			cmp ah, al
 00000107  74 13			je SkipRefresh
 00000109  C6 05 0000144C R		mov needsRefresh, 1
	   01
 00000110  8A 25 00001442 R		mov ah, endKeyPos
 00000116  88 25 0000144E R		mov prevKeyPos, ah

 0000011C			SkipRefresh:
					invoke Sleep, updateInterval
 0000012B  EB 98			jmp endLoop

					exit
 00000134			main ENDP

 00000134			updatePhysics PROC uses eax ebx
					; 檢查是否超出螢幕上方
					.IF playerXY.Y >= 60000
 00000141  66| C7 05				mov playerXY.Y, 0
	   00000021 R
	   0000
 0000014A  66| C7 05				mov platformLevel, 0
	   00000025 R
	   0000
					.ENDIF

					; 檢查是否掉出螢幕下方
					.IF playerXY.Y >= 29
 0000015D  C6 05 0000144D R			mov isDead, 1
	   01
					.ENDIF
				    ; 更新玩家的 Y 座標
 00000164  66| A1		    mov ax, velocityY
	   00000023 R
 0000016A  66| 01 05		    add playerXY.Y, ax        ; 根據垂直速度更新位置
	   00000021 R

				    ; 應用重力（加速垂直速度）
 00000171  66| 83 05		    add velocityY, gravity    ; 重力影響：速度越來越快
	   00000023 R 01

				    ; 檢查是否低於地面
 00000179  66| A1		    mov ax, playerXY.Y
	   00000021 R
 0000017F  66| 3B 05		    cmp ax, platformLevel
	   00000025 R
 00000186  7E 1E			jle EndPhysics            ; 如果未超過地面，跳過地面處理

				    ; 如果超出地面，重置到地面
 00000188  66| A1		    mov ax, platformLevel
	   00000025 R
 0000018E  66| A3		    mov playerXY.Y, ax        ; 將玩家重置到地面
	   00000021 R
 00000194  66| C7 05		    mov velocityY, 0          ; 停止垂直運動
	   00000023 R
	   0000
 0000019D  C6 05 00000027 R	    mov onPlatform, 1           ; 標記玩家在地面上
	   01
 000001A4  EB 00		    jmp EndPhysics

 000001A6			EndPhysics:
				    ret
 000001A9			updatePhysics ENDP

				; 檢查平台高度
 000001A9			checkPlatformLevel PROC uses eax ebx ecx edx
 000001AD  66| A1			mov ax, playerXY.X
	   0000001F R
 000001B3  66| 8B 1D			mov bx, playerXY.Y
	   00000021 R
 000001BA  66| 43			inc bx
 000001BC  66| A3			mov platformCoord.X, ax
	   0000000B R
 000001C2  66| 89 1D			mov platformCoord.Y, bx
	   0000000D R

 000001C9  66| B9 001E			mov cx, 30
 000001CD			detectPlatform:
 000001CD  66| 8B D1			mov dx, cx

					INVOKE ReadConsoleOutputCharacterA,
					outputHandle,
					ADDR platformBuffer,
					1,
					platformCoord,
					ADDR charRead

 000001ED  A0 00000001 R		mov al, platformBuffer
					.IF al != 32
 000001F6  66| A1				mov ax, platformCoord.Y
	   0000000D R
 000001FC  66| 48				dec ax
 000001FE  66| A3				mov platformLevel, ax
	   00000025 R
 00000204  EB 0C				jmp EndCheck
					.ENDIF
 00000206  66| FF 05			inc platformCoord.Y
	   0000000D R
 0000020D  66| 8B CA			mov cx, dx
 00000210  E2 BB			loop detectPlatform

					; 輸出Debug訊息
				;showINFO:
					;mov dl, 0
					;mov dh, 0
					;call gotoxy
					;call WriteDec

 00000212			EndCheck:
					ret
 00000217			checkPlatformLevel ENDP

 00000217			readInput PROC
				    ; 檢查W鍵（向上移動）
				    INVOKE GetAsyncKeyState, 'W'
 0000021E  66| A9 8000		    test ax, 8000h
 00000222  74 1B		    jz CheckA
 00000224  80 3D 00000027 R		cmp onPlatform, 1
	   01
 0000022B  75 12			jne CheckA
 0000022D  66| B8 0005			mov ax, jumpForce
 00000231  66| 29 05			sub velocityY, ax
	   00000023 R
 00000238  C6 05 00000027 R		mov onPlatform, 0
	   00

 0000023F			CheckA:
				    ; 檢查A鍵（向左移動）
				    INVOKE GetAsyncKeyState, 'A'
 00000246  66| A9 8000		    test ax, 8000h
 0000024A  74 07		    jz CheckD
 0000024C  66| FF 0D		    dec playerXY.X           ; 玩家X座標減少，向左移動
	   0000001F R

 00000253			CheckD:
				    ; 檢查D鍵（向右移動）
				    INVOKE GetAsyncKeyState, 'D'
 0000025A  66| A9 8000		    test ax, 8000h
 0000025E  74 07		    jz CheckESC
 00000260  66| FF 05		    inc playerXY.X           ; 玩家X座標增加，向右移動
	   0000001F R

 00000267			CheckESC:
				    ; 檢查ESC鍵（退出遊戲）
				    INVOKE GetAsyncKeyState, VK_ESCAPE
 0000026E  66| A9 8000		    test ax, 8000h
 00000272  74 07		    jz EndInput
 00000274  C6 05 00000028 R	    mov escConfirm,1
	   01

 0000027B			EndInput:
 0000027B  C3				ret
 0000027C			readInput ENDP

 0000027C			drawPlayer PROC
					INVOKE WriteConsoleOutputAttribute,
					outputHandle, 
					OFFSET playerAttributes,
					playerSize, 
					playerXY,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle,
					OFFSET player,
					playerSize,
					playerXY,
					OFFSET count
 000002B6  C3				ret
 000002B7			drawPlayer ENDP

 000002B7			displayGamescr PROC uses eax ebx ecx edx
				    ;打開文字檔案
					INVOKE CreateFile, ADDR gamescrfile, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL 
 000002D7  A3 0000004F R		mov gamefilehandle, eax

 000002DC			ReadLoop:
					;使用UTF-8編碼，顯示符號
					INVOKE SetConsoleOutputCP, 65001

					;讀取檔案
					INVOKE ReadFile, gamefilehandle, ADDR buffer, SIZEOF buffer, ADDR gamebytesRead, NULL

					;畫面更新及輸出檔案
 00000302  E8 00000000 E		call Clrscr
					INVOKE SetFilePointer, gamefilehandle, 0, NULL, FILE_BEGIN
					INVOKE WriteConsole, outputHandle, ADDR buffer, gamebytesRead, ADDR gamescrBytesWritten, NULL

 00000335			EndDisplay:
					;關閉檔案
				    INVOKE CloseHandle, gamefilehandle
				    ret
 00000345			displayGamescr ENDP

 00000345			displayTime PROC uses eax ebx ecx edx
					INVOKE GetTickCount
 0000034E  2B 05 00000031 R		sub eax, startTime
 00000354  99				cdq
 00000355  BB 000003E8			mov ebx, 1000
 0000035A  F7 F3			div ebx
 0000035C  A3 00000035 R		mov elapsedTime, eax
 00000361  A1 00000039 R		mov eax, timeLimit
 00000366  2B 05 00000035 R		sub eax, elapsedTime
 0000036C  A3 00001448 R		mov endTime, eax
 00000371  B2 01			mov dl, 1
 00000373  B6 01			mov dh, 1
 00000375  E8 00000000 E		call gotoxy
 0000037A  E8 00000000 E		call WriteDec
					ret
 00000384			displayTime ENDP

 00000384			displayInitialscr PROC uses eax ebx ecx edx
				    ;打開文字檔案
					INVOKE CreateFile, ADDR initialscrfile, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL 
 000003A4  A3 000013ED R		mov initialfilehandle, eax

 000003A9			ReadLoop:
					;使用UTF-8編碼，顯示符號
					INVOKE SetConsoleOutputCP, 65001

					;讀取檔案
					INVOKE ReadFile, initialfilehandle, ADDR buffer, SIZEOF buffer, ADDR initialbytesRead, NULL

					;畫面更新及輸出檔案
 000003CF  E8 00000000 E		call Clrscr
					INVOKE SetFilePointer, initialfilehandle, 0, NULL, FILE_BEGIN
					INVOKE WriteConsole, outputHandle, ADDR buffer, initialbytesRead, ADDR initialscrBytesWritten, NULL
 00000402  80 3D 000013F9 R		cmp initialKeyPos, 1
	   01
 00000409  74 3C			je Pos2 

 0000040B			Pos1:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialStartLeftSymbol,
					1, 
					initialStartLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialStartRightSymbol,
					1, 
					initialStartRightPos,
					OFFSET count
 00000445  EB 3A			jmp conti

 00000447			Pos2:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialExitLeftSymbol,
					1, 
					initialExitLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET initialExitRightSymbol,
					1, 
					initialExitRightPos,
					OFFSET count

 00000481			conti:
					INVOKE Sleep, updateInterval

 00000490			EndDisplay:
					;關閉檔案
				    INVOKE CloseHandle, initialfilehandle
				    ret
 000004A0			displayInitialscr ENDP

 000004A0			readInputInitialscr PROC uses eax ebx ecx edx
					INVOKE GetAsyncKeyState, VK_RETURN
 000004AB  A9 00008000			test eax, 8000h                     
 000004B0  74 21		    jz checkW
 000004B2  80 3D 000013F9 R		cmp initialKeyPos, 0 ;判斷按鍵位置
	   00
 000004B9  74 0C			je confirm
 000004BB  E8 00000000 E		call Clrscr
					INVOKE ExitProcess, 0

 000004C7			confirm:
 000004C7  C6 05 000013FA R		mov initialconfirm, 1
	   01
					ret

 000004D3			checkW:
					INVOKE GetAsyncKeyState, 'W'
 000004DA  A9 00008000			test eax, 8000h                     
 000004DF  74 0C		    jz checkS
 000004E1  C6 05 000013F9 R		mov initialKeyPos, 0
	   00
					ret

 000004ED			checkS:
					INVOKE GetAsyncKeyState, 'S'
 000004F4  A9 00008000			test eax, 8000h                     
 000004F9  74 0C		    jz no_key_pressed
 000004FB  C6 05 000013F9 R		mov initialKeyPos, 1
	   01
					ret

 00000507			no_key_pressed:
					ret
 0000050C			readInputInitialscr ENDP

 0000050C			displayEndscr PROC uses eax ebx ecx edx
				    ;打開文字檔案
					INVOKE CreateFile, ADDR endscrfile, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL 
 0000052C  A3 00001436 R		mov endfilehandle, eax

 00000531			ReadLoop:
					;使用UTF-8編碼，顯示符號
					INVOKE SetConsoleOutputCP, 65001

					;讀取檔案
					INVOKE ReadFile, endfilehandle, ADDR buffer, SIZEOF buffer, ADDR endbytesRead, NULL

					;畫面更新及輸出檔案
 00000557  E8 00000000 E		call Clrscr
					INVOKE SetFilePointer, endfilehandle, 0, NULL, FILE_BEGIN
					INVOKE WriteConsole, outputHandle, ADDR buffer, endbytesRead, ADDR endscrBytesWritten, NULL
 0000058A  80 3D 00001442 R		cmp endKeyPos, 1
	   01
 00000591  74 3C			je Pos2 

 00000593			Pos1:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endStartLeftSymbol,
					1, 
					endStartLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endStartRightSymbol,
					1, 
					endStartRightPos,
					OFFSET count
 000005CD  EB 3A			jmp conti

 000005CF			Pos2:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endExitLeftSymbol,
					1, 
					endExitLeftPos,
					OFFSET count

					INVOKE WriteConsoleOutputCharacter,
					outputHandle, 
					OFFSET endExitRightSymbol,
					1, 
					endExitRightPos,
					OFFSET count

 00000609			conti:
					INVOKE Sleep, updateInterval

 00000618			EndDisplay:
					;關閉檔案
				    INVOKE CloseHandle, endfilehandle
				    ret
 00000628			displayEndscr ENDP

 00000628			readInputEndscr PROC uses eax ebx ecx edx
					INVOKE GetAsyncKeyState, VK_RETURN
 00000633  A9 00008000			test eax, 8000h                     
 00000638  74 21		    jz checkA
 0000063A  80 3D 00001442 R		cmp endKeyPos, 0 ;判斷按鍵位置
	   00
 00000641  74 0C			je confirm
 00000643  E8 00000000 E		call Clrscr
					INVOKE ExitProcess, 0

 0000064F			confirm:
 0000064F  C6 05 00001443 R		mov endconfirm, 1
	   01
					ret

 0000065B			checkA:
					INVOKE GetAsyncKeyState, 'A'
 00000662  A9 00008000			test eax, 8000h                     
 00000667  74 0C		    jz checkD
 00000669  C6 05 00001442 R		mov endKeyPos, 0
	   00
					ret

 00000675			checkD:
					INVOKE GetAsyncKeyState, 'D'
 0000067C  A9 00008000			test eax, 8000h                     
 00000681  74 0C		    jz no_key_pressed
 00000683  C6 05 00001442 R		mov endKeyPos, 1
	   01
					ret

 0000068F			no_key_pressed:
					ret
 00000694			readInputEndscr ENDP

 00000694			generateCoins PROC uses eax ebx ecx edx
 00000698  80 3D 0000148F R		cmp coinGenerated, 1
	   01
 0000069F  0F 84 0000008B		je output
 000006A5  A1 00001487 R		mov eax, coinSeed
 000006AA  B9 00000004			mov ecx, 4
 000006AF  33 D2			xor edx,edx
 000006B1  F7 F1			div ecx
 000006B3  01 05 00001487 R		add coinSeed, eax 
 000006B9  83 3D 00001487 R		cmp coinSeed, 1
	   01
 000006C0  74 14			je Pos1
 000006C2  83 3D 00001487 R		cmp coinSeed, 2
	   02
 000006C9  74 1F			je Pos2
 000006CB  83 3D 00001487 R		cmp coinSeed, 3
	   03
 000006D2  74 2A			je Pos3
 000006D4  EB 3C			jmp Pos4

 000006D6			Pos1:
 000006D6  66| C7 05			mov coinCoord.x, 15
	   0000148B R
	   000F
 000006DF  66| C7 05			mov coinCoord.y, 2
	   0000148D R
	   0002
 000006E8  EB 46			jmp output

 000006EA			Pos2:
 000006EA  66| C7 05			mov coinCoord.x, 90
	   0000148B R
	   005A
 000006F3  66| C7 05			mov coinCoord.y, 3
	   0000148D R
	   0003
 000006FC  EB 32			jmp output

 000006FE			Pos3:
 000006FE  66| C7 05			mov coinCoord.x, 40
	   0000148B R
	   0028
 00000707  66| C7 05			mov coinCoord.y, 15
	   0000148D R
	   000F
 00000710  EB 1E			jmp output

 00000712			Pos4:
 00000712  66| C7 05			mov coinCoord.x, 98
	   0000148B R
	   0062
 0000071B  66| C7 05			mov coinCoord.y, 17
	   0000148D R
	   0011
 00000724  C7 05 00001487 R		mov coinSeed, 0
	   00000000
 0000072E  EB 00			jmp output

 00000730			output:
					INVOKE WriteConsoleOutputCharacter,
					outputHandle,
					OFFSET coinSymbol,
					1,
					coinCoord,
					OFFSET count

					INVOKE WriteConsoleOutputAttribute,
					outputHandle, 
					OFFSET coinAttribute,
					1, 
					coinCoord,
					OFFSET count

 0000076A  C6 05 0000148F R		mov coinGenerated, 1
	   01
					ret
 00000776			generateCoins ENDP

 00000776			displayCoinGot PROC uses eax ebx ecx edx
				    invoke SetConsoleCursorPosition,outputHandle, coinGotCoord1
 0000078B  A1 00001493 R		mov eax, coinGot
 00000790  E8 00000000 E		call WriteDec
					invoke SetConsoleCursorPosition, outputHandle, coinGotCoord2
 000007A6  B9 00000003			mov ecx, 3
					invoke WriteFile, outputHandle, ADDR coinOutput, ecx, addr bytesWritten, NULL
					ret
 000007C8			displayCoinGot ENDP

 000007C8			displayEndData PROC uses eax ebx ecx edx
 000007CC			coin:
 000007CC  B2 2B			mov dl, 43
 000007CE  B6 07			mov dh, 7
 000007D0  E8 00000000 E		call gotoxy
 000007D5  A1 00001493 R		mov eax, CoinGot
 000007DA  E8 00000000 E		call WriteDec

 000007DF			time:
 000007DF  B2 2B			mov dl, 43
 000007E1  B6 04			mov dh, 4
 000007E3  E8 00000000 E		call gotoxy
 000007E8  A1 00001448 R		mov eax, endTime
 000007ED  E8 00000000 E		call WriteDec

 000007F2			point:
 000007F2  B2 2B			mov dl, 43
 000007F4  B6 0A			mov dh, 10
 000007F6  E8 00000000 E		call gotoxy
 000007FB  A1 00001493 R		mov eax, CoinGot
 00000800  F7 25 00001448 R		mul endTime
					.IF isDead == 1
 0000080F  B8 00000000				mov eax, 0
					.ENDIF
 00000814  E8 00000000 E		call WriteDec

					ret
 0000081E			displayEndData ENDP

 0000081E			getCoin PROC uses eax ebx ecx edx
 00000822			compareX:
 00000822  66| A1			mov ax, playerXY.x
	   0000001F R
 00000828  66| 3B 05			cmp ax, coinCoord.x
	   0000148B R
 0000082F  75 2B			jne not_equal

 00000831			compareY:
 00000831  66| A1			mov ax, playerXY.y
	   00000021 R
 00000837  66| 3B 05			cmp ax, coinCoord.y
	   0000148D R
 0000083E  75 1C			jne not_equal

 00000840			equal:
 00000840  C6 05 000014A3 R		mov coinGet, 1
	   01
 00000847  FF 05 00001493 R		inc coinGot
 0000084D  C6 05 0000148F R		mov coinGenerated, 0
	   00
 00000854  FF 05 00001487 R		inc coinSeed
 0000085A  EB 07			jmp end_program

 0000085C			not_equal:
 0000085C  C6 05 000014A3 R		mov coinGet, 0
	   00

 00000863			end_program:
					ret

 00000868			getCoin ENDP

 00000868			endGame PROC uses eax ebx ecx edx
 0000086C  A1 00001493 R		mov eax, coinGot
 00000871  83 F8 0F			cmp eax, 15
 00000874  74 15			je equal

 00000876  A1 00001448 R		mov eax, endTime
 0000087B  83 F8 00			cmp eax, 0
 0000087E  74 0B			je equal

 00000880  A0 0000144D R		mov al, isDead
 00000885  3C 01			cmp al, 1
 00000887  74 02			je equal
 00000889  EB 07			jmp end_program

 0000088B			equal:
 0000088B  C6 05 00000028 R		mov escConfirm, 1
	   01

 00000892			end_program:
					ret
 00000897			endGame ENDP

				END main
Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/15/24 20:09:43
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000014A4 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000897 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetAsyncKeyState . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleOutputCharacterA  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleOutputCP . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkPlatformLevel . . . . . . .	P Near	 000001A9 _TEXT	Length= 0000006E Public STDCALL
  detectPlatform . . . . . . . .	L Near	 000001CD _TEXT	
  EndCheck . . . . . . . . . . .	L Near	 00000212 _TEXT	
displayCoinGot . . . . . . . . .	P Near	 00000776 _TEXT	Length= 00000052 Public STDCALL
displayEndData . . . . . . . . .	P Near	 000007C8 _TEXT	Length= 00000056 Public STDCALL
  coin . . . . . . . . . . . . .	L Near	 000007CC _TEXT	
  time . . . . . . . . . . . . .	L Near	 000007DF _TEXT	
  point  . . . . . . . . . . . .	L Near	 000007F2 _TEXT	
displayEndscr  . . . . . . . . .	P Near	 0000050C _TEXT	Length= 0000011C Public STDCALL
  ReadLoop . . . . . . . . . . .	L Near	 00000531 _TEXT	
  Pos1 . . . . . . . . . . . . .	L Near	 00000593 _TEXT	
  Pos2 . . . . . . . . . . . . .	L Near	 000005CF _TEXT	
  conti  . . . . . . . . . . . .	L Near	 00000609 _TEXT	
  EndDisplay . . . . . . . . . .	L Near	 00000618 _TEXT	
displayGamescr . . . . . . . . .	P Near	 000002B7 _TEXT	Length= 0000008E Public STDCALL
  ReadLoop . . . . . . . . . . .	L Near	 000002DC _TEXT	
  EndDisplay . . . . . . . . . .	L Near	 00000335 _TEXT	
displayInitialscr  . . . . . . .	P Near	 00000384 _TEXT	Length= 0000011C Public STDCALL
  ReadLoop . . . . . . . . . . .	L Near	 000003A9 _TEXT	
  Pos1 . . . . . . . . . . . . .	L Near	 0000040B _TEXT	
  Pos2 . . . . . . . . . . . . .	L Near	 00000447 _TEXT	
  conti  . . . . . . . . . . . .	L Near	 00000481 _TEXT	
  EndDisplay . . . . . . . . . .	L Near	 00000490 _TEXT	
displayTime  . . . . . . . . . .	P Near	 00000345 _TEXT	Length= 0000003F Public STDCALL
drawPlayer . . . . . . . . . . .	P Near	 0000027C _TEXT	Length= 0000003B Public STDCALL
endGame  . . . . . . . . . . . .	P Near	 00000868 _TEXT	Length= 0000002F Public STDCALL
  equal  . . . . . . . . . . . .	L Near	 0000088B _TEXT	
  end_program  . . . . . . . . .	L Near	 00000892 _TEXT	
generateCoins  . . . . . . . . .	P Near	 00000694 _TEXT	Length= 000000E2 Public STDCALL
  Pos1 . . . . . . . . . . . . .	L Near	 000006D6 _TEXT	
  Pos2 . . . . . . . . . . . . .	L Near	 000006EA _TEXT	
  Pos3 . . . . . . . . . . . . .	L Near	 000006FE _TEXT	
  Pos4 . . . . . . . . . . . . .	L Near	 00000712 _TEXT	
  output . . . . . . . . . . . .	L Near	 00000730 _TEXT	
getCoin  . . . . . . . . . . . .	P Near	 0000081E _TEXT	Length= 0000004A Public STDCALL
  compareX . . . . . . . . . . .	L Near	 00000822 _TEXT	
  compareY . . . . . . . . . . .	L Near	 00000831 _TEXT	
  equal  . . . . . . . . . . . .	L Near	 00000840 _TEXT	
  not_equal  . . . . . . . . . .	L Near	 0000085C _TEXT	
  end_program  . . . . . . . . .	L Near	 00000863 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000134 Public STDCALL
  initialLoop  . . . . . . . . .	L Near	 00000016 _TEXT	
  conti  . . . . . . . . . . . .	L Near	 00000030 _TEXT	
  GameLoop . . . . . . . . . . .	L Near	 00000074 _TEXT	
  endLoop  . . . . . . . . . . .	L Near	 000000C5 _TEXT	
  Refresh  . . . . . . . . . . .	L Near	 000000D0 _TEXT	
  CheckInput . . . . . . . . . .	L Near	 000000E8 _TEXT	
  SkipRefresh  . . . . . . . . .	L Near	 0000011C _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readInputEndscr  . . . . . . . .	P Near	 00000628 _TEXT	Length= 0000006C Public STDCALL
  confirm  . . . . . . . . . . .	L Near	 0000064F _TEXT	
  checkA . . . . . . . . . . . .	L Near	 0000065B _TEXT	
  checkD . . . . . . . . . . . .	L Near	 00000675 _TEXT	
  no_key_pressed . . . . . . . .	L Near	 0000068F _TEXT	
readInputInitialscr  . . . . . .	P Near	 000004A0 _TEXT	Length= 0000006C Public STDCALL
  confirm  . . . . . . . . . . .	L Near	 000004C7 _TEXT	
  checkW . . . . . . . . . . . .	L Near	 000004D3 _TEXT	
  checkS . . . . . . . . . . . .	L Near	 000004ED _TEXT	
  no_key_pressed . . . . . . . .	L Near	 00000507 _TEXT	
readInput  . . . . . . . . . . .	P Near	 00000217 _TEXT	Length= 00000065 Public STDCALL
  CheckA . . . . . . . . . . . .	L Near	 0000023F _TEXT	
  CheckD . . . . . . . . . . . .	L Near	 00000253 _TEXT	
  CheckESC . . . . . . . . . . .	L Near	 00000267 _TEXT	
  EndInput . . . . . . . . . . .	L Near	 0000027B _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
updatePhysics  . . . . . . . . .	P Near	 00000134 _TEXT	Length= 00000075 Public STDCALL
  EndPhysics . . . . . . . . . .	L Near	 000001A6 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TimerXY  . . . . . . . . . . . .	COORD	 0000003D _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 0000005B _DATA	
bytesWritten . . . . . . . . . .	DWord	 00000017 _DATA	
cellsWritten . . . . . . . . . .	DWord	 00000029 _DATA	
charRead . . . . . . . . . . . .	DWord	 0000000F _DATA	
coinAttribute  . . . . . . . . .	Word	 00001491 _DATA	
coinCoord  . . . . . . . . . . .	COORD	 0000148B _DATA	
coinGenerated  . . . . . . . . .	Byte	 0000148F _DATA	
coinGet  . . . . . . . . . . . .	Byte	 000014A3 _DATA	
coinGotCoord1  . . . . . . . . .	COORD	 0000149B _DATA	
coinGotCoord2  . . . . . . . . .	COORD	 0000149F _DATA	
coinGot  . . . . . . . . . . . .	DWord	 00001493 _DATA	
coinOutput . . . . . . . . . . .	Byte	 00001497 _DATA	
coinSeed . . . . . . . . . . . .	DWord	 00001487 _DATA	
coinSymbol . . . . . . . . . . .	Byte	 00001490 _DATA	
count  . . . . . . . . . . . . .	DWord	 0000001B _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
elapsedTime  . . . . . . . . . .	DWord	 00000035 _DATA	
endCoinGotCoord  . . . . . . . .	COORD	 0000147F _DATA	
endCoinGot . . . . . . . . . . .	DWord	 00001444 _DATA	
endExitLeftPos . . . . . . . . .	COORD	 00001467 _DATA	
endExitLeftSymbol  . . . . . . .	DWord	 0000146B _DATA	
endExitRightPos  . . . . . . . .	COORD	 00001473 _DATA	
endExitRightSymbol . . . . . . .	DWord	 00001477 _DATA	
endKeyPos  . . . . . . . . . . .	Byte	 00001442 _DATA	
endStartLeftPos  . . . . . . . .	COORD	 0000144F _DATA	
endStartLeftSymbol . . . . . . .	DWord	 00001453 _DATA	
endStartRightPos . . . . . . . .	COORD	 0000145B _DATA	
endStartRightSymbol  . . . . . .	DWord	 0000145F _DATA	
endTimeCoord . . . . . . . . . .	COORD	 00001483 _DATA	
endTime  . . . . . . . . . . . .	DWord	 00001448 _DATA	
endbytesRead . . . . . . . . . .	DWord	 0000143A _DATA	
endconfirm . . . . . . . . . . .	Byte	 00001443 _DATA	
endfilehandle  . . . . . . . . .	DWord	 00001436 _DATA	
endscrBytesWritten . . . . . . .	DWord	 0000143E _DATA	
endscrfile . . . . . . . . . . .	Byte	 0000142B _DATA	
escConfirm . . . . . . . . . . .	Byte	 00000028 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gamebytesRead  . . . . . . . . .	DWord	 00000053 _DATA	
gamefilehandle . . . . . . . . .	DWord	 0000004F _DATA	
gamescrBytesWritten  . . . . . .	DWord	 00000057 _DATA	
gamescrfile  . . . . . . . . . .	Byte	 00000041 _DATA	
gravity  . . . . . . . . . . . .	Number	 00000001h   
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
initialExitLeftPos . . . . . . .	COORD	 00001413 _DATA	
initialExitLeftSymbol  . . . . .	DWord	 00001417 _DATA	
initialExitRightPos  . . . . . .	COORD	 0000141F _DATA	
initialExitRightSymbol . . . . .	DWord	 00001423 _DATA	
initialKeyPos  . . . . . . . . .	Byte	 000013F9 _DATA	
initialStartLeftPos  . . . . . .	COORD	 000013FB _DATA	
initialStartLeftSymbol . . . . .	DWord	 000013FF _DATA	
initialStartRightPos . . . . . .	COORD	 00001407 _DATA	
initialStartRightSymbol  . . . .	DWord	 0000140B _DATA	
initialbytesRead . . . . . . . .	DWord	 000013F1 _DATA	
initialconfirm . . . . . . . . .	Byte	 000013FA _DATA	
initialfilehandle  . . . . . . .	DWord	 000013ED _DATA	
initialscrBytesWritten . . . . .	DWord	 000013F5 _DATA	
initialscrfile . . . . . . . . .	Byte	 000013E3 _DATA	
isDead . . . . . . . . . . . . .	Byte	 0000144D _DATA	
jumpForce  . . . . . . . . . . .	Number	 00000005h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
needsRefresh . . . . . . . . . .	Byte	 0000144C _DATA	
onPlatform . . . . . . . . . . .	Byte	 00000027 _DATA	
outputHandle . . . . . . . . . .	DWord	 00000013 _DATA	
platformBuffer . . . . . . . . .	Byte	 00000001 _DATA	
platformCoord  . . . . . . . . .	COORD	 0000000B _DATA	
platformLevel  . . . . . . . . .	Word	 00000025 _DATA	
playerAttributes . . . . . . . .	Word	 0000002D _DATA	
playerSize . . . . . . . . . . .	Number	 00000001h   
playerXY . . . . . . . . . . . .	COORD	 0000001F _DATA	
player . . . . . . . . . . . . .	Byte	 00000000 _DATA	
prevKeyPos . . . . . . . . . . .	Byte	 0000144E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
startTime  . . . . . . . . . . .	DWord	 00000031 _DATA	
timeLimit  . . . . . . . . . . .	DWord	 00000039 _DATA	
updateInterval . . . . . . . . .	Word	 0000002F _DATA	
velocityY  . . . . . . . . . . .	Word	 00000023 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
